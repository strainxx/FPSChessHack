#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_BSideKingChar

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "BP_KingChar_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_BSideKingChar.BP_BSideKingChar_C
// 0x0090 (0x0880 - 0x07F0)
class ABP_BSideKingChar_C final : public ABP_KingChar_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_BP_BSideKingChar_C;                 // 0x07F0(0x0008)(ZeroConstructor, Transient, DuplicateTransient, UObjectWrapper)
	class UAudioComponent*                        FlyingSound;                                       // 0x07F8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	class UBoxComponent*                          HelicopterHitbox;                                  // 0x0800(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	class UBoxComponent*                          ShieldBox;                                         // 0x0808(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	class USphereComponent*                       Sphere;                                            // 0x0810(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	class UNiagaraComponent*                      Shield;                                            // 0x0818(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	class UCameraComponent*                       GlideCamera;                                       // 0x0820(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	class USpringArmComponent*                    SpringArm1;                                        // 0x0828(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 Weapon3;                                           // 0x0830(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 Weapon2;                                           // 0x0838(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	class UAudioComponent*                        BeamSFX_0;                                         // 0x0840(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	class UNiagaraComponent*                      SwordBeam_0;                                       // 0x0848(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	float                                         BeamPushSpeed;                                     // 0x0850(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Flying;                                            // 0x0854(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_855[0x3];                                      // 0x0855(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         FlyingTime;                                        // 0x0858(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          BSideSlamming;                                     // 0x085C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          ThrowingSwords;                                    // 0x085D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_85E[0x2];                                      // 0x085E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ThrowPower;                                        // 0x0860(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ThrowDamage;                                       // 0x0864(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Shielding;                                         // 0x0868(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_869[0x3];                                      // 0x0869(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ShieldTime;                                        // 0x086C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         HelicopterDamage;                                  // 0x0870(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_BSideKingChar(int32 EntryPoint);
	void EndPlaybackShield();
	void PlaybackShield();
	void StopFlyingPlayback();
	void StartFlyingPlayback();
	void BndEvt__BP_BSideKingChar_HelicopterHitbox_K2Node_ComponentBoundEvent_2_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void StopFlyingMulti();
	void StopFlyingServer();
	void BndEvt__BP_BSideKingChar_Box_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void EndShield();
	void StartShield();
	void ForceSwing();
	void StopFlying();
	void StartFlying();
	void GetDefaultCamera(class UCameraComponent** Default_Camera);
	void ReceiveTick(float DeltaSeconds);
	void MovementAbilityAll();
	void MovementAbility();
	void MainAbility();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_BSideKingChar_C">();
	}
	static class ABP_BSideKingChar_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_BSideKingChar_C>();
	}
};
static_assert(alignof(ABP_BSideKingChar_C) == 0x000010, "Wrong alignment on ABP_BSideKingChar_C");
static_assert(sizeof(ABP_BSideKingChar_C) == 0x000880, "Wrong size on ABP_BSideKingChar_C");
static_assert(offsetof(ABP_BSideKingChar_C, UberGraphFrame_BP_BSideKingChar_C) == 0x0007F0, "Member 'ABP_BSideKingChar_C::UberGraphFrame_BP_BSideKingChar_C' has a wrong offset!");
static_assert(offsetof(ABP_BSideKingChar_C, FlyingSound) == 0x0007F8, "Member 'ABP_BSideKingChar_C::FlyingSound' has a wrong offset!");
static_assert(offsetof(ABP_BSideKingChar_C, HelicopterHitbox) == 0x000800, "Member 'ABP_BSideKingChar_C::HelicopterHitbox' has a wrong offset!");
static_assert(offsetof(ABP_BSideKingChar_C, ShieldBox) == 0x000808, "Member 'ABP_BSideKingChar_C::ShieldBox' has a wrong offset!");
static_assert(offsetof(ABP_BSideKingChar_C, Sphere) == 0x000810, "Member 'ABP_BSideKingChar_C::Sphere' has a wrong offset!");
static_assert(offsetof(ABP_BSideKingChar_C, Shield) == 0x000818, "Member 'ABP_BSideKingChar_C::Shield' has a wrong offset!");
static_assert(offsetof(ABP_BSideKingChar_C, GlideCamera) == 0x000820, "Member 'ABP_BSideKingChar_C::GlideCamera' has a wrong offset!");
static_assert(offsetof(ABP_BSideKingChar_C, SpringArm1) == 0x000828, "Member 'ABP_BSideKingChar_C::SpringArm1' has a wrong offset!");
static_assert(offsetof(ABP_BSideKingChar_C, Weapon3) == 0x000830, "Member 'ABP_BSideKingChar_C::Weapon3' has a wrong offset!");
static_assert(offsetof(ABP_BSideKingChar_C, Weapon2) == 0x000838, "Member 'ABP_BSideKingChar_C::Weapon2' has a wrong offset!");
static_assert(offsetof(ABP_BSideKingChar_C, BeamSFX_0) == 0x000840, "Member 'ABP_BSideKingChar_C::BeamSFX_0' has a wrong offset!");
static_assert(offsetof(ABP_BSideKingChar_C, SwordBeam_0) == 0x000848, "Member 'ABP_BSideKingChar_C::SwordBeam_0' has a wrong offset!");
static_assert(offsetof(ABP_BSideKingChar_C, BeamPushSpeed) == 0x000850, "Member 'ABP_BSideKingChar_C::BeamPushSpeed' has a wrong offset!");
static_assert(offsetof(ABP_BSideKingChar_C, Flying) == 0x000854, "Member 'ABP_BSideKingChar_C::Flying' has a wrong offset!");
static_assert(offsetof(ABP_BSideKingChar_C, FlyingTime) == 0x000858, "Member 'ABP_BSideKingChar_C::FlyingTime' has a wrong offset!");
static_assert(offsetof(ABP_BSideKingChar_C, BSideSlamming) == 0x00085C, "Member 'ABP_BSideKingChar_C::BSideSlamming' has a wrong offset!");
static_assert(offsetof(ABP_BSideKingChar_C, ThrowingSwords) == 0x00085D, "Member 'ABP_BSideKingChar_C::ThrowingSwords' has a wrong offset!");
static_assert(offsetof(ABP_BSideKingChar_C, ThrowPower) == 0x000860, "Member 'ABP_BSideKingChar_C::ThrowPower' has a wrong offset!");
static_assert(offsetof(ABP_BSideKingChar_C, ThrowDamage) == 0x000864, "Member 'ABP_BSideKingChar_C::ThrowDamage' has a wrong offset!");
static_assert(offsetof(ABP_BSideKingChar_C, Shielding) == 0x000868, "Member 'ABP_BSideKingChar_C::Shielding' has a wrong offset!");
static_assert(offsetof(ABP_BSideKingChar_C, ShieldTime) == 0x00086C, "Member 'ABP_BSideKingChar_C::ShieldTime' has a wrong offset!");
static_assert(offsetof(ABP_BSideKingChar_C, HelicopterDamage) == 0x000870, "Member 'ABP_BSideKingChar_C::HelicopterDamage' has a wrong offset!");

}

