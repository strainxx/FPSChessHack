#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_BSidePawnChar

#include "Basic.hpp"

#include "BP_PieceChar_classes.hpp"
#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_BSidePawnChar.BP_BSidePawnChar_C
// 0x00B0 (0x07A0 - 0x06F0)
class ABP_BSidePawnChar_C final : public ABP_PieceChar_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_BP_BSidePawnChar_C;                 // 0x06F0(0x0008)(ZeroConstructor, Transient, DuplicateTransient, UObjectWrapper)
	class UCapsuleComponent*                      HitBox;                                            // 0x06F8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	bool                                          Swinging;                                          // 0x0700(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          CanHit;                                            // 0x0701(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_702[0x2];                                      // 0x0702(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AllyWalkSpeed;                                     // 0x0704(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AllyFiringSpeed;                                   // 0x0708(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AllyShootDamage;                                   // 0x070C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AllyMaxHealth;                                     // 0x0710(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SprintSpeed;                                       // 0x0714(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         AllyMaxCount;                                      // 0x0718(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_71C[0x4];                                      // 0x071C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           SpawningTimer;                                     // 0x0720(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	float                                         AllyDashTime;                                      // 0x0728(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          EnemyInvincible;                                   // 0x072C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_72D[0x3];                                      // 0x072D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SwingInvincibleTime;                               // 0x0730(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_734[0x4];                                      // 0x0734(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ABP_BSidePawnChar_C*>            Allies;                                            // 0x0738(0x0010)(Edit, BlueprintVisible, Net, DisableEditOnTemplate, DisableEditOnInstance, RepNotify)
	float                                         SwordPushStrength;                                 // 0x0748(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MaxAllyWalkSpeed;                                  // 0x074C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AllyJumpPower;                                     // 0x0750(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AllyJumpZPower;                                    // 0x0754(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<int32>                                 LaunchIndices;                                     // 0x0758(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	float                                         ThrowDamage;                                       // 0x0768(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ThrowPower;                                        // 0x076C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                LastInput;                                         // 0x0770(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         InputTimestamp;                                    // 0x077C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class ABP_BSidePawnChar_C*>            TempAllies;                                        // 0x0780(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	TArray<class AActor*>                         SwingHitList;                                      // 0x0790(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)

public:
	void ExecuteUbergraph_BP_BSidePawnChar(int32 EntryPoint);
	void PlaybackThrowSword();
	void UnswingPlayback();
	void RecordUnswingServer();
	void RecordUnswingMulti();
	void RecordUnswing();
	void SwingPlayback();
	void RecordSwingServer();
	void RecordSwingMulti();
	void RecordSwing();
	void DestroySelf();
	void ReleaseBlockServer(class ABP_PieceChar_C* Target);
	void PressBlockServer(class ABP_PieceChar_C* Target);
	void StopShootingServer(class ABP_PieceChar_C* Target, const struct FVector& Direction);
	void StartShootingServer(class ABP_PieceChar_C* Target, const struct FVector& Direction);
	void SetLastInput(const struct FVector& LastInput_0);
	void EndJumpServer(class ABP_PieceChar_C* Target);
	void JumpServer(class ABP_PieceChar_C* Target);
	void SetRotationServer(class ABP_PieceChar_C* Target);
	void DestroyAllAllies();
	void AllyJump();
	void InpAxisEvt_Pitch_K2Node_InputAxisEvent_1(float AxisValue);
	void InpAxisEvt_Yaw_K2Node_InputAxisEvent_0(float AxisValue);
	void ThrowSword();
	void ForceSwing();
	void BndEvt__BP_KingChar_Hitbox_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void TurnOffInvincible();
	void CheckForHits(class UPrimitiveComponent* Component, class AActor* Actor);
	void EndAllyDash();
	void SpawnAlly(const struct FVector& LaunchVector);
	void StartAllyDash();
	void SetSwinging(bool Swinging_0);
	void SetSwingingMulti(bool Swinging_0);
	void SetSwingingServer(bool Swinging_0);
	void DamageEnemy(float Amount, class ABP_PieceChar_C* Enemy, const struct FVector& Location);
	void CreateAndExplodeDestructible();
	void DeathCleanup();
	void StopShooting(const struct FVector& Direction);
	void StartShooting(const struct FVector& Direction);
	void MoveChar(const struct FVector& Input_Vector);
	void SetSwingingAll(bool Swinging_0);
	void ShootOverEvent();
	void ShootDirection(const struct FVector& Direction);
	void ReceiveTick(float DeltaSeconds);
	void ReceiveBeginPlay();
	void InpActEvt_Five_K2Node_InputKeyEvent_0(const struct FKey& Key);
	void InpActEvt_Block_K2Node_InputActionEvent_0(const struct FKey& Key);
	void InpActEvt_Block_K2Node_InputActionEvent_1(const struct FKey& Key);
	void InpActEvt_Jump_K2Node_InputActionEvent_2(const struct FKey& Key);
	void InpActEvt_Jump_K2Node_InputActionEvent_3(const struct FKey& Key);
	void MainAbility();
	void MovementAbility();
	void Get_Launch_Vector(struct FVector* LaunchVector);
	void OnRep_Allies();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_BSidePawnChar_C">();
	}
	static class ABP_BSidePawnChar_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_BSidePawnChar_C>();
	}
};
static_assert(alignof(ABP_BSidePawnChar_C) == 0x000010, "Wrong alignment on ABP_BSidePawnChar_C");
static_assert(sizeof(ABP_BSidePawnChar_C) == 0x0007A0, "Wrong size on ABP_BSidePawnChar_C");
static_assert(offsetof(ABP_BSidePawnChar_C, UberGraphFrame_BP_BSidePawnChar_C) == 0x0006F0, "Member 'ABP_BSidePawnChar_C::UberGraphFrame_BP_BSidePawnChar_C' has a wrong offset!");
static_assert(offsetof(ABP_BSidePawnChar_C, HitBox) == 0x0006F8, "Member 'ABP_BSidePawnChar_C::HitBox' has a wrong offset!");
static_assert(offsetof(ABP_BSidePawnChar_C, Swinging) == 0x000700, "Member 'ABP_BSidePawnChar_C::Swinging' has a wrong offset!");
static_assert(offsetof(ABP_BSidePawnChar_C, CanHit) == 0x000701, "Member 'ABP_BSidePawnChar_C::CanHit' has a wrong offset!");
static_assert(offsetof(ABP_BSidePawnChar_C, AllyWalkSpeed) == 0x000704, "Member 'ABP_BSidePawnChar_C::AllyWalkSpeed' has a wrong offset!");
static_assert(offsetof(ABP_BSidePawnChar_C, AllyFiringSpeed) == 0x000708, "Member 'ABP_BSidePawnChar_C::AllyFiringSpeed' has a wrong offset!");
static_assert(offsetof(ABP_BSidePawnChar_C, AllyShootDamage) == 0x00070C, "Member 'ABP_BSidePawnChar_C::AllyShootDamage' has a wrong offset!");
static_assert(offsetof(ABP_BSidePawnChar_C, AllyMaxHealth) == 0x000710, "Member 'ABP_BSidePawnChar_C::AllyMaxHealth' has a wrong offset!");
static_assert(offsetof(ABP_BSidePawnChar_C, SprintSpeed) == 0x000714, "Member 'ABP_BSidePawnChar_C::SprintSpeed' has a wrong offset!");
static_assert(offsetof(ABP_BSidePawnChar_C, AllyMaxCount) == 0x000718, "Member 'ABP_BSidePawnChar_C::AllyMaxCount' has a wrong offset!");
static_assert(offsetof(ABP_BSidePawnChar_C, SpawningTimer) == 0x000720, "Member 'ABP_BSidePawnChar_C::SpawningTimer' has a wrong offset!");
static_assert(offsetof(ABP_BSidePawnChar_C, AllyDashTime) == 0x000728, "Member 'ABP_BSidePawnChar_C::AllyDashTime' has a wrong offset!");
static_assert(offsetof(ABP_BSidePawnChar_C, EnemyInvincible) == 0x00072C, "Member 'ABP_BSidePawnChar_C::EnemyInvincible' has a wrong offset!");
static_assert(offsetof(ABP_BSidePawnChar_C, SwingInvincibleTime) == 0x000730, "Member 'ABP_BSidePawnChar_C::SwingInvincibleTime' has a wrong offset!");
static_assert(offsetof(ABP_BSidePawnChar_C, Allies) == 0x000738, "Member 'ABP_BSidePawnChar_C::Allies' has a wrong offset!");
static_assert(offsetof(ABP_BSidePawnChar_C, SwordPushStrength) == 0x000748, "Member 'ABP_BSidePawnChar_C::SwordPushStrength' has a wrong offset!");
static_assert(offsetof(ABP_BSidePawnChar_C, MaxAllyWalkSpeed) == 0x00074C, "Member 'ABP_BSidePawnChar_C::MaxAllyWalkSpeed' has a wrong offset!");
static_assert(offsetof(ABP_BSidePawnChar_C, AllyJumpPower) == 0x000750, "Member 'ABP_BSidePawnChar_C::AllyJumpPower' has a wrong offset!");
static_assert(offsetof(ABP_BSidePawnChar_C, AllyJumpZPower) == 0x000754, "Member 'ABP_BSidePawnChar_C::AllyJumpZPower' has a wrong offset!");
static_assert(offsetof(ABP_BSidePawnChar_C, LaunchIndices) == 0x000758, "Member 'ABP_BSidePawnChar_C::LaunchIndices' has a wrong offset!");
static_assert(offsetof(ABP_BSidePawnChar_C, ThrowDamage) == 0x000768, "Member 'ABP_BSidePawnChar_C::ThrowDamage' has a wrong offset!");
static_assert(offsetof(ABP_BSidePawnChar_C, ThrowPower) == 0x00076C, "Member 'ABP_BSidePawnChar_C::ThrowPower' has a wrong offset!");
static_assert(offsetof(ABP_BSidePawnChar_C, LastInput) == 0x000770, "Member 'ABP_BSidePawnChar_C::LastInput' has a wrong offset!");
static_assert(offsetof(ABP_BSidePawnChar_C, InputTimestamp) == 0x00077C, "Member 'ABP_BSidePawnChar_C::InputTimestamp' has a wrong offset!");
static_assert(offsetof(ABP_BSidePawnChar_C, TempAllies) == 0x000780, "Member 'ABP_BSidePawnChar_C::TempAllies' has a wrong offset!");
static_assert(offsetof(ABP_BSidePawnChar_C, SwingHitList) == 0x000790, "Member 'ABP_BSidePawnChar_C::SwingHitList' has a wrong offset!");

}

