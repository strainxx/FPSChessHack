#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_BSidePawnChar

#include "Basic.hpp"

#include "BP_BSidePawnChar_classes.hpp"
#include "BP_BSidePawnChar_parameters.hpp"


namespace SDK
{

// Function BP_BSidePawnChar.BP_BSidePawnChar_C.ExecuteUbergraph_BP_BSidePawnChar
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_BSidePawnChar_C::ExecuteUbergraph_BP_BSidePawnChar(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BSidePawnChar_C", "ExecuteUbergraph_BP_BSidePawnChar");

	Params::BP_BSidePawnChar_C_ExecuteUbergraph_BP_BSidePawnChar Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BSidePawnChar.BP_BSidePawnChar_C.PlaybackThrowSword
// (BlueprintCallable, BlueprintEvent)

void ABP_BSidePawnChar_C::PlaybackThrowSword()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BSidePawnChar_C", "PlaybackThrowSword");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BSidePawnChar.BP_BSidePawnChar_C.UnswingPlayback
// (BlueprintCallable, BlueprintEvent)

void ABP_BSidePawnChar_C::UnswingPlayback()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BSidePawnChar_C", "UnswingPlayback");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BSidePawnChar.BP_BSidePawnChar_C.RecordUnswingServer
// (Net, NetServer, BlueprintCallable, BlueprintEvent)

void ABP_BSidePawnChar_C::RecordUnswingServer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BSidePawnChar_C", "RecordUnswingServer");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BSidePawnChar.BP_BSidePawnChar_C.RecordUnswingMulti
// (Net, NetMulticast, BlueprintCallable, BlueprintEvent)

void ABP_BSidePawnChar_C::RecordUnswingMulti()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BSidePawnChar_C", "RecordUnswingMulti");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BSidePawnChar.BP_BSidePawnChar_C.RecordUnswing
// (BlueprintCallable, BlueprintEvent)

void ABP_BSidePawnChar_C::RecordUnswing()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BSidePawnChar_C", "RecordUnswing");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BSidePawnChar.BP_BSidePawnChar_C.SwingPlayback
// (BlueprintCallable, BlueprintEvent)

void ABP_BSidePawnChar_C::SwingPlayback()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BSidePawnChar_C", "SwingPlayback");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BSidePawnChar.BP_BSidePawnChar_C.RecordSwingServer
// (Net, NetServer, BlueprintCallable, BlueprintEvent)

void ABP_BSidePawnChar_C::RecordSwingServer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BSidePawnChar_C", "RecordSwingServer");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BSidePawnChar.BP_BSidePawnChar_C.RecordSwingMulti
// (Net, NetMulticast, BlueprintCallable, BlueprintEvent)

void ABP_BSidePawnChar_C::RecordSwingMulti()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BSidePawnChar_C", "RecordSwingMulti");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BSidePawnChar.BP_BSidePawnChar_C.RecordSwing
// (BlueprintCallable, BlueprintEvent)

void ABP_BSidePawnChar_C::RecordSwing()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BSidePawnChar_C", "RecordSwing");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BSidePawnChar.BP_BSidePawnChar_C.DestroySelf
// (BlueprintCallable, BlueprintEvent)

void ABP_BSidePawnChar_C::DestroySelf()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BSidePawnChar_C", "DestroySelf");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BSidePawnChar.BP_BSidePawnChar_C.ReleaseBlockServer
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_PieceChar_C*                  Target                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)

void ABP_BSidePawnChar_C::ReleaseBlockServer(class ABP_PieceChar_C* Target)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BSidePawnChar_C", "ReleaseBlockServer");

	Params::BP_BSidePawnChar_C_ReleaseBlockServer Parms{};

	Parms.Target = Target;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BSidePawnChar.BP_BSidePawnChar_C.PressBlockServer
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_PieceChar_C*                  Target                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)

void ABP_BSidePawnChar_C::PressBlockServer(class ABP_PieceChar_C* Target)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BSidePawnChar_C", "PressBlockServer");

	Params::BP_BSidePawnChar_C_PressBlockServer Parms{};

	Parms.Target = Target;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BSidePawnChar.BP_BSidePawnChar_C.StopShootingServer
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_PieceChar_C*                  Target                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
// struct FVector                          Direction                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_BSidePawnChar_C::StopShootingServer(class ABP_PieceChar_C* Target, const struct FVector& Direction)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BSidePawnChar_C", "StopShootingServer");

	Params::BP_BSidePawnChar_C_StopShootingServer Parms{};

	Parms.Target = Target;
	Parms.Direction = std::move(Direction);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BSidePawnChar.BP_BSidePawnChar_C.StartShootingServer
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_PieceChar_C*                  Target                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
// struct FVector                          Direction                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_BSidePawnChar_C::StartShootingServer(class ABP_PieceChar_C* Target, const struct FVector& Direction)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BSidePawnChar_C", "StartShootingServer");

	Params::BP_BSidePawnChar_C_StartShootingServer Parms{};

	Parms.Target = Target;
	Parms.Direction = std::move(Direction);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BSidePawnChar.BP_BSidePawnChar_C.SetLastInput
// (Net, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          LastInput_0                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_BSidePawnChar_C::SetLastInput(const struct FVector& LastInput_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BSidePawnChar_C", "SetLastInput");

	Params::BP_BSidePawnChar_C_SetLastInput Parms{};

	Parms.LastInput_0 = std::move(LastInput_0);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BSidePawnChar.BP_BSidePawnChar_C.EndJumpServer
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_PieceChar_C*                  Target                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)

void ABP_BSidePawnChar_C::EndJumpServer(class ABP_PieceChar_C* Target)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BSidePawnChar_C", "EndJumpServer");

	Params::BP_BSidePawnChar_C_EndJumpServer Parms{};

	Parms.Target = Target;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BSidePawnChar.BP_BSidePawnChar_C.JumpServer
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_PieceChar_C*                  Target                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)

void ABP_BSidePawnChar_C::JumpServer(class ABP_PieceChar_C* Target)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BSidePawnChar_C", "JumpServer");

	Params::BP_BSidePawnChar_C_JumpServer Parms{};

	Parms.Target = Target;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BSidePawnChar.BP_BSidePawnChar_C.SetRotationServer
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_PieceChar_C*                  Target                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_BSidePawnChar_C::SetRotationServer(class ABP_PieceChar_C* Target)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BSidePawnChar_C", "SetRotationServer");

	Params::BP_BSidePawnChar_C_SetRotationServer Parms{};

	Parms.Target = Target;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BSidePawnChar.BP_BSidePawnChar_C.DestroyAllAllies
// (BlueprintCallable, BlueprintEvent)

void ABP_BSidePawnChar_C::DestroyAllAllies()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BSidePawnChar_C", "DestroyAllAllies");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BSidePawnChar.BP_BSidePawnChar_C.AllyJump
// (BlueprintCallable, BlueprintEvent)

void ABP_BSidePawnChar_C::AllyJump()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BSidePawnChar_C", "AllyJump");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BSidePawnChar.BP_BSidePawnChar_C.InpAxisEvt_Pitch_K2Node_InputAxisEvent_1
// (BlueprintEvent)
// Parameters:
// float                                   AxisValue                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_BSidePawnChar_C::InpAxisEvt_Pitch_K2Node_InputAxisEvent_1(float AxisValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BSidePawnChar_C", "InpAxisEvt_Pitch_K2Node_InputAxisEvent_1");

	Params::BP_BSidePawnChar_C_InpAxisEvt_Pitch_K2Node_InputAxisEvent_1 Parms{};

	Parms.AxisValue = AxisValue;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BSidePawnChar.BP_BSidePawnChar_C.InpAxisEvt_Yaw_K2Node_InputAxisEvent_0
// (BlueprintEvent)
// Parameters:
// float                                   AxisValue                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_BSidePawnChar_C::InpAxisEvt_Yaw_K2Node_InputAxisEvent_0(float AxisValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BSidePawnChar_C", "InpAxisEvt_Yaw_K2Node_InputAxisEvent_0");

	Params::BP_BSidePawnChar_C_InpAxisEvt_Yaw_K2Node_InputAxisEvent_0 Parms{};

	Parms.AxisValue = AxisValue;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BSidePawnChar.BP_BSidePawnChar_C.ThrowSword
// (BlueprintCallable, BlueprintEvent)

void ABP_BSidePawnChar_C::ThrowSword()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BSidePawnChar_C", "ThrowSword");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BSidePawnChar.BP_BSidePawnChar_C.ForceSwing
// (BlueprintCallable, BlueprintEvent)

void ABP_BSidePawnChar_C::ForceSwing()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BSidePawnChar_C", "ForceSwing");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BSidePawnChar.BP_BSidePawnChar_C.BndEvt__BP_KingChar_Hitbox_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature
// (HasOutParams, BlueprintEvent)
// Parameters:
// class UPrimitiveComponent*              OverlappedComponent                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           OtherActor                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UPrimitiveComponent*              OtherComp                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   OtherBodyIndex                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bFromSweep                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FHitResult                       SweepResult                                            (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)

void ABP_BSidePawnChar_C::BndEvt__BP_KingChar_Hitbox_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BSidePawnChar_C", "BndEvt__BP_KingChar_Hitbox_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature");

	Params::BP_BSidePawnChar_C_BndEvt__BP_KingChar_Hitbox_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature Parms{};

	Parms.OverlappedComponent = OverlappedComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.OtherBodyIndex = OtherBodyIndex;
	Parms.bFromSweep = bFromSweep;
	Parms.SweepResult = std::move(SweepResult);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BSidePawnChar.BP_BSidePawnChar_C.TurnOffInvincible
// (BlueprintCallable, BlueprintEvent)

void ABP_BSidePawnChar_C::TurnOffInvincible()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BSidePawnChar_C", "TurnOffInvincible");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BSidePawnChar.BP_BSidePawnChar_C.CheckForHits
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class UPrimitiveComponent*              Component                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           Actor                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_BSidePawnChar_C::CheckForHits(class UPrimitiveComponent* Component, class AActor* Actor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BSidePawnChar_C", "CheckForHits");

	Params::BP_BSidePawnChar_C_CheckForHits Parms{};

	Parms.Component = Component;
	Parms.Actor = Actor;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BSidePawnChar.BP_BSidePawnChar_C.EndAllyDash
// (BlueprintCallable, BlueprintEvent)

void ABP_BSidePawnChar_C::EndAllyDash()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BSidePawnChar_C", "EndAllyDash");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BSidePawnChar.BP_BSidePawnChar_C.SpawnAlly
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          LaunchVector                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_BSidePawnChar_C::SpawnAlly(const struct FVector& LaunchVector)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BSidePawnChar_C", "SpawnAlly");

	Params::BP_BSidePawnChar_C_SpawnAlly Parms{};

	Parms.LaunchVector = std::move(LaunchVector);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BSidePawnChar.BP_BSidePawnChar_C.StartAllyDash
// (BlueprintCallable, BlueprintEvent)

void ABP_BSidePawnChar_C::StartAllyDash()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BSidePawnChar_C", "StartAllyDash");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BSidePawnChar.BP_BSidePawnChar_C.SetSwinging
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Swinging_0                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_BSidePawnChar_C::SetSwinging(bool Swinging_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BSidePawnChar_C", "SetSwinging");

	Params::BP_BSidePawnChar_C_SetSwinging Parms{};

	Parms.Swinging_0 = Swinging_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BSidePawnChar.BP_BSidePawnChar_C.SetSwingingMulti
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Swinging_0                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_BSidePawnChar_C::SetSwingingMulti(bool Swinging_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BSidePawnChar_C", "SetSwingingMulti");

	Params::BP_BSidePawnChar_C_SetSwingingMulti Parms{};

	Parms.Swinging_0 = Swinging_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BSidePawnChar.BP_BSidePawnChar_C.SetSwingingServer
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Swinging_0                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_BSidePawnChar_C::SetSwingingServer(bool Swinging_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BSidePawnChar_C", "SetSwingingServer");

	Params::BP_BSidePawnChar_C_SetSwingingServer Parms{};

	Parms.Swinging_0 = Swinging_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BSidePawnChar.BP_BSidePawnChar_C.DamageEnemy
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Amount                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class ABP_PieceChar_C*                  Enemy                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Location                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_BSidePawnChar_C::DamageEnemy(float Amount, class ABP_PieceChar_C* Enemy, const struct FVector& Location)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BSidePawnChar_C", "DamageEnemy");

	Params::BP_BSidePawnChar_C_DamageEnemy Parms{};

	Parms.Amount = Amount;
	Parms.Enemy = Enemy;
	Parms.Location = std::move(Location);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BSidePawnChar.BP_BSidePawnChar_C.CreateAndExplodeDestructible
// (BlueprintCallable, BlueprintEvent)

void ABP_BSidePawnChar_C::CreateAndExplodeDestructible()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BSidePawnChar_C", "CreateAndExplodeDestructible");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BSidePawnChar.BP_BSidePawnChar_C.DeathCleanup
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_BSidePawnChar_C::DeathCleanup()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BSidePawnChar_C", "DeathCleanup");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BSidePawnChar.BP_BSidePawnChar_C.StopShooting
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          Direction                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_BSidePawnChar_C::StopShooting(const struct FVector& Direction)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BSidePawnChar_C", "StopShooting");

	Params::BP_BSidePawnChar_C_StopShooting Parms{};

	Parms.Direction = std::move(Direction);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BSidePawnChar.BP_BSidePawnChar_C.StartShooting
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          Direction                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_BSidePawnChar_C::StartShooting(const struct FVector& Direction)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BSidePawnChar_C", "StartShooting");

	Params::BP_BSidePawnChar_C_StartShooting Parms{};

	Parms.Direction = std::move(Direction);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BSidePawnChar.BP_BSidePawnChar_C.MoveChar
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          Input_Vector                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_BSidePawnChar_C::MoveChar(const struct FVector& Input_Vector)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BSidePawnChar_C", "MoveChar");

	Params::BP_BSidePawnChar_C_MoveChar Parms{};

	Parms.Input_Vector = std::move(Input_Vector);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BSidePawnChar.BP_BSidePawnChar_C.SetSwingingAll
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Swinging_0                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_BSidePawnChar_C::SetSwingingAll(bool Swinging_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BSidePawnChar_C", "SetSwingingAll");

	Params::BP_BSidePawnChar_C_SetSwingingAll Parms{};

	Parms.Swinging_0 = Swinging_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BSidePawnChar.BP_BSidePawnChar_C.ShootOverEvent
// (BlueprintCallable, BlueprintEvent)

void ABP_BSidePawnChar_C::ShootOverEvent()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BSidePawnChar_C", "ShootOverEvent");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BSidePawnChar.BP_BSidePawnChar_C.ShootDirection
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          Direction                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_BSidePawnChar_C::ShootDirection(const struct FVector& Direction)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BSidePawnChar_C", "ShootDirection");

	Params::BP_BSidePawnChar_C_ShootDirection Parms{};

	Parms.Direction = std::move(Direction);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BSidePawnChar.BP_BSidePawnChar_C.ReceiveTick
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_BSidePawnChar_C::ReceiveTick(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BSidePawnChar_C", "ReceiveTick");

	Params::BP_BSidePawnChar_C_ReceiveTick Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BSidePawnChar.BP_BSidePawnChar_C.ReceiveBeginPlay
// (Event, Protected, BlueprintEvent)

void ABP_BSidePawnChar_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BSidePawnChar_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BSidePawnChar.BP_BSidePawnChar_C.InpActEvt_Five_K2Node_InputKeyEvent_0
// (BlueprintEvent)
// Parameters:
// struct FKey                             Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ABP_BSidePawnChar_C::InpActEvt_Five_K2Node_InputKeyEvent_0(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BSidePawnChar_C", "InpActEvt_Five_K2Node_InputKeyEvent_0");

	Params::BP_BSidePawnChar_C_InpActEvt_Five_K2Node_InputKeyEvent_0 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BSidePawnChar.BP_BSidePawnChar_C.InpActEvt_Block_K2Node_InputActionEvent_0
// (BlueprintEvent)
// Parameters:
// struct FKey                             Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ABP_BSidePawnChar_C::InpActEvt_Block_K2Node_InputActionEvent_0(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BSidePawnChar_C", "InpActEvt_Block_K2Node_InputActionEvent_0");

	Params::BP_BSidePawnChar_C_InpActEvt_Block_K2Node_InputActionEvent_0 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BSidePawnChar.BP_BSidePawnChar_C.InpActEvt_Block_K2Node_InputActionEvent_1
// (BlueprintEvent)
// Parameters:
// struct FKey                             Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ABP_BSidePawnChar_C::InpActEvt_Block_K2Node_InputActionEvent_1(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BSidePawnChar_C", "InpActEvt_Block_K2Node_InputActionEvent_1");

	Params::BP_BSidePawnChar_C_InpActEvt_Block_K2Node_InputActionEvent_1 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BSidePawnChar.BP_BSidePawnChar_C.InpActEvt_Jump_K2Node_InputActionEvent_2
// (BlueprintEvent)
// Parameters:
// struct FKey                             Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ABP_BSidePawnChar_C::InpActEvt_Jump_K2Node_InputActionEvent_2(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BSidePawnChar_C", "InpActEvt_Jump_K2Node_InputActionEvent_2");

	Params::BP_BSidePawnChar_C_InpActEvt_Jump_K2Node_InputActionEvent_2 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BSidePawnChar.BP_BSidePawnChar_C.InpActEvt_Jump_K2Node_InputActionEvent_3
// (BlueprintEvent)
// Parameters:
// struct FKey                             Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ABP_BSidePawnChar_C::InpActEvt_Jump_K2Node_InputActionEvent_3(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BSidePawnChar_C", "InpActEvt_Jump_K2Node_InputActionEvent_3");

	Params::BP_BSidePawnChar_C_InpActEvt_Jump_K2Node_InputActionEvent_3 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BSidePawnChar.BP_BSidePawnChar_C.MainAbility
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_BSidePawnChar_C::MainAbility()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BSidePawnChar_C", "MainAbility");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BSidePawnChar.BP_BSidePawnChar_C.MovementAbility
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_BSidePawnChar_C::MovementAbility()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BSidePawnChar_C", "MovementAbility");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BSidePawnChar.BP_BSidePawnChar_C.Get Launch Vector
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FVector                          LaunchVector                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_BSidePawnChar_C::Get_Launch_Vector(struct FVector* LaunchVector)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BSidePawnChar_C", "Get Launch Vector");

	Params::BP_BSidePawnChar_C_Get_Launch_Vector Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (LaunchVector != nullptr)
		*LaunchVector = std::move(Parms.LaunchVector);
}


// Function BP_BSidePawnChar.BP_BSidePawnChar_C.OnRep_Allies
// (BlueprintCallable, BlueprintEvent)

void ABP_BSidePawnChar_C::OnRep_Allies()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BSidePawnChar_C", "OnRep_Allies");

	UObject::ProcessEvent(Func, nullptr);
}

}

