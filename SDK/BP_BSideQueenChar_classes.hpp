#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_BSideQueenChar

#include "Basic.hpp"

#include "BP_PieceChar_classes.hpp"
#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "WhipTypes_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_BSideQueenChar.BP_BSideQueenChar_C
// 0x0080 (0x0770 - 0x06F0)
class ABP_BSideQueenChar_C final : public ABP_PieceChar_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_BP_BSideQueenChar_C;                // 0x06F0(0x0008)(ZeroConstructor, Transient, DuplicateTransient, UObjectWrapper)
	class USceneComponent*                        HoldPoint;                                         // 0x06F8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 Whip1;                                             // 0x0700(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPhysicsHandleComponent*                PhysicsHandle;                                     // 0x0708(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 Whip;                                              // 0x0710(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class ABP_Piece_C*                            HeldPiece;                                         // 0x0718(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	float                                         PiecePullSpeed;                                    // 0x0720(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          PsychicGrab;                                       // 0x0724(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_725[0x3];                                      // 0x0725(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                GrapplePoint;                                      // 0x0728(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_734[0x4];                                      // 0x0734(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AWhipHitbox_C*                          WhipCollision;                                     // 0x0738(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    WhipTrackedComponent;                              // 0x0740(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EWhipTypes                                    CurrentWhipType;                                   // 0x0748(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Grappling;                                         // 0x0749(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_74A[0x2];                                      // 0x074A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         GrappleSpeed;                                      // 0x074C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         GrappleDistance;                                   // 0x0750(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         GrappledGravityScale;                              // 0x0754(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         GrappleSwingPower;                                 // 0x0758(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         GrappleBreakAngle;                                 // 0x075C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_PieceChar_C*                        HeldChar;                                          // 0x0760(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_BSideQueenChar(int32 EntryPoint);
	void PlaybackFireWhip(const struct FVector& InputPin);
	void EndGrappling();
	void StartGrapple();
	void PlayShootAnimationServer();
	void PlayShootAnimationMulti();
	void SetTargetServer(const struct FVector& NewLocation);
	void SetTargetMulti(const struct FVector& NewLocation);
	void GrabCharacter(class ABP_PieceChar_C* As_BP_Piece);
	void PlayShootAnimation();
	void SetTargetLocation(const struct FVector& NewLocation);
	void WhipStartTracking(const struct FVector& GrapplePoint_0);
	void HitBreak_Event(class UPrimitiveComponent* HitComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, const struct FVector& NormalImpulse, const struct FHitResult& Hit);
	void FireWhip();
	void ReleaseObjects();
	void WhipTrackObject(class UPrimitiveComponent* WhipTrackedComponent_0);
	void HitHitEvent(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void ThrowPiece();
	void GrabPieces(class ABP_Piece_C* As_BP_Piece);
	void ReceiveHit(class UPrimitiveComponent* MyComp, class AActor* Other, class UPrimitiveComponent* OtherComp, bool bSelfMoved, const struct FVector& HitLocation, const struct FVector& HitNormal, const struct FVector& NormalImpulse, const struct FHitResult& Hit);
	void ReceiveBeginPlay();
	void ReceiveTick(float DeltaSeconds);
	void ShootDirection(const struct FVector& Direction);
	void MainAbility();
	void MovementAbility();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_BSideQueenChar_C">();
	}
	static class ABP_BSideQueenChar_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_BSideQueenChar_C>();
	}
};
static_assert(alignof(ABP_BSideQueenChar_C) == 0x000010, "Wrong alignment on ABP_BSideQueenChar_C");
static_assert(sizeof(ABP_BSideQueenChar_C) == 0x000770, "Wrong size on ABP_BSideQueenChar_C");
static_assert(offsetof(ABP_BSideQueenChar_C, UberGraphFrame_BP_BSideQueenChar_C) == 0x0006F0, "Member 'ABP_BSideQueenChar_C::UberGraphFrame_BP_BSideQueenChar_C' has a wrong offset!");
static_assert(offsetof(ABP_BSideQueenChar_C, HoldPoint) == 0x0006F8, "Member 'ABP_BSideQueenChar_C::HoldPoint' has a wrong offset!");
static_assert(offsetof(ABP_BSideQueenChar_C, Whip1) == 0x000700, "Member 'ABP_BSideQueenChar_C::Whip1' has a wrong offset!");
static_assert(offsetof(ABP_BSideQueenChar_C, PhysicsHandle) == 0x000708, "Member 'ABP_BSideQueenChar_C::PhysicsHandle' has a wrong offset!");
static_assert(offsetof(ABP_BSideQueenChar_C, Whip) == 0x000710, "Member 'ABP_BSideQueenChar_C::Whip' has a wrong offset!");
static_assert(offsetof(ABP_BSideQueenChar_C, HeldPiece) == 0x000718, "Member 'ABP_BSideQueenChar_C::HeldPiece' has a wrong offset!");
static_assert(offsetof(ABP_BSideQueenChar_C, PiecePullSpeed) == 0x000720, "Member 'ABP_BSideQueenChar_C::PiecePullSpeed' has a wrong offset!");
static_assert(offsetof(ABP_BSideQueenChar_C, PsychicGrab) == 0x000724, "Member 'ABP_BSideQueenChar_C::PsychicGrab' has a wrong offset!");
static_assert(offsetof(ABP_BSideQueenChar_C, GrapplePoint) == 0x000728, "Member 'ABP_BSideQueenChar_C::GrapplePoint' has a wrong offset!");
static_assert(offsetof(ABP_BSideQueenChar_C, WhipCollision) == 0x000738, "Member 'ABP_BSideQueenChar_C::WhipCollision' has a wrong offset!");
static_assert(offsetof(ABP_BSideQueenChar_C, WhipTrackedComponent) == 0x000740, "Member 'ABP_BSideQueenChar_C::WhipTrackedComponent' has a wrong offset!");
static_assert(offsetof(ABP_BSideQueenChar_C, CurrentWhipType) == 0x000748, "Member 'ABP_BSideQueenChar_C::CurrentWhipType' has a wrong offset!");
static_assert(offsetof(ABP_BSideQueenChar_C, Grappling) == 0x000749, "Member 'ABP_BSideQueenChar_C::Grappling' has a wrong offset!");
static_assert(offsetof(ABP_BSideQueenChar_C, GrappleSpeed) == 0x00074C, "Member 'ABP_BSideQueenChar_C::GrappleSpeed' has a wrong offset!");
static_assert(offsetof(ABP_BSideQueenChar_C, GrappleDistance) == 0x000750, "Member 'ABP_BSideQueenChar_C::GrappleDistance' has a wrong offset!");
static_assert(offsetof(ABP_BSideQueenChar_C, GrappledGravityScale) == 0x000754, "Member 'ABP_BSideQueenChar_C::GrappledGravityScale' has a wrong offset!");
static_assert(offsetof(ABP_BSideQueenChar_C, GrappleSwingPower) == 0x000758, "Member 'ABP_BSideQueenChar_C::GrappleSwingPower' has a wrong offset!");
static_assert(offsetof(ABP_BSideQueenChar_C, GrappleBreakAngle) == 0x00075C, "Member 'ABP_BSideQueenChar_C::GrappleBreakAngle' has a wrong offset!");
static_assert(offsetof(ABP_BSideQueenChar_C, HeldChar) == 0x000760, "Member 'ABP_BSideQueenChar_C::HeldChar' has a wrong offset!");

}

