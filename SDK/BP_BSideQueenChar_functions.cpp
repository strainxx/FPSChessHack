#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_BSideQueenChar

#include "Basic.hpp"

#include "BP_BSideQueenChar_classes.hpp"
#include "BP_BSideQueenChar_parameters.hpp"


namespace SDK
{

// Function BP_BSideQueenChar.BP_BSideQueenChar_C.ExecuteUbergraph_BP_BSideQueenChar
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_BSideQueenChar_C::ExecuteUbergraph_BP_BSideQueenChar(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BSideQueenChar_C", "ExecuteUbergraph_BP_BSideQueenChar");

	Params::BP_BSideQueenChar_C_ExecuteUbergraph_BP_BSideQueenChar Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BSideQueenChar.BP_BSideQueenChar_C.PlaybackFireWhip
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          InputPin                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_BSideQueenChar_C::PlaybackFireWhip(const struct FVector& InputPin)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BSideQueenChar_C", "PlaybackFireWhip");

	Params::BP_BSideQueenChar_C_PlaybackFireWhip Parms{};

	Parms.InputPin = std::move(InputPin);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BSideQueenChar.BP_BSideQueenChar_C.EndGrappling
// (BlueprintCallable, BlueprintEvent)

void ABP_BSideQueenChar_C::EndGrappling()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BSideQueenChar_C", "EndGrappling");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BSideQueenChar.BP_BSideQueenChar_C.StartGrapple
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)

void ABP_BSideQueenChar_C::StartGrapple()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BSideQueenChar_C", "StartGrapple");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BSideQueenChar.BP_BSideQueenChar_C.PlayShootAnimationServer
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)

void ABP_BSideQueenChar_C::PlayShootAnimationServer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BSideQueenChar_C", "PlayShootAnimationServer");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BSideQueenChar.BP_BSideQueenChar_C.PlayShootAnimationMulti
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)

void ABP_BSideQueenChar_C::PlayShootAnimationMulti()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BSideQueenChar_C", "PlayShootAnimationMulti");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BSideQueenChar.BP_BSideQueenChar_C.SetTargetServer
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          NewLocation                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_BSideQueenChar_C::SetTargetServer(const struct FVector& NewLocation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BSideQueenChar_C", "SetTargetServer");

	Params::BP_BSideQueenChar_C_SetTargetServer Parms{};

	Parms.NewLocation = std::move(NewLocation);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BSideQueenChar.BP_BSideQueenChar_C.SetTargetMulti
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          NewLocation                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_BSideQueenChar_C::SetTargetMulti(const struct FVector& NewLocation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BSideQueenChar_C", "SetTargetMulti");

	Params::BP_BSideQueenChar_C_SetTargetMulti Parms{};

	Parms.NewLocation = std::move(NewLocation);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BSideQueenChar.BP_BSideQueenChar_C.GrabCharacter
// (Net, NetMulticast, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_PieceChar_C*                  As_BP_Piece                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)

void ABP_BSideQueenChar_C::GrabCharacter(class ABP_PieceChar_C* As_BP_Piece)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BSideQueenChar_C", "GrabCharacter");

	Params::BP_BSideQueenChar_C_GrabCharacter Parms{};

	Parms.As_BP_Piece = As_BP_Piece;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BSideQueenChar.BP_BSideQueenChar_C.PlayShootAnimation
// (BlueprintCallable, BlueprintEvent)

void ABP_BSideQueenChar_C::PlayShootAnimation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BSideQueenChar_C", "PlayShootAnimation");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BSideQueenChar.BP_BSideQueenChar_C.SetTargetLocation
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          NewLocation                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_BSideQueenChar_C::SetTargetLocation(const struct FVector& NewLocation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BSideQueenChar_C", "SetTargetLocation");

	Params::BP_BSideQueenChar_C_SetTargetLocation Parms{};

	Parms.NewLocation = std::move(NewLocation);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BSideQueenChar.BP_BSideQueenChar_C.WhipStartTracking
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          GrapplePoint_0                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_BSideQueenChar_C::WhipStartTracking(const struct FVector& GrapplePoint_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BSideQueenChar_C", "WhipStartTracking");

	Params::BP_BSideQueenChar_C_WhipStartTracking Parms{};

	Parms.GrapplePoint_0 = std::move(GrapplePoint_0);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BSideQueenChar.BP_BSideQueenChar_C.HitBreak_Event
// (HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UPrimitiveComponent*              HitComponent                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           OtherActor                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UPrimitiveComponent*              OtherComp                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          NormalImpulse                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FHitResult                       Hit                                                    (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)

void ABP_BSideQueenChar_C::HitBreak_Event(class UPrimitiveComponent* HitComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, const struct FVector& NormalImpulse, const struct FHitResult& Hit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BSideQueenChar_C", "HitBreak_Event");

	Params::BP_BSideQueenChar_C_HitBreak_Event Parms{};

	Parms.HitComponent = HitComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.NormalImpulse = std::move(NormalImpulse);
	Parms.Hit = std::move(Hit);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BSideQueenChar.BP_BSideQueenChar_C.FireWhip
// (BlueprintCallable, BlueprintEvent)

void ABP_BSideQueenChar_C::FireWhip()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BSideQueenChar_C", "FireWhip");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BSideQueenChar.BP_BSideQueenChar_C.ReleaseObjects
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)

void ABP_BSideQueenChar_C::ReleaseObjects()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BSideQueenChar_C", "ReleaseObjects");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BSideQueenChar.BP_BSideQueenChar_C.WhipTrackObject
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UPrimitiveComponent*              WhipTrackedComponent_0                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_BSideQueenChar_C::WhipTrackObject(class UPrimitiveComponent* WhipTrackedComponent_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BSideQueenChar_C", "WhipTrackObject");

	Params::BP_BSideQueenChar_C_WhipTrackObject Parms{};

	Parms.WhipTrackedComponent_0 = WhipTrackedComponent_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BSideQueenChar.BP_BSideQueenChar_C.HitHitEvent
// (HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UPrimitiveComponent*              OverlappedComponent                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           OtherActor                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UPrimitiveComponent*              OtherComp                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   OtherBodyIndex                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bFromSweep                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FHitResult                       SweepResult                                            (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)

void ABP_BSideQueenChar_C::HitHitEvent(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BSideQueenChar_C", "HitHitEvent");

	Params::BP_BSideQueenChar_C_HitHitEvent Parms{};

	Parms.OverlappedComponent = OverlappedComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.OtherBodyIndex = OtherBodyIndex;
	Parms.bFromSweep = bFromSweep;
	Parms.SweepResult = std::move(SweepResult);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BSideQueenChar.BP_BSideQueenChar_C.ThrowPiece
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)

void ABP_BSideQueenChar_C::ThrowPiece()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BSideQueenChar_C", "ThrowPiece");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BSideQueenChar.BP_BSideQueenChar_C.GrabPieces
// (Net, NetMulticast, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_Piece_C*                      As_BP_Piece                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)

void ABP_BSideQueenChar_C::GrabPieces(class ABP_Piece_C* As_BP_Piece)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BSideQueenChar_C", "GrabPieces");

	Params::BP_BSideQueenChar_C_GrabPieces Parms{};

	Parms.As_BP_Piece = As_BP_Piece;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BSideQueenChar.BP_BSideQueenChar_C.ReceiveHit
// (Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// class UPrimitiveComponent*              MyComp                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           Other                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UPrimitiveComponent*              OtherComp                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bSelfMoved                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FVector                          HitLocation                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          HitNormal                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          NormalImpulse                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FHitResult                       Hit                                                    (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)

void ABP_BSideQueenChar_C::ReceiveHit(class UPrimitiveComponent* MyComp, class AActor* Other, class UPrimitiveComponent* OtherComp, bool bSelfMoved, const struct FVector& HitLocation, const struct FVector& HitNormal, const struct FVector& NormalImpulse, const struct FHitResult& Hit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BSideQueenChar_C", "ReceiveHit");

	Params::BP_BSideQueenChar_C_ReceiveHit Parms{};

	Parms.MyComp = MyComp;
	Parms.Other = Other;
	Parms.OtherComp = OtherComp;
	Parms.bSelfMoved = bSelfMoved;
	Parms.HitLocation = std::move(HitLocation);
	Parms.HitNormal = std::move(HitNormal);
	Parms.NormalImpulse = std::move(NormalImpulse);
	Parms.Hit = std::move(Hit);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BSideQueenChar.BP_BSideQueenChar_C.ReceiveBeginPlay
// (Event, Protected, BlueprintEvent)

void ABP_BSideQueenChar_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BSideQueenChar_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BSideQueenChar.BP_BSideQueenChar_C.ReceiveTick
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_BSideQueenChar_C::ReceiveTick(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BSideQueenChar_C", "ReceiveTick");

	Params::BP_BSideQueenChar_C_ReceiveTick Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BSideQueenChar.BP_BSideQueenChar_C.ShootDirection
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          Direction                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_BSideQueenChar_C::ShootDirection(const struct FVector& Direction)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BSideQueenChar_C", "ShootDirection");

	Params::BP_BSideQueenChar_C_ShootDirection Parms{};

	Parms.Direction = std::move(Direction);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BSideQueenChar.BP_BSideQueenChar_C.MainAbility
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_BSideQueenChar_C::MainAbility()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BSideQueenChar_C", "MainAbility");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BSideQueenChar.BP_BSideQueenChar_C.MovementAbility
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_BSideQueenChar_C::MovementAbility()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BSideQueenChar_C", "MovementAbility");

	UObject::ProcessEvent(Func, nullptr);
}

}

