#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_BSideRookChar

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "BP_RookChar_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_BSideRookChar.BP_BSideRookChar_C
// 0x0080 (0x0850 - 0x07D0)
class ABP_BSideRookChar_C final : public ABP_RookChar_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_BP_BSideRookChar_C;                 // 0x07D0(0x0008)(ZeroConstructor, Transient, DuplicateTransient, UObjectWrapper)
	class USkeletalMeshComponent*                 CannonMesh;                                        // 0x07D8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 CannonMesh3P;                                      // 0x07E0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           ShootRepeater;                                     // 0x07E8(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	int32                                         BurstCount;                                        // 0x07F0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CurrentBurstCount;                                 // 0x07F4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          cannon;                                            // 0x07F8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7F9[0x3];                                      // 0x07F9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BuildTimer;                                        // 0x07FC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CachedRotation;                                    // 0x0800(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                         BuildTimestamp;                                    // 0x080C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LastGroundedTimestamp;                             // 0x0810(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Building;                                          // 0x0814(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          ClientClimbing;                                    // 0x0815(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_816[0x2];                                      // 0x0816(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                LastInputVector;                                   // 0x0818(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_824[0x4];                                      // 0x0824(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ABP_BSideWall_C*>                SpawnedWalls;                                      // 0x0828(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	int32                                         MaxWallCount;                                      // 0x0838(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BuildTime;                                         // 0x083C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         NumberCannonShots;                                 // 0x0840(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         currentShots;                                      // 0x0844(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_BSideRookChar(int32 EntryPoint);
	void ShootDirectionCannonServer();
	void ShootDirectionCannonMulti();
	void ShootDirectionCannon();
	void DestructibleDestroyed(class ABP_Destructible_C* Destructible);
	void CreateBSideWall(const struct FVector& Spawn_Transform_Location, const struct FRotator& Spawn_Transform_Rotation, bool Vertical);
	void SetClientClimbing(bool ClientClimbing_0, const struct FVector& LastInputVector_0);
	void DisableBuilding();
	void ToggleBuilding();
	void DisableCannon();
	void LaunchCannonball();
	void StartCannon();
	void ForceStopScope();
	void CustomEvent_0();
	void StartScoping();
	void ReceiveTick(float DeltaSeconds);
	void ShootDirection(const struct FVector& Direction);
	void MainAbility();
	void MovementAbility();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_BSideRookChar_C">();
	}
	static class ABP_BSideRookChar_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_BSideRookChar_C>();
	}
};
static_assert(alignof(ABP_BSideRookChar_C) == 0x000010, "Wrong alignment on ABP_BSideRookChar_C");
static_assert(sizeof(ABP_BSideRookChar_C) == 0x000850, "Wrong size on ABP_BSideRookChar_C");
static_assert(offsetof(ABP_BSideRookChar_C, UberGraphFrame_BP_BSideRookChar_C) == 0x0007D0, "Member 'ABP_BSideRookChar_C::UberGraphFrame_BP_BSideRookChar_C' has a wrong offset!");
static_assert(offsetof(ABP_BSideRookChar_C, CannonMesh) == 0x0007D8, "Member 'ABP_BSideRookChar_C::CannonMesh' has a wrong offset!");
static_assert(offsetof(ABP_BSideRookChar_C, CannonMesh3P) == 0x0007E0, "Member 'ABP_BSideRookChar_C::CannonMesh3P' has a wrong offset!");
static_assert(offsetof(ABP_BSideRookChar_C, ShootRepeater) == 0x0007E8, "Member 'ABP_BSideRookChar_C::ShootRepeater' has a wrong offset!");
static_assert(offsetof(ABP_BSideRookChar_C, BurstCount) == 0x0007F0, "Member 'ABP_BSideRookChar_C::BurstCount' has a wrong offset!");
static_assert(offsetof(ABP_BSideRookChar_C, CurrentBurstCount) == 0x0007F4, "Member 'ABP_BSideRookChar_C::CurrentBurstCount' has a wrong offset!");
static_assert(offsetof(ABP_BSideRookChar_C, cannon) == 0x0007F8, "Member 'ABP_BSideRookChar_C::cannon' has a wrong offset!");
static_assert(offsetof(ABP_BSideRookChar_C, BuildTimer) == 0x0007FC, "Member 'ABP_BSideRookChar_C::BuildTimer' has a wrong offset!");
static_assert(offsetof(ABP_BSideRookChar_C, CachedRotation) == 0x000800, "Member 'ABP_BSideRookChar_C::CachedRotation' has a wrong offset!");
static_assert(offsetof(ABP_BSideRookChar_C, BuildTimestamp) == 0x00080C, "Member 'ABP_BSideRookChar_C::BuildTimestamp' has a wrong offset!");
static_assert(offsetof(ABP_BSideRookChar_C, LastGroundedTimestamp) == 0x000810, "Member 'ABP_BSideRookChar_C::LastGroundedTimestamp' has a wrong offset!");
static_assert(offsetof(ABP_BSideRookChar_C, Building) == 0x000814, "Member 'ABP_BSideRookChar_C::Building' has a wrong offset!");
static_assert(offsetof(ABP_BSideRookChar_C, ClientClimbing) == 0x000815, "Member 'ABP_BSideRookChar_C::ClientClimbing' has a wrong offset!");
static_assert(offsetof(ABP_BSideRookChar_C, LastInputVector) == 0x000818, "Member 'ABP_BSideRookChar_C::LastInputVector' has a wrong offset!");
static_assert(offsetof(ABP_BSideRookChar_C, SpawnedWalls) == 0x000828, "Member 'ABP_BSideRookChar_C::SpawnedWalls' has a wrong offset!");
static_assert(offsetof(ABP_BSideRookChar_C, MaxWallCount) == 0x000838, "Member 'ABP_BSideRookChar_C::MaxWallCount' has a wrong offset!");
static_assert(offsetof(ABP_BSideRookChar_C, BuildTime) == 0x00083C, "Member 'ABP_BSideRookChar_C::BuildTime' has a wrong offset!");
static_assert(offsetof(ABP_BSideRookChar_C, NumberCannonShots) == 0x000840, "Member 'ABP_BSideRookChar_C::NumberCannonShots' has a wrong offset!");
static_assert(offsetof(ABP_BSideRookChar_C, currentShots) == 0x000844, "Member 'ABP_BSideRookChar_C::currentShots' has a wrong offset!");

}

