#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_BSideRookChar

#include "Basic.hpp"

#include "BP_BSideRookChar_classes.hpp"
#include "BP_BSideRookChar_parameters.hpp"


namespace SDK
{

// Function BP_BSideRookChar.BP_BSideRookChar_C.ExecuteUbergraph_BP_BSideRookChar
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_BSideRookChar_C::ExecuteUbergraph_BP_BSideRookChar(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BSideRookChar_C", "ExecuteUbergraph_BP_BSideRookChar");

	Params::BP_BSideRookChar_C_ExecuteUbergraph_BP_BSideRookChar Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BSideRookChar.BP_BSideRookChar_C.ShootDirectionCannonServer
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)

void ABP_BSideRookChar_C::ShootDirectionCannonServer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BSideRookChar_C", "ShootDirectionCannonServer");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BSideRookChar.BP_BSideRookChar_C.ShootDirectionCannonMulti
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)

void ABP_BSideRookChar_C::ShootDirectionCannonMulti()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BSideRookChar_C", "ShootDirectionCannonMulti");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BSideRookChar.BP_BSideRookChar_C.ShootDirectionCannon
// (BlueprintCallable, BlueprintEvent)

void ABP_BSideRookChar_C::ShootDirectionCannon()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BSideRookChar_C", "ShootDirectionCannon");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BSideRookChar.BP_BSideRookChar_C.DestructibleDestroyed
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_Destructible_C*               Destructible                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_BSideRookChar_C::DestructibleDestroyed(class ABP_Destructible_C* Destructible)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BSideRookChar_C", "DestructibleDestroyed");

	Params::BP_BSideRookChar_C_DestructibleDestroyed Parms{};

	Parms.Destructible = Destructible;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BSideRookChar.BP_BSideRookChar_C.CreateBSideWall
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          Spawn_Transform_Location                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FRotator                         Spawn_Transform_Rotation                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    Vertical                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_BSideRookChar_C::CreateBSideWall(const struct FVector& Spawn_Transform_Location, const struct FRotator& Spawn_Transform_Rotation, bool Vertical)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BSideRookChar_C", "CreateBSideWall");

	Params::BP_BSideRookChar_C_CreateBSideWall Parms{};

	Parms.Spawn_Transform_Location = std::move(Spawn_Transform_Location);
	Parms.Spawn_Transform_Rotation = std::move(Spawn_Transform_Rotation);
	Parms.Vertical = Vertical;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BSideRookChar.BP_BSideRookChar_C.SetClientClimbing
// (Net, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    ClientClimbing_0                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FVector                          LastInputVector_0                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_BSideRookChar_C::SetClientClimbing(bool ClientClimbing_0, const struct FVector& LastInputVector_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BSideRookChar_C", "SetClientClimbing");

	Params::BP_BSideRookChar_C_SetClientClimbing Parms{};

	Parms.ClientClimbing_0 = ClientClimbing_0;
	Parms.LastInputVector_0 = std::move(LastInputVector_0);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BSideRookChar.BP_BSideRookChar_C.DisableBuilding
// (BlueprintCallable, BlueprintEvent)

void ABP_BSideRookChar_C::DisableBuilding()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BSideRookChar_C", "DisableBuilding");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BSideRookChar.BP_BSideRookChar_C.ToggleBuilding
// (BlueprintCallable, BlueprintEvent)

void ABP_BSideRookChar_C::ToggleBuilding()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BSideRookChar_C", "ToggleBuilding");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BSideRookChar.BP_BSideRookChar_C.DisableCannon
// (BlueprintCallable, BlueprintEvent)

void ABP_BSideRookChar_C::DisableCannon()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BSideRookChar_C", "DisableCannon");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BSideRookChar.BP_BSideRookChar_C.LaunchCannonball
// (BlueprintCallable, BlueprintEvent)

void ABP_BSideRookChar_C::LaunchCannonball()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BSideRookChar_C", "LaunchCannonball");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BSideRookChar.BP_BSideRookChar_C.StartCannon
// (BlueprintCallable, BlueprintEvent)

void ABP_BSideRookChar_C::StartCannon()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BSideRookChar_C", "StartCannon");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BSideRookChar.BP_BSideRookChar_C.ForceStopScope
// (BlueprintCallable, BlueprintEvent)

void ABP_BSideRookChar_C::ForceStopScope()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BSideRookChar_C", "ForceStopScope");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BSideRookChar.BP_BSideRookChar_C.CustomEvent_0
// (BlueprintCallable, BlueprintEvent)

void ABP_BSideRookChar_C::CustomEvent_0()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BSideRookChar_C", "CustomEvent_0");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BSideRookChar.BP_BSideRookChar_C.StartScoping
// (BlueprintCallable, BlueprintEvent)

void ABP_BSideRookChar_C::StartScoping()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BSideRookChar_C", "StartScoping");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BSideRookChar.BP_BSideRookChar_C.ReceiveTick
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_BSideRookChar_C::ReceiveTick(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BSideRookChar_C", "ReceiveTick");

	Params::BP_BSideRookChar_C_ReceiveTick Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BSideRookChar.BP_BSideRookChar_C.ShootDirection
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          Direction                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_BSideRookChar_C::ShootDirection(const struct FVector& Direction)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BSideRookChar_C", "ShootDirection");

	Params::BP_BSideRookChar_C_ShootDirection Parms{};

	Parms.Direction = std::move(Direction);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BSideRookChar.BP_BSideRookChar_C.MainAbility
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_BSideRookChar_C::MainAbility()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BSideRookChar_C", "MainAbility");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BSideRookChar.BP_BSideRookChar_C.MovementAbility
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_BSideRookChar_C::MovementAbility()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BSideRookChar_C", "MovementAbility");

	UObject::ProcessEvent(Func, nullptr);
}

}

