#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_BishopChar

#include "Basic.hpp"

#include "BP_PieceChar_classes.hpp"
#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_BishopChar.BP_BishopChar_C
// 0x0090 (0x0780 - 0x06F0)
class ABP_BishopChar_C : public ABP_PieceChar_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_BP_BishopChar_C;                    // 0x06F0(0x0008)(ZeroConstructor, Transient, DuplicateTransient, UObjectWrapper)
	class UCameraComponent*                       GlideCamera;                                       // 0x06F8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	class UNiagaraComponent*                      Trail2;                                            // 0x0700(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	class UNiagaraComponent*                      Trail;                                             // 0x0708(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Wing2;                                             // 0x0710(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Wing;                                              // 0x0718(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Grenade;                                           // 0x0720(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	float                                         Shotgun_Spread;                                    // 0x0728(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Shotgun_Count;                                     // 0x072C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         GrenadeExplosionStrength;                          // 0x0730(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         GrenadeLaunchStrength;                             // 0x0734(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         GrenadeUpDirection;                                // 0x0738(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          GrenadeActive;                                     // 0x073C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          Gliding;                                           // 0x073D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_73E[0x2];                                      // 0x073E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         GlideDamping;                                      // 0x0740(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         GlideAccelForce;                                   // 0x0744(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         StopVelocity;                                      // 0x0748(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AccelDecayRate;                                    // 0x074C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Direction;                                         // 0x0750(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         currentAccelForce;                                 // 0x075C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         WingFlapTimer;                                     // 0x0760(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                DefaultCameraPosition;                             // 0x0764(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                GlideCameraOffset;                                 // 0x0770(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_BishopChar(int32 EntryPoint);
	void ImpulseGrenade(class UStaticMeshComponent* Grenade_0, const struct FVector& Force);
	void UpdateGlideState(const struct FRotator& NewRotation, const struct FVector& Velocity, float WingFlapTimer_0, float currentAccelForce_0);
	void UpdateGlideStateMulti(const struct FRotator& NewRotation, const struct FVector& Velocity, float WingFlapTimer_0, float currentAccelForce_0);
	void UpdateGlideStateServer(const struct FRotator& NewRotation, const struct FVector& Velocity, float WingFlapTimer_0, float currentAccelForce_0);
	void UpdateGlideStateAll(const struct FRotator& NewRotation, const struct FVector& Velocity, float WingFlapTimer_0, float currentAccelForce_0);
	void EndGlideAll();
	void EndGlideServer();
	void EndGlideMulti();
	void EndGlidePlayback();
	void GlidePlayback();
	void ThrowGrenade(const struct FVector& Direction_0);
	void GlideHit(class AActor* SelfActor, class AActor* OtherActor, const struct FVector& NormalImpulse, const struct FHitResult& Hit);
	void EquipWeapon(bool Grenade_0);
	void TurnBlack(class UMeshComponent* Mesh_0);
	void EndGlide();
	void StartGlide();
	void GlideRecordReminder();
	void ReceiveBeginPlay();
	void ReceiveTick(float DeltaSeconds);
	void ShootDirection(const struct FVector& Direction_0);
	void MainAbility();
	void MovementAbility();
	void GetDefaultCamera(class UCameraComponent** Default_Camera);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_BishopChar_C">();
	}
	static class ABP_BishopChar_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_BishopChar_C>();
	}
};
static_assert(alignof(ABP_BishopChar_C) == 0x000010, "Wrong alignment on ABP_BishopChar_C");
static_assert(sizeof(ABP_BishopChar_C) == 0x000780, "Wrong size on ABP_BishopChar_C");
static_assert(offsetof(ABP_BishopChar_C, UberGraphFrame_BP_BishopChar_C) == 0x0006F0, "Member 'ABP_BishopChar_C::UberGraphFrame_BP_BishopChar_C' has a wrong offset!");
static_assert(offsetof(ABP_BishopChar_C, GlideCamera) == 0x0006F8, "Member 'ABP_BishopChar_C::GlideCamera' has a wrong offset!");
static_assert(offsetof(ABP_BishopChar_C, Trail2) == 0x000700, "Member 'ABP_BishopChar_C::Trail2' has a wrong offset!");
static_assert(offsetof(ABP_BishopChar_C, Trail) == 0x000708, "Member 'ABP_BishopChar_C::Trail' has a wrong offset!");
static_assert(offsetof(ABP_BishopChar_C, Wing2) == 0x000710, "Member 'ABP_BishopChar_C::Wing2' has a wrong offset!");
static_assert(offsetof(ABP_BishopChar_C, Wing) == 0x000718, "Member 'ABP_BishopChar_C::Wing' has a wrong offset!");
static_assert(offsetof(ABP_BishopChar_C, Grenade) == 0x000720, "Member 'ABP_BishopChar_C::Grenade' has a wrong offset!");
static_assert(offsetof(ABP_BishopChar_C, Shotgun_Spread) == 0x000728, "Member 'ABP_BishopChar_C::Shotgun_Spread' has a wrong offset!");
static_assert(offsetof(ABP_BishopChar_C, Shotgun_Count) == 0x00072C, "Member 'ABP_BishopChar_C::Shotgun_Count' has a wrong offset!");
static_assert(offsetof(ABP_BishopChar_C, GrenadeExplosionStrength) == 0x000730, "Member 'ABP_BishopChar_C::GrenadeExplosionStrength' has a wrong offset!");
static_assert(offsetof(ABP_BishopChar_C, GrenadeLaunchStrength) == 0x000734, "Member 'ABP_BishopChar_C::GrenadeLaunchStrength' has a wrong offset!");
static_assert(offsetof(ABP_BishopChar_C, GrenadeUpDirection) == 0x000738, "Member 'ABP_BishopChar_C::GrenadeUpDirection' has a wrong offset!");
static_assert(offsetof(ABP_BishopChar_C, GrenadeActive) == 0x00073C, "Member 'ABP_BishopChar_C::GrenadeActive' has a wrong offset!");
static_assert(offsetof(ABP_BishopChar_C, Gliding) == 0x00073D, "Member 'ABP_BishopChar_C::Gliding' has a wrong offset!");
static_assert(offsetof(ABP_BishopChar_C, GlideDamping) == 0x000740, "Member 'ABP_BishopChar_C::GlideDamping' has a wrong offset!");
static_assert(offsetof(ABP_BishopChar_C, GlideAccelForce) == 0x000744, "Member 'ABP_BishopChar_C::GlideAccelForce' has a wrong offset!");
static_assert(offsetof(ABP_BishopChar_C, StopVelocity) == 0x000748, "Member 'ABP_BishopChar_C::StopVelocity' has a wrong offset!");
static_assert(offsetof(ABP_BishopChar_C, AccelDecayRate) == 0x00074C, "Member 'ABP_BishopChar_C::AccelDecayRate' has a wrong offset!");
static_assert(offsetof(ABP_BishopChar_C, Direction) == 0x000750, "Member 'ABP_BishopChar_C::Direction' has a wrong offset!");
static_assert(offsetof(ABP_BishopChar_C, currentAccelForce) == 0x00075C, "Member 'ABP_BishopChar_C::currentAccelForce' has a wrong offset!");
static_assert(offsetof(ABP_BishopChar_C, WingFlapTimer) == 0x000760, "Member 'ABP_BishopChar_C::WingFlapTimer' has a wrong offset!");
static_assert(offsetof(ABP_BishopChar_C, DefaultCameraPosition) == 0x000764, "Member 'ABP_BishopChar_C::DefaultCameraPosition' has a wrong offset!");
static_assert(offsetof(ABP_BishopChar_C, GlideCameraOffset) == 0x000770, "Member 'ABP_BishopChar_C::GlideCameraOffset' has a wrong offset!");

}

