#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_BishopChar

#include "Basic.hpp"

#include "BP_BishopChar_classes.hpp"
#include "BP_BishopChar_parameters.hpp"


namespace SDK
{

// Function BP_BishopChar.BP_BishopChar_C.ExecuteUbergraph_BP_BishopChar
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_BishopChar_C::ExecuteUbergraph_BP_BishopChar(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BishopChar_C", "ExecuteUbergraph_BP_BishopChar");

	Params::BP_BishopChar_C_ExecuteUbergraph_BP_BishopChar Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BishopChar.BP_BishopChar_C.ImpulseGrenade
// (Net, NetMulticast, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UStaticMeshComponent*             Grenade_0                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Force                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_BishopChar_C::ImpulseGrenade(class UStaticMeshComponent* Grenade_0, const struct FVector& Force)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BishopChar_C", "ImpulseGrenade");

	Params::BP_BishopChar_C_ImpulseGrenade Parms{};

	Parms.Grenade_0 = Grenade_0;
	Parms.Force = std::move(Force);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BishopChar.BP_BishopChar_C.UpdateGlideState
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FRotator                         NewRotation                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FVector                          Velocity                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   WingFlapTimer_0                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   currentAccelForce_0                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_BishopChar_C::UpdateGlideState(const struct FRotator& NewRotation, const struct FVector& Velocity, float WingFlapTimer_0, float currentAccelForce_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BishopChar_C", "UpdateGlideState");

	Params::BP_BishopChar_C_UpdateGlideState Parms{};

	Parms.NewRotation = std::move(NewRotation);
	Parms.Velocity = std::move(Velocity);
	Parms.WingFlapTimer_0 = WingFlapTimer_0;
	Parms.currentAccelForce_0 = currentAccelForce_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BishopChar.BP_BishopChar_C.UpdateGlideStateMulti
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FRotator                         NewRotation                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FVector                          Velocity                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   WingFlapTimer_0                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   currentAccelForce_0                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_BishopChar_C::UpdateGlideStateMulti(const struct FRotator& NewRotation, const struct FVector& Velocity, float WingFlapTimer_0, float currentAccelForce_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BishopChar_C", "UpdateGlideStateMulti");

	Params::BP_BishopChar_C_UpdateGlideStateMulti Parms{};

	Parms.NewRotation = std::move(NewRotation);
	Parms.Velocity = std::move(Velocity);
	Parms.WingFlapTimer_0 = WingFlapTimer_0;
	Parms.currentAccelForce_0 = currentAccelForce_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BishopChar.BP_BishopChar_C.UpdateGlideStateServer
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FRotator                         NewRotation                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FVector                          Velocity                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   WingFlapTimer_0                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   currentAccelForce_0                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_BishopChar_C::UpdateGlideStateServer(const struct FRotator& NewRotation, const struct FVector& Velocity, float WingFlapTimer_0, float currentAccelForce_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BishopChar_C", "UpdateGlideStateServer");

	Params::BP_BishopChar_C_UpdateGlideStateServer Parms{};

	Parms.NewRotation = std::move(NewRotation);
	Parms.Velocity = std::move(Velocity);
	Parms.WingFlapTimer_0 = WingFlapTimer_0;
	Parms.currentAccelForce_0 = currentAccelForce_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BishopChar.BP_BishopChar_C.UpdateGlideStateAll
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FRotator                         NewRotation                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FVector                          Velocity                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   WingFlapTimer_0                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   currentAccelForce_0                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_BishopChar_C::UpdateGlideStateAll(const struct FRotator& NewRotation, const struct FVector& Velocity, float WingFlapTimer_0, float currentAccelForce_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BishopChar_C", "UpdateGlideStateAll");

	Params::BP_BishopChar_C_UpdateGlideStateAll Parms{};

	Parms.NewRotation = std::move(NewRotation);
	Parms.Velocity = std::move(Velocity);
	Parms.WingFlapTimer_0 = WingFlapTimer_0;
	Parms.currentAccelForce_0 = currentAccelForce_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BishopChar.BP_BishopChar_C.EndGlideAll
// (BlueprintCallable, BlueprintEvent)

void ABP_BishopChar_C::EndGlideAll()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BishopChar_C", "EndGlideAll");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BishopChar.BP_BishopChar_C.EndGlideServer
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)

void ABP_BishopChar_C::EndGlideServer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BishopChar_C", "EndGlideServer");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BishopChar.BP_BishopChar_C.EndGlideMulti
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)

void ABP_BishopChar_C::EndGlideMulti()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BishopChar_C", "EndGlideMulti");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BishopChar.BP_BishopChar_C.EndGlidePlayback
// (BlueprintCallable, BlueprintEvent)

void ABP_BishopChar_C::EndGlidePlayback()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BishopChar_C", "EndGlidePlayback");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BishopChar.BP_BishopChar_C.GlidePlayback
// (BlueprintCallable, BlueprintEvent)

void ABP_BishopChar_C::GlidePlayback()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BishopChar_C", "GlidePlayback");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BishopChar.BP_BishopChar_C.ThrowGrenade
// (Net, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          Direction_0                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_BishopChar_C::ThrowGrenade(const struct FVector& Direction_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BishopChar_C", "ThrowGrenade");

	Params::BP_BishopChar_C_ThrowGrenade Parms{};

	Parms.Direction_0 = std::move(Direction_0);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BishopChar.BP_BishopChar_C.GlideHit
// (HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           SelfActor                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           OtherActor                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          NormalImpulse                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FHitResult                       Hit                                                    (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)

void ABP_BishopChar_C::GlideHit(class AActor* SelfActor, class AActor* OtherActor, const struct FVector& NormalImpulse, const struct FHitResult& Hit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BishopChar_C", "GlideHit");

	Params::BP_BishopChar_C_GlideHit Parms{};

	Parms.SelfActor = SelfActor;
	Parms.OtherActor = OtherActor;
	Parms.NormalImpulse = std::move(NormalImpulse);
	Parms.Hit = std::move(Hit);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BishopChar.BP_BishopChar_C.EquipWeapon
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Grenade_0                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_BishopChar_C::EquipWeapon(bool Grenade_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BishopChar_C", "EquipWeapon");

	Params::BP_BishopChar_C_EquipWeapon Parms{};

	Parms.Grenade_0 = Grenade_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BishopChar.BP_BishopChar_C.TurnBlack
// (Net, NetMulticast, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UMeshComponent*                   Mesh_0                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_BishopChar_C::TurnBlack(class UMeshComponent* Mesh_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BishopChar_C", "TurnBlack");

	Params::BP_BishopChar_C_TurnBlack Parms{};

	Parms.Mesh_0 = Mesh_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BishopChar.BP_BishopChar_C.EndGlide
// (BlueprintCallable, BlueprintEvent)

void ABP_BishopChar_C::EndGlide()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BishopChar_C", "EndGlide");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BishopChar.BP_BishopChar_C.StartGlide
// (BlueprintCallable, BlueprintEvent)

void ABP_BishopChar_C::StartGlide()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BishopChar_C", "StartGlide");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BishopChar.BP_BishopChar_C.GlideRecordReminder
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_BishopChar_C::GlideRecordReminder()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BishopChar_C", "GlideRecordReminder");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BishopChar.BP_BishopChar_C.ReceiveBeginPlay
// (Event, Protected, BlueprintEvent)

void ABP_BishopChar_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BishopChar_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BishopChar.BP_BishopChar_C.ReceiveTick
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_BishopChar_C::ReceiveTick(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BishopChar_C", "ReceiveTick");

	Params::BP_BishopChar_C_ReceiveTick Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BishopChar.BP_BishopChar_C.ShootDirection
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          Direction_0                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_BishopChar_C::ShootDirection(const struct FVector& Direction_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BishopChar_C", "ShootDirection");

	Params::BP_BishopChar_C_ShootDirection Parms{};

	Parms.Direction_0 = std::move(Direction_0);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BishopChar.BP_BishopChar_C.MainAbility
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_BishopChar_C::MainAbility()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BishopChar_C", "MainAbility");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BishopChar.BP_BishopChar_C.MovementAbility
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_BishopChar_C::MovementAbility()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BishopChar_C", "MovementAbility");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BishopChar.BP_BishopChar_C.GetDefaultCamera
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UCameraComponent*                 Default_Camera                                         (Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_BishopChar_C::GetDefaultCamera(class UCameraComponent** Default_Camera)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BishopChar_C", "GetDefaultCamera");

	Params::BP_BishopChar_C_GetDefaultCamera Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Default_Camera != nullptr)
		*Default_Camera = Parms.Default_Camera;
}

}

