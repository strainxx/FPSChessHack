#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_BishopChar

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function BP_BishopChar.BP_BishopChar_C.ExecuteUbergraph_BP_BishopChar
// 0x04F0 (0x04F0 - 0x0000)
struct BP_BishopChar_C_ExecuteUbergraph_BP_BishopChar final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AController*                            CallFunc_GetController_ReturnValue;                // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AController*                            CallFunc_GetController_ReturnValue_1;              // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetForwardVector_ReturnValue;             // 0x0024(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMeshComponent*                         K2Node_CustomEvent_Mesh;                           // 0x0030(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue;                  // 0x0038(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_VSize_ReturnValue;                        // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetForwardVector_ReturnValue_1;           // 0x0048(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsFalling_ReturnValue;                    // 0x0054(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_55[0x3];                                       // 0x0055(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetWorldDeltaSeconds_ReturnValue;         // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_CustomEvent_Grenade_1;                      // 0x005C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5D[0x3];                                       // 0x005D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue;      // 0x0060(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6C[0x4];                                       // 0x006C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_MakeTransform_ReturnValue;                // 0x0070(0x0030)(IsPlainOldData, NoDestructor)
	class AActor*                                 CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue; // 0x00A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x00A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_A9[0x7];                                       // 0x00A9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_HolyGrenade_C*                      CallFunc_FinishSpawningActor_ReturnValue;          // 0x00B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_CustomEvent_SelfActor;                      // 0x00B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_CustomEvent_OtherActor;                     // 0x00C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_CustomEvent_NormalImpulse;                  // 0x00C8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             K2Node_CustomEvent_Hit;                            // 0x00D4(0x008C)(ConstParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	struct FVector                                K2Node_CustomEvent_direction;                      // 0x0160(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_RandomUnitVector_ReturnValue;             // 0x016C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_RandomFloatInRange_ReturnValue;           // 0x0178(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasAuthority_ReturnValue;                 // 0x017C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_17D[0x3];                                      // 0x017D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x0180(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_18C[0x4];                                      // 0x018C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           CallFunc_K2_SetTimer_ReturnValue;                  // 0x0190(0x0008)(NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_K2_SetRelativeRotation_SweepHitResult;    // 0x0198(0x008C)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	struct FHitResult                             CallFunc_K2_SetRelativeRotation_SweepHitResult_1;  // 0x0224(0x008C)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x02B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasAuthority_ReturnValue_1;               // 0x02B1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2B2[0x2];                                      // 0x02B2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                K2Node_Event_Direction;                            // 0x02B4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x02C0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasAuthority_ReturnValue_2;               // 0x02CC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2CD[0x3];                                      // 0x02CD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               K2Node_CustomEvent_NewRotation_3;                  // 0x02D0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                K2Node_CustomEvent_Velocity_3;                     // 0x02DC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_CustomEvent_WingFlapTimer_3;                // 0x02E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_CustomEvent_currentAccelForce_3;            // 0x02EC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_K2_SetWorldRotation_SweepHitResult;       // 0x02F0(0x008C)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	struct FRotator                               K2Node_CustomEvent_NewRotation_2;                  // 0x037C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                K2Node_CustomEvent_Velocity_2;                     // 0x0388(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_CustomEvent_WingFlapTimer_2;                // 0x0394(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_CustomEvent_currentAccelForce_2;            // 0x0398(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               K2Node_CustomEvent_NewRotation_1;                  // 0x039C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                K2Node_CustomEvent_Velocity_1;                     // 0x03A8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_CustomEvent_WingFlapTimer_1;                // 0x03B4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_CustomEvent_currentAccelForce_1;            // 0x03B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               K2Node_CustomEvent_NewRotation;                    // 0x03BC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                K2Node_CustomEvent_Velocity;                       // 0x03C8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_CustomEvent_WingFlapTimer;                  // 0x03D4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_CustomEvent_currentAccelForce;              // 0x03D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_DeltaSeconds;                         // 0x03DC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(class AActor* SelfActor, class AActor* OtherActor, const struct FVector& NormalImpulse, struct FHitResult& Hit)> K2Node_CreateDelegate_OutputDelegate;              // 0x03E0(0x0010)(ZeroConstructor, NoDestructor)
	float                                         CallFunc_GetWorldDeltaSeconds_ReturnValue_1;       // 0x03F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x03F4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x03F8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3FC[0x4];                                      // 0x03FC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UStaticMeshComponent*                   K2Node_CustomEvent_Grenade;                        // 0x0400(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_CustomEvent_Force;                          // 0x0408(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue_1;       // 0x0414(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_K2_GetComponentRotation_ReturnValue;      // 0x0420(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakVector_X;                            // 0x042C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y;                            // 0x0430(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z;                            // 0x0434(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Conv_RotatorToVector_ReturnValue;         // 0x0438(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x0444(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Normal_ReturnValue;                       // 0x0448(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x0454(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_Conv_VectorToRotator_ReturnValue;         // 0x0460(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               CallFunc_ComposeRotators_ReturnValue;              // 0x046C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakVector_X_1;                          // 0x0478(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y_1;                          // 0x047C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z_1;                          // 0x0480(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Dot_VectorVector_ReturnValue;             // 0x0484(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SignOfFloat_ReturnValue;                  // 0x0488(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_DegAcos_ReturnValue;                      // 0x048C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_1;        // 0x0490(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_2;        // 0x0494(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue_1;             // 0x0498(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FClamp_ReturnValue;                       // 0x049C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable;                                 // 0x04A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_3;        // 0x04A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue_1;        // 0x04A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x04AC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4AD[0x3];                                      // 0x04AD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x04B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x04B4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4B5[0x3];                                      // 0x04B5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_4;        // 0x04B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_5;        // 0x04BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetWorldDeltaSeconds_ReturnValue_2;       // 0x04C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_6;        // 0x04C4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue_2;             // 0x04C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue_2;       // 0x04CC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x04D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue;              // 0x04DC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4DD[0x3];                                      // 0x04DD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_7;        // 0x04E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue_3;             // 0x04E4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_BishopChar_C_ExecuteUbergraph_BP_BishopChar) == 0x000010, "Wrong alignment on BP_BishopChar_C_ExecuteUbergraph_BP_BishopChar");
static_assert(sizeof(BP_BishopChar_C_ExecuteUbergraph_BP_BishopChar) == 0x0004F0, "Wrong size on BP_BishopChar_C_ExecuteUbergraph_BP_BishopChar");
static_assert(offsetof(BP_BishopChar_C_ExecuteUbergraph_BP_BishopChar, EntryPoint) == 0x000000, "Member 'BP_BishopChar_C_ExecuteUbergraph_BP_BishopChar::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_BishopChar_C_ExecuteUbergraph_BP_BishopChar, CallFunc_GetController_ReturnValue) == 0x000008, "Member 'BP_BishopChar_C_ExecuteUbergraph_BP_BishopChar::CallFunc_GetController_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BishopChar_C_ExecuteUbergraph_BP_BishopChar, CallFunc_IsValid_ReturnValue) == 0x000010, "Member 'BP_BishopChar_C_ExecuteUbergraph_BP_BishopChar::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BishopChar_C_ExecuteUbergraph_BP_BishopChar, CallFunc_GetController_ReturnValue_1) == 0x000018, "Member 'BP_BishopChar_C_ExecuteUbergraph_BP_BishopChar::CallFunc_GetController_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_BishopChar_C_ExecuteUbergraph_BP_BishopChar, CallFunc_IsValid_ReturnValue_1) == 0x000020, "Member 'BP_BishopChar_C_ExecuteUbergraph_BP_BishopChar::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_BishopChar_C_ExecuteUbergraph_BP_BishopChar, CallFunc_GetForwardVector_ReturnValue) == 0x000024, "Member 'BP_BishopChar_C_ExecuteUbergraph_BP_BishopChar::CallFunc_GetForwardVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BishopChar_C_ExecuteUbergraph_BP_BishopChar, K2Node_CustomEvent_Mesh) == 0x000030, "Member 'BP_BishopChar_C_ExecuteUbergraph_BP_BishopChar::K2Node_CustomEvent_Mesh' has a wrong offset!");
static_assert(offsetof(BP_BishopChar_C_ExecuteUbergraph_BP_BishopChar, CallFunc_MakeRotator_ReturnValue) == 0x000038, "Member 'BP_BishopChar_C_ExecuteUbergraph_BP_BishopChar::CallFunc_MakeRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BishopChar_C_ExecuteUbergraph_BP_BishopChar, CallFunc_VSize_ReturnValue) == 0x000044, "Member 'BP_BishopChar_C_ExecuteUbergraph_BP_BishopChar::CallFunc_VSize_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BishopChar_C_ExecuteUbergraph_BP_BishopChar, CallFunc_GetForwardVector_ReturnValue_1) == 0x000048, "Member 'BP_BishopChar_C_ExecuteUbergraph_BP_BishopChar::CallFunc_GetForwardVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_BishopChar_C_ExecuteUbergraph_BP_BishopChar, CallFunc_IsFalling_ReturnValue) == 0x000054, "Member 'BP_BishopChar_C_ExecuteUbergraph_BP_BishopChar::CallFunc_IsFalling_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BishopChar_C_ExecuteUbergraph_BP_BishopChar, CallFunc_GetWorldDeltaSeconds_ReturnValue) == 0x000058, "Member 'BP_BishopChar_C_ExecuteUbergraph_BP_BishopChar::CallFunc_GetWorldDeltaSeconds_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BishopChar_C_ExecuteUbergraph_BP_BishopChar, K2Node_CustomEvent_Grenade_1) == 0x00005C, "Member 'BP_BishopChar_C_ExecuteUbergraph_BP_BishopChar::K2Node_CustomEvent_Grenade_1' has a wrong offset!");
static_assert(offsetof(BP_BishopChar_C_ExecuteUbergraph_BP_BishopChar, CallFunc_K2_GetComponentLocation_ReturnValue) == 0x000060, "Member 'BP_BishopChar_C_ExecuteUbergraph_BP_BishopChar::CallFunc_K2_GetComponentLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BishopChar_C_ExecuteUbergraph_BP_BishopChar, CallFunc_MakeTransform_ReturnValue) == 0x000070, "Member 'BP_BishopChar_C_ExecuteUbergraph_BP_BishopChar::CallFunc_MakeTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BishopChar_C_ExecuteUbergraph_BP_BishopChar, CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue) == 0x0000A0, "Member 'BP_BishopChar_C_ExecuteUbergraph_BP_BishopChar::CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BishopChar_C_ExecuteUbergraph_BP_BishopChar, CallFunc_Not_PreBool_ReturnValue) == 0x0000A8, "Member 'BP_BishopChar_C_ExecuteUbergraph_BP_BishopChar::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BishopChar_C_ExecuteUbergraph_BP_BishopChar, CallFunc_FinishSpawningActor_ReturnValue) == 0x0000B0, "Member 'BP_BishopChar_C_ExecuteUbergraph_BP_BishopChar::CallFunc_FinishSpawningActor_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BishopChar_C_ExecuteUbergraph_BP_BishopChar, K2Node_CustomEvent_SelfActor) == 0x0000B8, "Member 'BP_BishopChar_C_ExecuteUbergraph_BP_BishopChar::K2Node_CustomEvent_SelfActor' has a wrong offset!");
static_assert(offsetof(BP_BishopChar_C_ExecuteUbergraph_BP_BishopChar, K2Node_CustomEvent_OtherActor) == 0x0000C0, "Member 'BP_BishopChar_C_ExecuteUbergraph_BP_BishopChar::K2Node_CustomEvent_OtherActor' has a wrong offset!");
static_assert(offsetof(BP_BishopChar_C_ExecuteUbergraph_BP_BishopChar, K2Node_CustomEvent_NormalImpulse) == 0x0000C8, "Member 'BP_BishopChar_C_ExecuteUbergraph_BP_BishopChar::K2Node_CustomEvent_NormalImpulse' has a wrong offset!");
static_assert(offsetof(BP_BishopChar_C_ExecuteUbergraph_BP_BishopChar, K2Node_CustomEvent_Hit) == 0x0000D4, "Member 'BP_BishopChar_C_ExecuteUbergraph_BP_BishopChar::K2Node_CustomEvent_Hit' has a wrong offset!");
static_assert(offsetof(BP_BishopChar_C_ExecuteUbergraph_BP_BishopChar, K2Node_CustomEvent_direction) == 0x000160, "Member 'BP_BishopChar_C_ExecuteUbergraph_BP_BishopChar::K2Node_CustomEvent_direction' has a wrong offset!");
static_assert(offsetof(BP_BishopChar_C_ExecuteUbergraph_BP_BishopChar, CallFunc_RandomUnitVector_ReturnValue) == 0x00016C, "Member 'BP_BishopChar_C_ExecuteUbergraph_BP_BishopChar::CallFunc_RandomUnitVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BishopChar_C_ExecuteUbergraph_BP_BishopChar, CallFunc_RandomFloatInRange_ReturnValue) == 0x000178, "Member 'BP_BishopChar_C_ExecuteUbergraph_BP_BishopChar::CallFunc_RandomFloatInRange_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BishopChar_C_ExecuteUbergraph_BP_BishopChar, CallFunc_HasAuthority_ReturnValue) == 0x00017C, "Member 'BP_BishopChar_C_ExecuteUbergraph_BP_BishopChar::CallFunc_HasAuthority_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BishopChar_C_ExecuteUbergraph_BP_BishopChar, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x000180, "Member 'BP_BishopChar_C_ExecuteUbergraph_BP_BishopChar::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BishopChar_C_ExecuteUbergraph_BP_BishopChar, CallFunc_K2_SetTimer_ReturnValue) == 0x000190, "Member 'BP_BishopChar_C_ExecuteUbergraph_BP_BishopChar::CallFunc_K2_SetTimer_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BishopChar_C_ExecuteUbergraph_BP_BishopChar, CallFunc_K2_SetRelativeRotation_SweepHitResult) == 0x000198, "Member 'BP_BishopChar_C_ExecuteUbergraph_BP_BishopChar::CallFunc_K2_SetRelativeRotation_SweepHitResult' has a wrong offset!");
static_assert(offsetof(BP_BishopChar_C_ExecuteUbergraph_BP_BishopChar, CallFunc_K2_SetRelativeRotation_SweepHitResult_1) == 0x000224, "Member 'BP_BishopChar_C_ExecuteUbergraph_BP_BishopChar::CallFunc_K2_SetRelativeRotation_SweepHitResult_1' has a wrong offset!");
static_assert(offsetof(BP_BishopChar_C_ExecuteUbergraph_BP_BishopChar, CallFunc_BooleanOR_ReturnValue) == 0x0002B0, "Member 'BP_BishopChar_C_ExecuteUbergraph_BP_BishopChar::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BishopChar_C_ExecuteUbergraph_BP_BishopChar, CallFunc_HasAuthority_ReturnValue_1) == 0x0002B1, "Member 'BP_BishopChar_C_ExecuteUbergraph_BP_BishopChar::CallFunc_HasAuthority_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_BishopChar_C_ExecuteUbergraph_BP_BishopChar, K2Node_Event_Direction) == 0x0002B4, "Member 'BP_BishopChar_C_ExecuteUbergraph_BP_BishopChar::K2Node_Event_Direction' has a wrong offset!");
static_assert(offsetof(BP_BishopChar_C_ExecuteUbergraph_BP_BishopChar, CallFunc_Add_VectorVector_ReturnValue) == 0x0002C0, "Member 'BP_BishopChar_C_ExecuteUbergraph_BP_BishopChar::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BishopChar_C_ExecuteUbergraph_BP_BishopChar, CallFunc_HasAuthority_ReturnValue_2) == 0x0002CC, "Member 'BP_BishopChar_C_ExecuteUbergraph_BP_BishopChar::CallFunc_HasAuthority_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_BishopChar_C_ExecuteUbergraph_BP_BishopChar, K2Node_CustomEvent_NewRotation_3) == 0x0002D0, "Member 'BP_BishopChar_C_ExecuteUbergraph_BP_BishopChar::K2Node_CustomEvent_NewRotation_3' has a wrong offset!");
static_assert(offsetof(BP_BishopChar_C_ExecuteUbergraph_BP_BishopChar, K2Node_CustomEvent_Velocity_3) == 0x0002DC, "Member 'BP_BishopChar_C_ExecuteUbergraph_BP_BishopChar::K2Node_CustomEvent_Velocity_3' has a wrong offset!");
static_assert(offsetof(BP_BishopChar_C_ExecuteUbergraph_BP_BishopChar, K2Node_CustomEvent_WingFlapTimer_3) == 0x0002E8, "Member 'BP_BishopChar_C_ExecuteUbergraph_BP_BishopChar::K2Node_CustomEvent_WingFlapTimer_3' has a wrong offset!");
static_assert(offsetof(BP_BishopChar_C_ExecuteUbergraph_BP_BishopChar, K2Node_CustomEvent_currentAccelForce_3) == 0x0002EC, "Member 'BP_BishopChar_C_ExecuteUbergraph_BP_BishopChar::K2Node_CustomEvent_currentAccelForce_3' has a wrong offset!");
static_assert(offsetof(BP_BishopChar_C_ExecuteUbergraph_BP_BishopChar, CallFunc_K2_SetWorldRotation_SweepHitResult) == 0x0002F0, "Member 'BP_BishopChar_C_ExecuteUbergraph_BP_BishopChar::CallFunc_K2_SetWorldRotation_SweepHitResult' has a wrong offset!");
static_assert(offsetof(BP_BishopChar_C_ExecuteUbergraph_BP_BishopChar, K2Node_CustomEvent_NewRotation_2) == 0x00037C, "Member 'BP_BishopChar_C_ExecuteUbergraph_BP_BishopChar::K2Node_CustomEvent_NewRotation_2' has a wrong offset!");
static_assert(offsetof(BP_BishopChar_C_ExecuteUbergraph_BP_BishopChar, K2Node_CustomEvent_Velocity_2) == 0x000388, "Member 'BP_BishopChar_C_ExecuteUbergraph_BP_BishopChar::K2Node_CustomEvent_Velocity_2' has a wrong offset!");
static_assert(offsetof(BP_BishopChar_C_ExecuteUbergraph_BP_BishopChar, K2Node_CustomEvent_WingFlapTimer_2) == 0x000394, "Member 'BP_BishopChar_C_ExecuteUbergraph_BP_BishopChar::K2Node_CustomEvent_WingFlapTimer_2' has a wrong offset!");
static_assert(offsetof(BP_BishopChar_C_ExecuteUbergraph_BP_BishopChar, K2Node_CustomEvent_currentAccelForce_2) == 0x000398, "Member 'BP_BishopChar_C_ExecuteUbergraph_BP_BishopChar::K2Node_CustomEvent_currentAccelForce_2' has a wrong offset!");
static_assert(offsetof(BP_BishopChar_C_ExecuteUbergraph_BP_BishopChar, K2Node_CustomEvent_NewRotation_1) == 0x00039C, "Member 'BP_BishopChar_C_ExecuteUbergraph_BP_BishopChar::K2Node_CustomEvent_NewRotation_1' has a wrong offset!");
static_assert(offsetof(BP_BishopChar_C_ExecuteUbergraph_BP_BishopChar, K2Node_CustomEvent_Velocity_1) == 0x0003A8, "Member 'BP_BishopChar_C_ExecuteUbergraph_BP_BishopChar::K2Node_CustomEvent_Velocity_1' has a wrong offset!");
static_assert(offsetof(BP_BishopChar_C_ExecuteUbergraph_BP_BishopChar, K2Node_CustomEvent_WingFlapTimer_1) == 0x0003B4, "Member 'BP_BishopChar_C_ExecuteUbergraph_BP_BishopChar::K2Node_CustomEvent_WingFlapTimer_1' has a wrong offset!");
static_assert(offsetof(BP_BishopChar_C_ExecuteUbergraph_BP_BishopChar, K2Node_CustomEvent_currentAccelForce_1) == 0x0003B8, "Member 'BP_BishopChar_C_ExecuteUbergraph_BP_BishopChar::K2Node_CustomEvent_currentAccelForce_1' has a wrong offset!");
static_assert(offsetof(BP_BishopChar_C_ExecuteUbergraph_BP_BishopChar, K2Node_CustomEvent_NewRotation) == 0x0003BC, "Member 'BP_BishopChar_C_ExecuteUbergraph_BP_BishopChar::K2Node_CustomEvent_NewRotation' has a wrong offset!");
static_assert(offsetof(BP_BishopChar_C_ExecuteUbergraph_BP_BishopChar, K2Node_CustomEvent_Velocity) == 0x0003C8, "Member 'BP_BishopChar_C_ExecuteUbergraph_BP_BishopChar::K2Node_CustomEvent_Velocity' has a wrong offset!");
static_assert(offsetof(BP_BishopChar_C_ExecuteUbergraph_BP_BishopChar, K2Node_CustomEvent_WingFlapTimer) == 0x0003D4, "Member 'BP_BishopChar_C_ExecuteUbergraph_BP_BishopChar::K2Node_CustomEvent_WingFlapTimer' has a wrong offset!");
static_assert(offsetof(BP_BishopChar_C_ExecuteUbergraph_BP_BishopChar, K2Node_CustomEvent_currentAccelForce) == 0x0003D8, "Member 'BP_BishopChar_C_ExecuteUbergraph_BP_BishopChar::K2Node_CustomEvent_currentAccelForce' has a wrong offset!");
static_assert(offsetof(BP_BishopChar_C_ExecuteUbergraph_BP_BishopChar, K2Node_Event_DeltaSeconds) == 0x0003DC, "Member 'BP_BishopChar_C_ExecuteUbergraph_BP_BishopChar::K2Node_Event_DeltaSeconds' has a wrong offset!");
static_assert(offsetof(BP_BishopChar_C_ExecuteUbergraph_BP_BishopChar, K2Node_CreateDelegate_OutputDelegate) == 0x0003E0, "Member 'BP_BishopChar_C_ExecuteUbergraph_BP_BishopChar::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(BP_BishopChar_C_ExecuteUbergraph_BP_BishopChar, CallFunc_GetWorldDeltaSeconds_ReturnValue_1) == 0x0003F0, "Member 'BP_BishopChar_C_ExecuteUbergraph_BP_BishopChar::CallFunc_GetWorldDeltaSeconds_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_BishopChar_C_ExecuteUbergraph_BP_BishopChar, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x0003F4, "Member 'BP_BishopChar_C_ExecuteUbergraph_BP_BishopChar::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BishopChar_C_ExecuteUbergraph_BP_BishopChar, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x0003F8, "Member 'BP_BishopChar_C_ExecuteUbergraph_BP_BishopChar::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BishopChar_C_ExecuteUbergraph_BP_BishopChar, K2Node_CustomEvent_Grenade) == 0x000400, "Member 'BP_BishopChar_C_ExecuteUbergraph_BP_BishopChar::K2Node_CustomEvent_Grenade' has a wrong offset!");
static_assert(offsetof(BP_BishopChar_C_ExecuteUbergraph_BP_BishopChar, K2Node_CustomEvent_Force) == 0x000408, "Member 'BP_BishopChar_C_ExecuteUbergraph_BP_BishopChar::K2Node_CustomEvent_Force' has a wrong offset!");
static_assert(offsetof(BP_BishopChar_C_ExecuteUbergraph_BP_BishopChar, CallFunc_Multiply_VectorFloat_ReturnValue_1) == 0x000414, "Member 'BP_BishopChar_C_ExecuteUbergraph_BP_BishopChar::CallFunc_Multiply_VectorFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_BishopChar_C_ExecuteUbergraph_BP_BishopChar, CallFunc_K2_GetComponentRotation_ReturnValue) == 0x000420, "Member 'BP_BishopChar_C_ExecuteUbergraph_BP_BishopChar::CallFunc_K2_GetComponentRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BishopChar_C_ExecuteUbergraph_BP_BishopChar, CallFunc_BreakVector_X) == 0x00042C, "Member 'BP_BishopChar_C_ExecuteUbergraph_BP_BishopChar::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(BP_BishopChar_C_ExecuteUbergraph_BP_BishopChar, CallFunc_BreakVector_Y) == 0x000430, "Member 'BP_BishopChar_C_ExecuteUbergraph_BP_BishopChar::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(BP_BishopChar_C_ExecuteUbergraph_BP_BishopChar, CallFunc_BreakVector_Z) == 0x000434, "Member 'BP_BishopChar_C_ExecuteUbergraph_BP_BishopChar::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(BP_BishopChar_C_ExecuteUbergraph_BP_BishopChar, CallFunc_Conv_RotatorToVector_ReturnValue) == 0x000438, "Member 'BP_BishopChar_C_ExecuteUbergraph_BP_BishopChar::CallFunc_Conv_RotatorToVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BishopChar_C_ExecuteUbergraph_BP_BishopChar, CallFunc_Add_FloatFloat_ReturnValue) == 0x000444, "Member 'BP_BishopChar_C_ExecuteUbergraph_BP_BishopChar::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BishopChar_C_ExecuteUbergraph_BP_BishopChar, CallFunc_Normal_ReturnValue) == 0x000448, "Member 'BP_BishopChar_C_ExecuteUbergraph_BP_BishopChar::CallFunc_Normal_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BishopChar_C_ExecuteUbergraph_BP_BishopChar, CallFunc_MakeVector_ReturnValue) == 0x000454, "Member 'BP_BishopChar_C_ExecuteUbergraph_BP_BishopChar::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BishopChar_C_ExecuteUbergraph_BP_BishopChar, CallFunc_Conv_VectorToRotator_ReturnValue) == 0x000460, "Member 'BP_BishopChar_C_ExecuteUbergraph_BP_BishopChar::CallFunc_Conv_VectorToRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BishopChar_C_ExecuteUbergraph_BP_BishopChar, CallFunc_ComposeRotators_ReturnValue) == 0x00046C, "Member 'BP_BishopChar_C_ExecuteUbergraph_BP_BishopChar::CallFunc_ComposeRotators_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BishopChar_C_ExecuteUbergraph_BP_BishopChar, CallFunc_BreakVector_X_1) == 0x000478, "Member 'BP_BishopChar_C_ExecuteUbergraph_BP_BishopChar::CallFunc_BreakVector_X_1' has a wrong offset!");
static_assert(offsetof(BP_BishopChar_C_ExecuteUbergraph_BP_BishopChar, CallFunc_BreakVector_Y_1) == 0x00047C, "Member 'BP_BishopChar_C_ExecuteUbergraph_BP_BishopChar::CallFunc_BreakVector_Y_1' has a wrong offset!");
static_assert(offsetof(BP_BishopChar_C_ExecuteUbergraph_BP_BishopChar, CallFunc_BreakVector_Z_1) == 0x000480, "Member 'BP_BishopChar_C_ExecuteUbergraph_BP_BishopChar::CallFunc_BreakVector_Z_1' has a wrong offset!");
static_assert(offsetof(BP_BishopChar_C_ExecuteUbergraph_BP_BishopChar, CallFunc_Dot_VectorVector_ReturnValue) == 0x000484, "Member 'BP_BishopChar_C_ExecuteUbergraph_BP_BishopChar::CallFunc_Dot_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BishopChar_C_ExecuteUbergraph_BP_BishopChar, CallFunc_SignOfFloat_ReturnValue) == 0x000488, "Member 'BP_BishopChar_C_ExecuteUbergraph_BP_BishopChar::CallFunc_SignOfFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BishopChar_C_ExecuteUbergraph_BP_BishopChar, CallFunc_DegAcos_ReturnValue) == 0x00048C, "Member 'BP_BishopChar_C_ExecuteUbergraph_BP_BishopChar::CallFunc_DegAcos_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BishopChar_C_ExecuteUbergraph_BP_BishopChar, CallFunc_Multiply_FloatFloat_ReturnValue_1) == 0x000490, "Member 'BP_BishopChar_C_ExecuteUbergraph_BP_BishopChar::CallFunc_Multiply_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_BishopChar_C_ExecuteUbergraph_BP_BishopChar, CallFunc_Multiply_FloatFloat_ReturnValue_2) == 0x000494, "Member 'BP_BishopChar_C_ExecuteUbergraph_BP_BishopChar::CallFunc_Multiply_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_BishopChar_C_ExecuteUbergraph_BP_BishopChar, CallFunc_Add_FloatFloat_ReturnValue_1) == 0x000498, "Member 'BP_BishopChar_C_ExecuteUbergraph_BP_BishopChar::CallFunc_Add_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_BishopChar_C_ExecuteUbergraph_BP_BishopChar, CallFunc_FClamp_ReturnValue) == 0x00049C, "Member 'BP_BishopChar_C_ExecuteUbergraph_BP_BishopChar::CallFunc_FClamp_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BishopChar_C_ExecuteUbergraph_BP_BishopChar, Temp_int_Variable) == 0x0004A0, "Member 'BP_BishopChar_C_ExecuteUbergraph_BP_BishopChar::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(BP_BishopChar_C_ExecuteUbergraph_BP_BishopChar, CallFunc_Multiply_FloatFloat_ReturnValue_3) == 0x0004A4, "Member 'BP_BishopChar_C_ExecuteUbergraph_BP_BishopChar::CallFunc_Multiply_FloatFloat_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_BishopChar_C_ExecuteUbergraph_BP_BishopChar, CallFunc_Subtract_FloatFloat_ReturnValue_1) == 0x0004A8, "Member 'BP_BishopChar_C_ExecuteUbergraph_BP_BishopChar::CallFunc_Subtract_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_BishopChar_C_ExecuteUbergraph_BP_BishopChar, CallFunc_LessEqual_IntInt_ReturnValue) == 0x0004AC, "Member 'BP_BishopChar_C_ExecuteUbergraph_BP_BishopChar::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BishopChar_C_ExecuteUbergraph_BP_BishopChar, CallFunc_Add_IntInt_ReturnValue) == 0x0004B0, "Member 'BP_BishopChar_C_ExecuteUbergraph_BP_BishopChar::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BishopChar_C_ExecuteUbergraph_BP_BishopChar, CallFunc_IsValid_ReturnValue_2) == 0x0004B4, "Member 'BP_BishopChar_C_ExecuteUbergraph_BP_BishopChar::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_BishopChar_C_ExecuteUbergraph_BP_BishopChar, CallFunc_Multiply_FloatFloat_ReturnValue_4) == 0x0004B8, "Member 'BP_BishopChar_C_ExecuteUbergraph_BP_BishopChar::CallFunc_Multiply_FloatFloat_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_BishopChar_C_ExecuteUbergraph_BP_BishopChar, CallFunc_Multiply_FloatFloat_ReturnValue_5) == 0x0004BC, "Member 'BP_BishopChar_C_ExecuteUbergraph_BP_BishopChar::CallFunc_Multiply_FloatFloat_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BP_BishopChar_C_ExecuteUbergraph_BP_BishopChar, CallFunc_GetWorldDeltaSeconds_ReturnValue_2) == 0x0004C0, "Member 'BP_BishopChar_C_ExecuteUbergraph_BP_BishopChar::CallFunc_GetWorldDeltaSeconds_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_BishopChar_C_ExecuteUbergraph_BP_BishopChar, CallFunc_Multiply_FloatFloat_ReturnValue_6) == 0x0004C4, "Member 'BP_BishopChar_C_ExecuteUbergraph_BP_BishopChar::CallFunc_Multiply_FloatFloat_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(BP_BishopChar_C_ExecuteUbergraph_BP_BishopChar, CallFunc_Add_FloatFloat_ReturnValue_2) == 0x0004C8, "Member 'BP_BishopChar_C_ExecuteUbergraph_BP_BishopChar::CallFunc_Add_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_BishopChar_C_ExecuteUbergraph_BP_BishopChar, CallFunc_Multiply_VectorFloat_ReturnValue_2) == 0x0004CC, "Member 'BP_BishopChar_C_ExecuteUbergraph_BP_BishopChar::CallFunc_Multiply_VectorFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_BishopChar_C_ExecuteUbergraph_BP_BishopChar, CallFunc_Divide_FloatFloat_ReturnValue) == 0x0004D8, "Member 'BP_BishopChar_C_ExecuteUbergraph_BP_BishopChar::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BishopChar_C_ExecuteUbergraph_BP_BishopChar, CallFunc_Less_FloatFloat_ReturnValue) == 0x0004DC, "Member 'BP_BishopChar_C_ExecuteUbergraph_BP_BishopChar::CallFunc_Less_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BishopChar_C_ExecuteUbergraph_BP_BishopChar, CallFunc_Multiply_FloatFloat_ReturnValue_7) == 0x0004E0, "Member 'BP_BishopChar_C_ExecuteUbergraph_BP_BishopChar::CallFunc_Multiply_FloatFloat_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(BP_BishopChar_C_ExecuteUbergraph_BP_BishopChar, CallFunc_Add_FloatFloat_ReturnValue_3) == 0x0004E4, "Member 'BP_BishopChar_C_ExecuteUbergraph_BP_BishopChar::CallFunc_Add_FloatFloat_ReturnValue_3' has a wrong offset!");

// Function BP_BishopChar.BP_BishopChar_C.ImpulseGrenade
// 0x0018 (0x0018 - 0x0000)
struct BP_BishopChar_C_ImpulseGrenade final
{
public:
	class UStaticMeshComponent*                   Grenade_0;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Force;                                             // 0x0008(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_BishopChar_C_ImpulseGrenade) == 0x000008, "Wrong alignment on BP_BishopChar_C_ImpulseGrenade");
static_assert(sizeof(BP_BishopChar_C_ImpulseGrenade) == 0x000018, "Wrong size on BP_BishopChar_C_ImpulseGrenade");
static_assert(offsetof(BP_BishopChar_C_ImpulseGrenade, Grenade_0) == 0x000000, "Member 'BP_BishopChar_C_ImpulseGrenade::Grenade_0' has a wrong offset!");
static_assert(offsetof(BP_BishopChar_C_ImpulseGrenade, Force) == 0x000008, "Member 'BP_BishopChar_C_ImpulseGrenade::Force' has a wrong offset!");

// Function BP_BishopChar.BP_BishopChar_C.UpdateGlideState
// 0x0020 (0x0020 - 0x0000)
struct BP_BishopChar_C_UpdateGlideState final
{
public:
	struct FRotator                               NewRotation;                                       // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                Velocity;                                          // 0x000C(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         WingFlapTimer_0;                                   // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         currentAccelForce_0;                               // 0x001C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_BishopChar_C_UpdateGlideState) == 0x000004, "Wrong alignment on BP_BishopChar_C_UpdateGlideState");
static_assert(sizeof(BP_BishopChar_C_UpdateGlideState) == 0x000020, "Wrong size on BP_BishopChar_C_UpdateGlideState");
static_assert(offsetof(BP_BishopChar_C_UpdateGlideState, NewRotation) == 0x000000, "Member 'BP_BishopChar_C_UpdateGlideState::NewRotation' has a wrong offset!");
static_assert(offsetof(BP_BishopChar_C_UpdateGlideState, Velocity) == 0x00000C, "Member 'BP_BishopChar_C_UpdateGlideState::Velocity' has a wrong offset!");
static_assert(offsetof(BP_BishopChar_C_UpdateGlideState, WingFlapTimer_0) == 0x000018, "Member 'BP_BishopChar_C_UpdateGlideState::WingFlapTimer_0' has a wrong offset!");
static_assert(offsetof(BP_BishopChar_C_UpdateGlideState, currentAccelForce_0) == 0x00001C, "Member 'BP_BishopChar_C_UpdateGlideState::currentAccelForce_0' has a wrong offset!");

// Function BP_BishopChar.BP_BishopChar_C.UpdateGlideStateMulti
// 0x0020 (0x0020 - 0x0000)
struct BP_BishopChar_C_UpdateGlideStateMulti final
{
public:
	struct FRotator                               NewRotation;                                       // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                Velocity;                                          // 0x000C(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         WingFlapTimer_0;                                   // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         currentAccelForce_0;                               // 0x001C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_BishopChar_C_UpdateGlideStateMulti) == 0x000004, "Wrong alignment on BP_BishopChar_C_UpdateGlideStateMulti");
static_assert(sizeof(BP_BishopChar_C_UpdateGlideStateMulti) == 0x000020, "Wrong size on BP_BishopChar_C_UpdateGlideStateMulti");
static_assert(offsetof(BP_BishopChar_C_UpdateGlideStateMulti, NewRotation) == 0x000000, "Member 'BP_BishopChar_C_UpdateGlideStateMulti::NewRotation' has a wrong offset!");
static_assert(offsetof(BP_BishopChar_C_UpdateGlideStateMulti, Velocity) == 0x00000C, "Member 'BP_BishopChar_C_UpdateGlideStateMulti::Velocity' has a wrong offset!");
static_assert(offsetof(BP_BishopChar_C_UpdateGlideStateMulti, WingFlapTimer_0) == 0x000018, "Member 'BP_BishopChar_C_UpdateGlideStateMulti::WingFlapTimer_0' has a wrong offset!");
static_assert(offsetof(BP_BishopChar_C_UpdateGlideStateMulti, currentAccelForce_0) == 0x00001C, "Member 'BP_BishopChar_C_UpdateGlideStateMulti::currentAccelForce_0' has a wrong offset!");

// Function BP_BishopChar.BP_BishopChar_C.UpdateGlideStateServer
// 0x0020 (0x0020 - 0x0000)
struct BP_BishopChar_C_UpdateGlideStateServer final
{
public:
	struct FRotator                               NewRotation;                                       // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                Velocity;                                          // 0x000C(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         WingFlapTimer_0;                                   // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         currentAccelForce_0;                               // 0x001C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_BishopChar_C_UpdateGlideStateServer) == 0x000004, "Wrong alignment on BP_BishopChar_C_UpdateGlideStateServer");
static_assert(sizeof(BP_BishopChar_C_UpdateGlideStateServer) == 0x000020, "Wrong size on BP_BishopChar_C_UpdateGlideStateServer");
static_assert(offsetof(BP_BishopChar_C_UpdateGlideStateServer, NewRotation) == 0x000000, "Member 'BP_BishopChar_C_UpdateGlideStateServer::NewRotation' has a wrong offset!");
static_assert(offsetof(BP_BishopChar_C_UpdateGlideStateServer, Velocity) == 0x00000C, "Member 'BP_BishopChar_C_UpdateGlideStateServer::Velocity' has a wrong offset!");
static_assert(offsetof(BP_BishopChar_C_UpdateGlideStateServer, WingFlapTimer_0) == 0x000018, "Member 'BP_BishopChar_C_UpdateGlideStateServer::WingFlapTimer_0' has a wrong offset!");
static_assert(offsetof(BP_BishopChar_C_UpdateGlideStateServer, currentAccelForce_0) == 0x00001C, "Member 'BP_BishopChar_C_UpdateGlideStateServer::currentAccelForce_0' has a wrong offset!");

// Function BP_BishopChar.BP_BishopChar_C.UpdateGlideStateAll
// 0x0020 (0x0020 - 0x0000)
struct BP_BishopChar_C_UpdateGlideStateAll final
{
public:
	struct FRotator                               NewRotation;                                       // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                Velocity;                                          // 0x000C(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         WingFlapTimer_0;                                   // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         currentAccelForce_0;                               // 0x001C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_BishopChar_C_UpdateGlideStateAll) == 0x000004, "Wrong alignment on BP_BishopChar_C_UpdateGlideStateAll");
static_assert(sizeof(BP_BishopChar_C_UpdateGlideStateAll) == 0x000020, "Wrong size on BP_BishopChar_C_UpdateGlideStateAll");
static_assert(offsetof(BP_BishopChar_C_UpdateGlideStateAll, NewRotation) == 0x000000, "Member 'BP_BishopChar_C_UpdateGlideStateAll::NewRotation' has a wrong offset!");
static_assert(offsetof(BP_BishopChar_C_UpdateGlideStateAll, Velocity) == 0x00000C, "Member 'BP_BishopChar_C_UpdateGlideStateAll::Velocity' has a wrong offset!");
static_assert(offsetof(BP_BishopChar_C_UpdateGlideStateAll, WingFlapTimer_0) == 0x000018, "Member 'BP_BishopChar_C_UpdateGlideStateAll::WingFlapTimer_0' has a wrong offset!");
static_assert(offsetof(BP_BishopChar_C_UpdateGlideStateAll, currentAccelForce_0) == 0x00001C, "Member 'BP_BishopChar_C_UpdateGlideStateAll::currentAccelForce_0' has a wrong offset!");

// Function BP_BishopChar.BP_BishopChar_C.ThrowGrenade
// 0x000C (0x000C - 0x0000)
struct BP_BishopChar_C_ThrowGrenade final
{
public:
	struct FVector                                Direction_0;                                       // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_BishopChar_C_ThrowGrenade) == 0x000004, "Wrong alignment on BP_BishopChar_C_ThrowGrenade");
static_assert(sizeof(BP_BishopChar_C_ThrowGrenade) == 0x00000C, "Wrong size on BP_BishopChar_C_ThrowGrenade");
static_assert(offsetof(BP_BishopChar_C_ThrowGrenade, Direction_0) == 0x000000, "Member 'BP_BishopChar_C_ThrowGrenade::Direction_0' has a wrong offset!");

// Function BP_BishopChar.BP_BishopChar_C.GlideHit
// 0x00A8 (0x00A8 - 0x0000)
struct BP_BishopChar_C_GlideHit final
{
public:
	class AActor*                                 SelfActor;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                NormalImpulse;                                     // 0x0010(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             Hit;                                               // 0x001C(0x008C)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(BP_BishopChar_C_GlideHit) == 0x000008, "Wrong alignment on BP_BishopChar_C_GlideHit");
static_assert(sizeof(BP_BishopChar_C_GlideHit) == 0x0000A8, "Wrong size on BP_BishopChar_C_GlideHit");
static_assert(offsetof(BP_BishopChar_C_GlideHit, SelfActor) == 0x000000, "Member 'BP_BishopChar_C_GlideHit::SelfActor' has a wrong offset!");
static_assert(offsetof(BP_BishopChar_C_GlideHit, OtherActor) == 0x000008, "Member 'BP_BishopChar_C_GlideHit::OtherActor' has a wrong offset!");
static_assert(offsetof(BP_BishopChar_C_GlideHit, NormalImpulse) == 0x000010, "Member 'BP_BishopChar_C_GlideHit::NormalImpulse' has a wrong offset!");
static_assert(offsetof(BP_BishopChar_C_GlideHit, Hit) == 0x00001C, "Member 'BP_BishopChar_C_GlideHit::Hit' has a wrong offset!");

// Function BP_BishopChar.BP_BishopChar_C.EquipWeapon
// 0x0001 (0x0001 - 0x0000)
struct BP_BishopChar_C_EquipWeapon final
{
public:
	bool                                          Grenade_0;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_BishopChar_C_EquipWeapon) == 0x000001, "Wrong alignment on BP_BishopChar_C_EquipWeapon");
static_assert(sizeof(BP_BishopChar_C_EquipWeapon) == 0x000001, "Wrong size on BP_BishopChar_C_EquipWeapon");
static_assert(offsetof(BP_BishopChar_C_EquipWeapon, Grenade_0) == 0x000000, "Member 'BP_BishopChar_C_EquipWeapon::Grenade_0' has a wrong offset!");

// Function BP_BishopChar.BP_BishopChar_C.TurnBlack
// 0x0008 (0x0008 - 0x0000)
struct BP_BishopChar_C_TurnBlack final
{
public:
	class UMeshComponent*                         Mesh_0;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_BishopChar_C_TurnBlack) == 0x000008, "Wrong alignment on BP_BishopChar_C_TurnBlack");
static_assert(sizeof(BP_BishopChar_C_TurnBlack) == 0x000008, "Wrong size on BP_BishopChar_C_TurnBlack");
static_assert(offsetof(BP_BishopChar_C_TurnBlack, Mesh_0) == 0x000000, "Member 'BP_BishopChar_C_TurnBlack::Mesh_0' has a wrong offset!");

// Function BP_BishopChar.BP_BishopChar_C.ReceiveTick
// 0x0004 (0x0004 - 0x0000)
struct BP_BishopChar_C_ReceiveTick final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_BishopChar_C_ReceiveTick) == 0x000004, "Wrong alignment on BP_BishopChar_C_ReceiveTick");
static_assert(sizeof(BP_BishopChar_C_ReceiveTick) == 0x000004, "Wrong size on BP_BishopChar_C_ReceiveTick");
static_assert(offsetof(BP_BishopChar_C_ReceiveTick, DeltaSeconds) == 0x000000, "Member 'BP_BishopChar_C_ReceiveTick::DeltaSeconds' has a wrong offset!");

// Function BP_BishopChar.BP_BishopChar_C.ShootDirection
// 0x000C (0x000C - 0x0000)
struct BP_BishopChar_C_ShootDirection final
{
public:
	struct FVector                                Direction_0;                                       // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_BishopChar_C_ShootDirection) == 0x000004, "Wrong alignment on BP_BishopChar_C_ShootDirection");
static_assert(sizeof(BP_BishopChar_C_ShootDirection) == 0x00000C, "Wrong size on BP_BishopChar_C_ShootDirection");
static_assert(offsetof(BP_BishopChar_C_ShootDirection, Direction_0) == 0x000000, "Member 'BP_BishopChar_C_ShootDirection::Direction_0' has a wrong offset!");

// Function BP_BishopChar.BP_BishopChar_C.MainAbility
// 0x0001 (0x0001 - 0x0000)
struct BP_BishopChar_C_MainAbility final
{
public:
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_BishopChar_C_MainAbility) == 0x000001, "Wrong alignment on BP_BishopChar_C_MainAbility");
static_assert(sizeof(BP_BishopChar_C_MainAbility) == 0x000001, "Wrong size on BP_BishopChar_C_MainAbility");
static_assert(offsetof(BP_BishopChar_C_MainAbility, CallFunc_Not_PreBool_ReturnValue) == 0x000000, "Member 'BP_BishopChar_C_MainAbility::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");

// Function BP_BishopChar.BP_BishopChar_C.MovementAbility
// 0x0001 (0x0001 - 0x0000)
struct BP_BishopChar_C_MovementAbility final
{
public:
	bool                                          CallFunc_IsFalling_ReturnValue;                    // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_BishopChar_C_MovementAbility) == 0x000001, "Wrong alignment on BP_BishopChar_C_MovementAbility");
static_assert(sizeof(BP_BishopChar_C_MovementAbility) == 0x000001, "Wrong size on BP_BishopChar_C_MovementAbility");
static_assert(offsetof(BP_BishopChar_C_MovementAbility, CallFunc_IsFalling_ReturnValue) == 0x000000, "Member 'BP_BishopChar_C_MovementAbility::CallFunc_IsFalling_ReturnValue' has a wrong offset!");

// Function BP_BishopChar.BP_BishopChar_C.GetDefaultCamera
// 0x0018 (0x0018 - 0x0000)
struct BP_BishopChar_C_GetDefaultCamera final
{
public:
	class UCameraComponent*                       Default_Camera;                                    // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsActive_ReturnValue;                     // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UCameraComponent*                       K2Node_Select_Default;                             // 0x0010(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_BishopChar_C_GetDefaultCamera) == 0x000008, "Wrong alignment on BP_BishopChar_C_GetDefaultCamera");
static_assert(sizeof(BP_BishopChar_C_GetDefaultCamera) == 0x000018, "Wrong size on BP_BishopChar_C_GetDefaultCamera");
static_assert(offsetof(BP_BishopChar_C_GetDefaultCamera, Default_Camera) == 0x000000, "Member 'BP_BishopChar_C_GetDefaultCamera::Default_Camera' has a wrong offset!");
static_assert(offsetof(BP_BishopChar_C_GetDefaultCamera, Temp_bool_Variable) == 0x000008, "Member 'BP_BishopChar_C_GetDefaultCamera::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_BishopChar_C_GetDefaultCamera, CallFunc_IsActive_ReturnValue) == 0x000009, "Member 'BP_BishopChar_C_GetDefaultCamera::CallFunc_IsActive_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BishopChar_C_GetDefaultCamera, K2Node_Select_Default) == 0x000010, "Member 'BP_BishopChar_C_GetDefaultCamera::K2Node_Select_Default' has a wrong offset!");

}

