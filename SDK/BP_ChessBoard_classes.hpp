#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_ChessBoard

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "Move_structs.hpp"
#include "PieceTypes_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_ChessBoard.BP_ChessBoard_C
// 0x0230 (0x0460 - 0x0230)
class ABP_ChessBoard_C final : public AStaticMeshActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0230(0x0008)(ZeroConstructor, Transient, DuplicateTransient, UObjectWrapper)
	class UGameFocusChecker_C*                    GameFocusChecker;                                  // 0x0238(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	class USplineComponent*                       MovePieceSpline;                                   // 0x0240(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	class USplineComponent*                       BlackPath;                                         // 0x0248(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	class USplineComponent*                       WhitePath;                                         // 0x0250(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	class USceneComponent*                        BlackStartingPos;                                  // 0x0258(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	class USceneComponent*                        WhiteStartingPos;                                  // 0x0260(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	class USceneComponent*                        PlayerTwoPos;                                      // 0x0268(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	class USceneComponent*                        PlayerOnePos;                                      // 0x0270(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	float                                         MovePoint2_Time_A472CB844B98E05A3C88658B8A3E6768;  // 0x0278(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	ETimelineDirection                            MovePoint2__Direction_A472CB844B98E05A3C88658B8A3E6768; // 0x027C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_27D[0x3];                                      // 0x027D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     MovePoint2;                                        // 0x0280(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	float                                         MoveCamera2_time_0ED88E1A41E85F3F91BD7A97DA8AF1EB; // 0x0288(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	ETimelineDirection                            MoveCamera2__Direction_0ED88E1A41E85F3F91BD7A97DA8AF1EB; // 0x028C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_28D[0x3];                                      // 0x028D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     MoveCamera2;                                       // 0x0290(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	float                                         MoveCamera1_time_0748500A4F4B3B8CFB908AAEC6D968E9; // 0x0298(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	ETimelineDirection                            MoveCamera1__Direction_0748500A4F4B3B8CFB908AAEC6D968E9; // 0x029C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_29D[0x3];                                      // 0x029D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     MoveCamera1;                                       // 0x02A0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	float                                         GoToStartBlack_time_C3FBC7F64411B7BDCD50FFBDDC578640; // 0x02A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	ETimelineDirection                            GoToStartBlack__Direction_C3FBC7F64411B7BDCD50FFBDDC578640; // 0x02AC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2AD[0x3];                                      // 0x02AD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     GoToStartBlack;                                    // 0x02B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	float                                         GoToStart_time_66131BFF4A0077938210FFA09AC39BC7;   // 0x02B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	ETimelineDirection                            GoToStart__Direction_66131BFF4A0077938210FFA09AC39BC7; // 0x02BC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2BD[0x3];                                      // 0x02BD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     GoToStart;                                         // 0x02C0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	TArray<class ABP_Square_C*>                   Grid;                                              // 0x02C8(0x0010)(Edit, BlueprintVisible, Net, DisableEditOnTemplate)
	struct FVector                                PieceScale;                                        // 0x02D8(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2E4[0x4];                                      // 0x02E4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ABP_Piece_C*>                    WhitePieces;                                       // 0x02E8(0x0010)(Edit, BlueprintVisible, Net, DisableEditOnTemplate, DisableEditOnInstance)
	class ABP_Player_C*                           PlayerOne;                                         // 0x02F8(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class ABP_Piece_C*>                    BlackPieces;                                       // 0x0300(0x0010)(Edit, BlueprintVisible, Net, DisableEditOnTemplate, DisableEditOnInstance)
	float                                         PieceHeight;                                       // 0x0310(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_314[0x4];                                      // 0x0314(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_Player_C*                           PlayerTwo;                                         // 0x0318(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          WhiteTurn;                                         // 0x0320(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          BlackTurn;                                         // 0x0321(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_322[0x6];                                      // 0x0322(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_PieceChar_C*                        PieceCharTemp;                                     // 0x0328(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_Square_C*                           EnPessantTarget;                                   // 0x0330(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_PieceChar_C*                        PieceChar1;                                        // 0x0338(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_PieceChar_C*                        PieceChar2;                                        // 0x0340(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_VsCutscene_C*                       VsCutscene;                                        // 0x0348(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         startTimer;                                        // 0x0350(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         TimeUntilStart;                                    // 0x0354(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           CountdownTimer;                                    // 0x0358(0x0008)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash)
	float                                         UnlockAbilitiesDelay;                              // 0x0360(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_364[0x4];                                      // 0x0364(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ABP_PieceChar_C*>                Losers;                                            // 0x0368(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	uint8                                         Pad_378[0x8];                                      // 0x0378(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CameraStart1;                                      // 0x0380(0x0030)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FTransform                             CameraStart2;                                      // 0x03B0(0x0030)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          EndingCombat;                                      // 0x03E0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          NobodyTurn;                                        // 0x03E1(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          Singleplayer;                                      // 0x03E2(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          InCombat;                                          // 0x03E3(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3E4[0x4];                                      // 0x03E4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AGramaphone_C*                          MusicPlayer;                                       // 0x03E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          GameOverFlag;                                      // 0x03F0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          BlackWin;                                          // 0x03F1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          isDefaultBoard;                                    // 0x03F2(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn)
	bool                                          LocalMultiplayer;                                  // 0x03F3(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3F4[0x4];                                      // 0x03F4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void()>              CombatEnded;                                       // 0x03F8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TMulticastInlineDelegate<void()>              CombatStarted;                                     // 0x0408(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TMulticastInlineDelegate<void(class ABP_Piece_C* Piece, class ABP_Square_C* Square, bool PlayerMove, bool Animated)> CastlingKing;                                      // 0x0418(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TArray<struct FMove>                          MoveQueue;                                         // 0x0428(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FMove                                  NextMove;                                          // 0x0438(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         WhiteKingCount;                                    // 0x0448(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         BlackKingCount;                                    // 0x044C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          TieFlag;                                           // 0x0450(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          WhiteStartedWithKings;                             // 0x0451(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          BlackStartedWithKings;                             // 0x0452(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          BSideDefault;                                      // 0x0453(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void ExecuteUbergraph_BP_ChessBoard(int32 EntryPoint);
	void EnablePieceInvisible(class ABP_Piece_C* Piece);
	void EndGameIfOver();
	void EndGameIfNoKings();
	void SendMessageToPlayersCombat(const class FText& Message, bool Player1);
	void SendMessageToPlayers(const class FText& Message, bool Player1);
	void RestartData();
	void StopKillcam();
	void Reset();
	void Set_In_Combat_Multi(bool InCombat_0);
	void Enqueue_Move(class ABP_Piece_C* Piece, class ABP_Square_C* Square);
	void MoveToMovepointMulti(class ABP_Square_C* Square, class ABP_Piece_C* Piece);
	void DispatchStartEvent();
	void WinnerSequence();
	void RecordBlackness();
	void CleanLocal();
	void ClearController();
	void EnableAllPieces();
	void StopRecord();
	void DisablePieceLocal(class ABP_Piece_C* Piece);
	void SetProtagonistClient(class UKillcamRecorder_C* Target);
	void Set_Protagonist_Multi(class UKillcamRecorder_C* Target);
	void StartPlayingKillcam();
	void StartRecord();
	void CleanUp();
	void EndGame(bool Black_Win);
	void SetMusicPosition(bool FPS);
	void SetNobodyTurnAll(bool NobodyTurn_0);
	void SetNobodyTurnMulti(bool NobodyTurn_0);
	void SetNobodyTurnServer(bool NobodyTurn_0);
	void SwitchTurnsMulti();
	void SwitchTurnsServer();
	void SwitchTurnsAll();
	void InitializePiece(class ABP_Piece_C* Piece, class ABP_Square_C* Square, bool Black, bool BSide);
	void TurnPieceBlackMulti(class ABP_Piece_C* Piece);
	void SetNobodyTurn(bool NobodyTurn_0);
	void MoveToMovepoint(class ABP_Square_C* Square, class ABP_Piece_C* Piece);
	void LerpCamerasToTransform(const struct FTransform& Transform, float Time);
	void CamPiece(class ABP_PieceChar_C* PieceChar);
	void PauseAllObjects();
	void DestroyAllX(TSubclassOf<class AActor> ActorClass);
	void WhiteTime();
	void BlackTime();
	void Countdown_to_Play();
	void InitCutscene(class ABP_Piece_C* Piece_1, class ABP_Piece_C* Piece_2);
	void EnablePiece(class ABP_Piece_C* Piece);
	void DisablePiece(class ABP_Piece_C* Piece);
	void ResetBoard();
	void EndCombat();
	void JudgePiece(class ABP_PieceChar_C* PieceChar);
	void AddEnPessantTargetClient(class ABP_Square_C* Square);
	void AddEnPessantTargetServer(class ABP_Square_C* Square);
	void InitBlack(class ABP_PieceChar_C* PieceChar);
	void CreatePieceChar(class ABP_Piece_C* Piece, class ABP_Player_C* Owner_0, bool Player1, class ABP_Square_C* Contested_Square);
	void InitiateCombat(bool WhiteUlt, class ABP_Piece_C* Player1Piece, class ABP_Piece_C* Player2Piece, class ABP_Square_C* ContestedSquare);
	void DeactivatePiecesForCombat(const TArray<class ABP_Piece_C*>& Array);
	void ActivatePiecesForCombat(const TArray<class ABP_Piece_C*>& Array);
	void SwitchTurns();
	void MovePieceToSquare(class ABP_Piece_C* Piece, class ABP_Square_C* Square, const bool PlayerMove, bool Animated, bool Queued);
	void SetPlayerPositions();
	void TurnBlacksBlack();
	void ReceiveTick(float DeltaSeconds);
	void ReceiveBeginPlay();
	void Populate_Custom_Board();
	void Populate();
	void MovePoint2__UpdateFunc();
	void MovePoint2__FinishedFunc();
	void MoveCamera2__UpdateFunc();
	void MoveCamera2__FinishedFunc();
	void MoveCamera1__UpdateFunc();
	void MoveCamera1__FinishedFunc();
	void GoToStartBlack__UpdateFunc();
	void GoToStartBlack__FinishedFunc();
	void GoToStart__UpdateFunc();
	void GoToStart__FinishedFunc();
	void GetSquareByIndex(const struct FVector2D& Index_0, class ABP_Square_C** Square);
	void DebugSquare(const struct FVector2D& NewParam);
	void Square_Has_Piece(const struct FVector2D& Index_0, bool* HasPiece);
	void CountPieces();
	void SpawnPieceChar(class ABP_Piece_C* Piece, class ABP_PieceChar_C** PieceChar);
	void ResetPieces(TArray<class ABP_Piece_C*>& Pieces);
	void DebugCombat(EPieceTypes Player_1, EPieceTypes Player_2);
	void GetPieceByType(EPieceTypes PieceType, TArray<class ABP_Piece_C*>& Pieces, class ABP_Piece_C** Piece);
	void FindClosestEnemyPieceToSquare(bool Black, class ABP_Piece_C* Piece, TArray<class ABP_Piece_C*>& ExcludeList, class ABP_Piece_C** Closest_Piece, float* Distance);
	void FindTwoClosestEnemyPieces(TArray<class ABP_Piece_C*>& ExcludeList, class ABP_Piece_C** White_Piece, class ABP_Piece_C** Black_Piece);
	void DisablePieces(TArray<class ABP_Piece_C*>& Pieces);
	void KingVerification(bool* WhiteWon, bool* BlackWon);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_ChessBoard_C">();
	}
	static class ABP_ChessBoard_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_ChessBoard_C>();
	}
};
static_assert(alignof(ABP_ChessBoard_C) == 0x000010, "Wrong alignment on ABP_ChessBoard_C");
static_assert(sizeof(ABP_ChessBoard_C) == 0x000460, "Wrong size on ABP_ChessBoard_C");
static_assert(offsetof(ABP_ChessBoard_C, UberGraphFrame) == 0x000230, "Member 'ABP_ChessBoard_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_ChessBoard_C, GameFocusChecker) == 0x000238, "Member 'ABP_ChessBoard_C::GameFocusChecker' has a wrong offset!");
static_assert(offsetof(ABP_ChessBoard_C, MovePieceSpline) == 0x000240, "Member 'ABP_ChessBoard_C::MovePieceSpline' has a wrong offset!");
static_assert(offsetof(ABP_ChessBoard_C, BlackPath) == 0x000248, "Member 'ABP_ChessBoard_C::BlackPath' has a wrong offset!");
static_assert(offsetof(ABP_ChessBoard_C, WhitePath) == 0x000250, "Member 'ABP_ChessBoard_C::WhitePath' has a wrong offset!");
static_assert(offsetof(ABP_ChessBoard_C, BlackStartingPos) == 0x000258, "Member 'ABP_ChessBoard_C::BlackStartingPos' has a wrong offset!");
static_assert(offsetof(ABP_ChessBoard_C, WhiteStartingPos) == 0x000260, "Member 'ABP_ChessBoard_C::WhiteStartingPos' has a wrong offset!");
static_assert(offsetof(ABP_ChessBoard_C, PlayerTwoPos) == 0x000268, "Member 'ABP_ChessBoard_C::PlayerTwoPos' has a wrong offset!");
static_assert(offsetof(ABP_ChessBoard_C, PlayerOnePos) == 0x000270, "Member 'ABP_ChessBoard_C::PlayerOnePos' has a wrong offset!");
static_assert(offsetof(ABP_ChessBoard_C, MovePoint2_Time_A472CB844B98E05A3C88658B8A3E6768) == 0x000278, "Member 'ABP_ChessBoard_C::MovePoint2_Time_A472CB844B98E05A3C88658B8A3E6768' has a wrong offset!");
static_assert(offsetof(ABP_ChessBoard_C, MovePoint2__Direction_A472CB844B98E05A3C88658B8A3E6768) == 0x00027C, "Member 'ABP_ChessBoard_C::MovePoint2__Direction_A472CB844B98E05A3C88658B8A3E6768' has a wrong offset!");
static_assert(offsetof(ABP_ChessBoard_C, MovePoint2) == 0x000280, "Member 'ABP_ChessBoard_C::MovePoint2' has a wrong offset!");
static_assert(offsetof(ABP_ChessBoard_C, MoveCamera2_time_0ED88E1A41E85F3F91BD7A97DA8AF1EB) == 0x000288, "Member 'ABP_ChessBoard_C::MoveCamera2_time_0ED88E1A41E85F3F91BD7A97DA8AF1EB' has a wrong offset!");
static_assert(offsetof(ABP_ChessBoard_C, MoveCamera2__Direction_0ED88E1A41E85F3F91BD7A97DA8AF1EB) == 0x00028C, "Member 'ABP_ChessBoard_C::MoveCamera2__Direction_0ED88E1A41E85F3F91BD7A97DA8AF1EB' has a wrong offset!");
static_assert(offsetof(ABP_ChessBoard_C, MoveCamera2) == 0x000290, "Member 'ABP_ChessBoard_C::MoveCamera2' has a wrong offset!");
static_assert(offsetof(ABP_ChessBoard_C, MoveCamera1_time_0748500A4F4B3B8CFB908AAEC6D968E9) == 0x000298, "Member 'ABP_ChessBoard_C::MoveCamera1_time_0748500A4F4B3B8CFB908AAEC6D968E9' has a wrong offset!");
static_assert(offsetof(ABP_ChessBoard_C, MoveCamera1__Direction_0748500A4F4B3B8CFB908AAEC6D968E9) == 0x00029C, "Member 'ABP_ChessBoard_C::MoveCamera1__Direction_0748500A4F4B3B8CFB908AAEC6D968E9' has a wrong offset!");
static_assert(offsetof(ABP_ChessBoard_C, MoveCamera1) == 0x0002A0, "Member 'ABP_ChessBoard_C::MoveCamera1' has a wrong offset!");
static_assert(offsetof(ABP_ChessBoard_C, GoToStartBlack_time_C3FBC7F64411B7BDCD50FFBDDC578640) == 0x0002A8, "Member 'ABP_ChessBoard_C::GoToStartBlack_time_C3FBC7F64411B7BDCD50FFBDDC578640' has a wrong offset!");
static_assert(offsetof(ABP_ChessBoard_C, GoToStartBlack__Direction_C3FBC7F64411B7BDCD50FFBDDC578640) == 0x0002AC, "Member 'ABP_ChessBoard_C::GoToStartBlack__Direction_C3FBC7F64411B7BDCD50FFBDDC578640' has a wrong offset!");
static_assert(offsetof(ABP_ChessBoard_C, GoToStartBlack) == 0x0002B0, "Member 'ABP_ChessBoard_C::GoToStartBlack' has a wrong offset!");
static_assert(offsetof(ABP_ChessBoard_C, GoToStart_time_66131BFF4A0077938210FFA09AC39BC7) == 0x0002B8, "Member 'ABP_ChessBoard_C::GoToStart_time_66131BFF4A0077938210FFA09AC39BC7' has a wrong offset!");
static_assert(offsetof(ABP_ChessBoard_C, GoToStart__Direction_66131BFF4A0077938210FFA09AC39BC7) == 0x0002BC, "Member 'ABP_ChessBoard_C::GoToStart__Direction_66131BFF4A0077938210FFA09AC39BC7' has a wrong offset!");
static_assert(offsetof(ABP_ChessBoard_C, GoToStart) == 0x0002C0, "Member 'ABP_ChessBoard_C::GoToStart' has a wrong offset!");
static_assert(offsetof(ABP_ChessBoard_C, Grid) == 0x0002C8, "Member 'ABP_ChessBoard_C::Grid' has a wrong offset!");
static_assert(offsetof(ABP_ChessBoard_C, PieceScale) == 0x0002D8, "Member 'ABP_ChessBoard_C::PieceScale' has a wrong offset!");
static_assert(offsetof(ABP_ChessBoard_C, WhitePieces) == 0x0002E8, "Member 'ABP_ChessBoard_C::WhitePieces' has a wrong offset!");
static_assert(offsetof(ABP_ChessBoard_C, PlayerOne) == 0x0002F8, "Member 'ABP_ChessBoard_C::PlayerOne' has a wrong offset!");
static_assert(offsetof(ABP_ChessBoard_C, BlackPieces) == 0x000300, "Member 'ABP_ChessBoard_C::BlackPieces' has a wrong offset!");
static_assert(offsetof(ABP_ChessBoard_C, PieceHeight) == 0x000310, "Member 'ABP_ChessBoard_C::PieceHeight' has a wrong offset!");
static_assert(offsetof(ABP_ChessBoard_C, PlayerTwo) == 0x000318, "Member 'ABP_ChessBoard_C::PlayerTwo' has a wrong offset!");
static_assert(offsetof(ABP_ChessBoard_C, WhiteTurn) == 0x000320, "Member 'ABP_ChessBoard_C::WhiteTurn' has a wrong offset!");
static_assert(offsetof(ABP_ChessBoard_C, BlackTurn) == 0x000321, "Member 'ABP_ChessBoard_C::BlackTurn' has a wrong offset!");
static_assert(offsetof(ABP_ChessBoard_C, PieceCharTemp) == 0x000328, "Member 'ABP_ChessBoard_C::PieceCharTemp' has a wrong offset!");
static_assert(offsetof(ABP_ChessBoard_C, EnPessantTarget) == 0x000330, "Member 'ABP_ChessBoard_C::EnPessantTarget' has a wrong offset!");
static_assert(offsetof(ABP_ChessBoard_C, PieceChar1) == 0x000338, "Member 'ABP_ChessBoard_C::PieceChar1' has a wrong offset!");
static_assert(offsetof(ABP_ChessBoard_C, PieceChar2) == 0x000340, "Member 'ABP_ChessBoard_C::PieceChar2' has a wrong offset!");
static_assert(offsetof(ABP_ChessBoard_C, VsCutscene) == 0x000348, "Member 'ABP_ChessBoard_C::VsCutscene' has a wrong offset!");
static_assert(offsetof(ABP_ChessBoard_C, startTimer) == 0x000350, "Member 'ABP_ChessBoard_C::startTimer' has a wrong offset!");
static_assert(offsetof(ABP_ChessBoard_C, TimeUntilStart) == 0x000354, "Member 'ABP_ChessBoard_C::TimeUntilStart' has a wrong offset!");
static_assert(offsetof(ABP_ChessBoard_C, CountdownTimer) == 0x000358, "Member 'ABP_ChessBoard_C::CountdownTimer' has a wrong offset!");
static_assert(offsetof(ABP_ChessBoard_C, UnlockAbilitiesDelay) == 0x000360, "Member 'ABP_ChessBoard_C::UnlockAbilitiesDelay' has a wrong offset!");
static_assert(offsetof(ABP_ChessBoard_C, Losers) == 0x000368, "Member 'ABP_ChessBoard_C::Losers' has a wrong offset!");
static_assert(offsetof(ABP_ChessBoard_C, CameraStart1) == 0x000380, "Member 'ABP_ChessBoard_C::CameraStart1' has a wrong offset!");
static_assert(offsetof(ABP_ChessBoard_C, CameraStart2) == 0x0003B0, "Member 'ABP_ChessBoard_C::CameraStart2' has a wrong offset!");
static_assert(offsetof(ABP_ChessBoard_C, EndingCombat) == 0x0003E0, "Member 'ABP_ChessBoard_C::EndingCombat' has a wrong offset!");
static_assert(offsetof(ABP_ChessBoard_C, NobodyTurn) == 0x0003E1, "Member 'ABP_ChessBoard_C::NobodyTurn' has a wrong offset!");
static_assert(offsetof(ABP_ChessBoard_C, Singleplayer) == 0x0003E2, "Member 'ABP_ChessBoard_C::Singleplayer' has a wrong offset!");
static_assert(offsetof(ABP_ChessBoard_C, InCombat) == 0x0003E3, "Member 'ABP_ChessBoard_C::InCombat' has a wrong offset!");
static_assert(offsetof(ABP_ChessBoard_C, MusicPlayer) == 0x0003E8, "Member 'ABP_ChessBoard_C::MusicPlayer' has a wrong offset!");
static_assert(offsetof(ABP_ChessBoard_C, GameOverFlag) == 0x0003F0, "Member 'ABP_ChessBoard_C::GameOverFlag' has a wrong offset!");
static_assert(offsetof(ABP_ChessBoard_C, BlackWin) == 0x0003F1, "Member 'ABP_ChessBoard_C::BlackWin' has a wrong offset!");
static_assert(offsetof(ABP_ChessBoard_C, isDefaultBoard) == 0x0003F2, "Member 'ABP_ChessBoard_C::isDefaultBoard' has a wrong offset!");
static_assert(offsetof(ABP_ChessBoard_C, LocalMultiplayer) == 0x0003F3, "Member 'ABP_ChessBoard_C::LocalMultiplayer' has a wrong offset!");
static_assert(offsetof(ABP_ChessBoard_C, CombatEnded) == 0x0003F8, "Member 'ABP_ChessBoard_C::CombatEnded' has a wrong offset!");
static_assert(offsetof(ABP_ChessBoard_C, CombatStarted) == 0x000408, "Member 'ABP_ChessBoard_C::CombatStarted' has a wrong offset!");
static_assert(offsetof(ABP_ChessBoard_C, CastlingKing) == 0x000418, "Member 'ABP_ChessBoard_C::CastlingKing' has a wrong offset!");
static_assert(offsetof(ABP_ChessBoard_C, MoveQueue) == 0x000428, "Member 'ABP_ChessBoard_C::MoveQueue' has a wrong offset!");
static_assert(offsetof(ABP_ChessBoard_C, NextMove) == 0x000438, "Member 'ABP_ChessBoard_C::NextMove' has a wrong offset!");
static_assert(offsetof(ABP_ChessBoard_C, WhiteKingCount) == 0x000448, "Member 'ABP_ChessBoard_C::WhiteKingCount' has a wrong offset!");
static_assert(offsetof(ABP_ChessBoard_C, BlackKingCount) == 0x00044C, "Member 'ABP_ChessBoard_C::BlackKingCount' has a wrong offset!");
static_assert(offsetof(ABP_ChessBoard_C, TieFlag) == 0x000450, "Member 'ABP_ChessBoard_C::TieFlag' has a wrong offset!");
static_assert(offsetof(ABP_ChessBoard_C, WhiteStartedWithKings) == 0x000451, "Member 'ABP_ChessBoard_C::WhiteStartedWithKings' has a wrong offset!");
static_assert(offsetof(ABP_ChessBoard_C, BlackStartedWithKings) == 0x000452, "Member 'ABP_ChessBoard_C::BlackStartedWithKings' has a wrong offset!");
static_assert(offsetof(ABP_ChessBoard_C, BSideDefault) == 0x000453, "Member 'ABP_ChessBoard_C::BSideDefault' has a wrong offset!");

}

