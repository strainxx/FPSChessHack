#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_ChessBoard

#include "Basic.hpp"

#include "BP_ChessBoard_classes.hpp"
#include "BP_ChessBoard_parameters.hpp"


namespace SDK
{

// Function BP_ChessBoard.BP_ChessBoard_C.ExecuteUbergraph_BP_ChessBoard
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_ChessBoard_C::ExecuteUbergraph_BP_ChessBoard(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ChessBoard_C", "ExecuteUbergraph_BP_ChessBoard");

	Params::BP_ChessBoard_C_ExecuteUbergraph_BP_ChessBoard Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_ChessBoard.BP_ChessBoard_C.EnablePieceInvisible
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_Piece_C*                      Piece                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_ChessBoard_C::EnablePieceInvisible(class ABP_Piece_C* Piece)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ChessBoard_C", "EnablePieceInvisible");

	Params::BP_ChessBoard_C_EnablePieceInvisible Parms{};

	Parms.Piece = Piece;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_ChessBoard.BP_ChessBoard_C.EndGameIfOver
// (BlueprintCallable, BlueprintEvent)

void ABP_ChessBoard_C::EndGameIfOver()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ChessBoard_C", "EndGameIfOver");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_ChessBoard.BP_ChessBoard_C.EndGameIfNoKings
// (BlueprintCallable, BlueprintEvent)

void ABP_ChessBoard_C::EndGameIfNoKings()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ChessBoard_C", "EndGameIfNoKings");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_ChessBoard.BP_ChessBoard_C.SendMessageToPlayersCombat
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FText                             Message                                                (BlueprintVisible, BlueprintReadOnly, Parm)
// bool                                    Player1                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_ChessBoard_C::SendMessageToPlayersCombat(const class FText& Message, bool Player1)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ChessBoard_C", "SendMessageToPlayersCombat");

	Params::BP_ChessBoard_C_SendMessageToPlayersCombat Parms{};

	Parms.Message = std::move(Message);
	Parms.Player1 = Player1;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_ChessBoard.BP_ChessBoard_C.SendMessageToPlayers
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FText                             Message                                                (BlueprintVisible, BlueprintReadOnly, Parm)
// bool                                    Player1                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_ChessBoard_C::SendMessageToPlayers(const class FText& Message, bool Player1)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ChessBoard_C", "SendMessageToPlayers");

	Params::BP_ChessBoard_C_SendMessageToPlayers Parms{};

	Parms.Message = std::move(Message);
	Parms.Player1 = Player1;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_ChessBoard.BP_ChessBoard_C.RestartData
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)

void ABP_ChessBoard_C::RestartData()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ChessBoard_C", "RestartData");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_ChessBoard.BP_ChessBoard_C.StopKillcam
// (Net, NetMulticast, BlueprintCallable, BlueprintEvent)

void ABP_ChessBoard_C::StopKillcam()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ChessBoard_C", "StopKillcam");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_ChessBoard.BP_ChessBoard_C.Reset
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)

void ABP_ChessBoard_C::Reset()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ChessBoard_C", "Reset");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_ChessBoard.BP_ChessBoard_C.Set In Combat Multi
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    InCombat_0                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_ChessBoard_C::Set_In_Combat_Multi(bool InCombat_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ChessBoard_C", "Set In Combat Multi");

	Params::BP_ChessBoard_C_Set_In_Combat_Multi Parms{};

	Parms.InCombat_0 = InCombat_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_ChessBoard.BP_ChessBoard_C.Enqueue Move
// (Net, NetMulticast, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_Piece_C*                      Piece                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class ABP_Square_C*                     Square                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_ChessBoard_C::Enqueue_Move(class ABP_Piece_C* Piece, class ABP_Square_C* Square)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ChessBoard_C", "Enqueue Move");

	Params::BP_ChessBoard_C_Enqueue_Move Parms{};

	Parms.Piece = Piece;
	Parms.Square = Square;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_ChessBoard.BP_ChessBoard_C.MoveToMovepointMulti
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_Square_C*                     Square                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class ABP_Piece_C*                      Piece                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_ChessBoard_C::MoveToMovepointMulti(class ABP_Square_C* Square, class ABP_Piece_C* Piece)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ChessBoard_C", "MoveToMovepointMulti");

	Params::BP_ChessBoard_C_MoveToMovepointMulti Parms{};

	Parms.Square = Square;
	Parms.Piece = Piece;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_ChessBoard.BP_ChessBoard_C.DispatchStartEvent
// (Net, NetMulticast, BlueprintCallable, BlueprintEvent)

void ABP_ChessBoard_C::DispatchStartEvent()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ChessBoard_C", "DispatchStartEvent");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_ChessBoard.BP_ChessBoard_C.WinnerSequence
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)

void ABP_ChessBoard_C::WinnerSequence()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ChessBoard_C", "WinnerSequence");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_ChessBoard.BP_ChessBoard_C.RecordBlackness
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)

void ABP_ChessBoard_C::RecordBlackness()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ChessBoard_C", "RecordBlackness");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_ChessBoard.BP_ChessBoard_C.CleanLocal
// (BlueprintCallable, BlueprintEvent)

void ABP_ChessBoard_C::CleanLocal()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ChessBoard_C", "CleanLocal");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_ChessBoard.BP_ChessBoard_C.ClearController
// (BlueprintCallable, BlueprintEvent)

void ABP_ChessBoard_C::ClearController()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ChessBoard_C", "ClearController");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_ChessBoard.BP_ChessBoard_C.EnableAllPieces
// (BlueprintCallable, BlueprintEvent)

void ABP_ChessBoard_C::EnableAllPieces()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ChessBoard_C", "EnableAllPieces");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_ChessBoard.BP_ChessBoard_C.StopRecord
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)

void ABP_ChessBoard_C::StopRecord()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ChessBoard_C", "StopRecord");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_ChessBoard.BP_ChessBoard_C.DisablePieceLocal
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_Piece_C*                      Piece                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_ChessBoard_C::DisablePieceLocal(class ABP_Piece_C* Piece)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ChessBoard_C", "DisablePieceLocal");

	Params::BP_ChessBoard_C_DisablePieceLocal Parms{};

	Parms.Piece = Piece;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_ChessBoard.BP_ChessBoard_C.SetProtagonistClient
// (Net, NetClient, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UKillcamRecorder_C*               Target                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)

void ABP_ChessBoard_C::SetProtagonistClient(class UKillcamRecorder_C* Target)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ChessBoard_C", "SetProtagonistClient");

	Params::BP_ChessBoard_C_SetProtagonistClient Parms{};

	Parms.Target = Target;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_ChessBoard.BP_ChessBoard_C.Set Protagonist Multi
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UKillcamRecorder_C*               Target                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)

void ABP_ChessBoard_C::Set_Protagonist_Multi(class UKillcamRecorder_C* Target)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ChessBoard_C", "Set Protagonist Multi");

	Params::BP_ChessBoard_C_Set_Protagonist_Multi Parms{};

	Parms.Target = Target;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_ChessBoard.BP_ChessBoard_C.StartPlayingKillcam
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)

void ABP_ChessBoard_C::StartPlayingKillcam()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ChessBoard_C", "StartPlayingKillcam");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_ChessBoard.BP_ChessBoard_C.StartRecord
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)

void ABP_ChessBoard_C::StartRecord()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ChessBoard_C", "StartRecord");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_ChessBoard.BP_ChessBoard_C.CleanUp
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)

void ABP_ChessBoard_C::CleanUp()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ChessBoard_C", "CleanUp");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_ChessBoard.BP_ChessBoard_C.EndGame
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Black_Win                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_ChessBoard_C::EndGame(bool Black_Win)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ChessBoard_C", "EndGame");

	Params::BP_ChessBoard_C_EndGame Parms{};

	Parms.Black_Win = Black_Win;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_ChessBoard.BP_ChessBoard_C.SetMusicPosition
// (Net, NetMulticast, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    FPS                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_ChessBoard_C::SetMusicPosition(bool FPS)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ChessBoard_C", "SetMusicPosition");

	Params::BP_ChessBoard_C_SetMusicPosition Parms{};

	Parms.FPS = FPS;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_ChessBoard.BP_ChessBoard_C.SetNobodyTurnAll
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    NobodyTurn_0                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_ChessBoard_C::SetNobodyTurnAll(bool NobodyTurn_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ChessBoard_C", "SetNobodyTurnAll");

	Params::BP_ChessBoard_C_SetNobodyTurnAll Parms{};

	Parms.NobodyTurn_0 = NobodyTurn_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_ChessBoard.BP_ChessBoard_C.SetNobodyTurnMulti
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    NobodyTurn_0                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_ChessBoard_C::SetNobodyTurnMulti(bool NobodyTurn_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ChessBoard_C", "SetNobodyTurnMulti");

	Params::BP_ChessBoard_C_SetNobodyTurnMulti Parms{};

	Parms.NobodyTurn_0 = NobodyTurn_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_ChessBoard.BP_ChessBoard_C.SetNobodyTurnServer
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    NobodyTurn_0                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_ChessBoard_C::SetNobodyTurnServer(bool NobodyTurn_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ChessBoard_C", "SetNobodyTurnServer");

	Params::BP_ChessBoard_C_SetNobodyTurnServer Parms{};

	Parms.NobodyTurn_0 = NobodyTurn_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_ChessBoard.BP_ChessBoard_C.SwitchTurnsMulti
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)

void ABP_ChessBoard_C::SwitchTurnsMulti()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ChessBoard_C", "SwitchTurnsMulti");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_ChessBoard.BP_ChessBoard_C.SwitchTurnsServer
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)

void ABP_ChessBoard_C::SwitchTurnsServer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ChessBoard_C", "SwitchTurnsServer");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_ChessBoard.BP_ChessBoard_C.SwitchTurnsAll
// (BlueprintCallable, BlueprintEvent)

void ABP_ChessBoard_C::SwitchTurnsAll()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ChessBoard_C", "SwitchTurnsAll");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_ChessBoard.BP_ChessBoard_C.InitializePiece
// (Net, NetMulticast, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_Piece_C*                      Piece                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class ABP_Square_C*                     Square                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Black                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    BSide                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_ChessBoard_C::InitializePiece(class ABP_Piece_C* Piece, class ABP_Square_C* Square, bool Black, bool BSide)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ChessBoard_C", "InitializePiece");

	Params::BP_ChessBoard_C_InitializePiece Parms{};

	Parms.Piece = Piece;
	Parms.Square = Square;
	Parms.Black = Black;
	Parms.BSide = BSide;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_ChessBoard.BP_ChessBoard_C.TurnPieceBlackMulti
// (Net, NetMulticast, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_Piece_C*                      Piece                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_ChessBoard_C::TurnPieceBlackMulti(class ABP_Piece_C* Piece)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ChessBoard_C", "TurnPieceBlackMulti");

	Params::BP_ChessBoard_C_TurnPieceBlackMulti Parms{};

	Parms.Piece = Piece;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_ChessBoard.BP_ChessBoard_C.SetNobodyTurn
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    NobodyTurn_0                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_ChessBoard_C::SetNobodyTurn(bool NobodyTurn_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ChessBoard_C", "SetNobodyTurn");

	Params::BP_ChessBoard_C_SetNobodyTurn Parms{};

	Parms.NobodyTurn_0 = NobodyTurn_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_ChessBoard.BP_ChessBoard_C.MoveToMovepoint
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_Square_C*                     Square                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class ABP_Piece_C*                      Piece                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_ChessBoard_C::MoveToMovepoint(class ABP_Square_C* Square, class ABP_Piece_C* Piece)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ChessBoard_C", "MoveToMovepoint");

	Params::BP_ChessBoard_C_MoveToMovepoint Parms{};

	Parms.Square = Square;
	Parms.Piece = Piece;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_ChessBoard.BP_ChessBoard_C.LerpCamerasToTransform
// (HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FTransform                       Transform                                              (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor)
// float                                   Time                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_ChessBoard_C::LerpCamerasToTransform(const struct FTransform& Transform, float Time)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ChessBoard_C", "LerpCamerasToTransform");

	Params::BP_ChessBoard_C_LerpCamerasToTransform Parms{};

	Parms.Transform = std::move(Transform);
	Parms.Time = Time;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_ChessBoard.BP_ChessBoard_C.CamPiece
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_PieceChar_C*                  PieceChar                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_ChessBoard_C::CamPiece(class ABP_PieceChar_C* PieceChar)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ChessBoard_C", "CamPiece");

	Params::BP_ChessBoard_C_CamPiece Parms{};

	Parms.PieceChar = PieceChar;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_ChessBoard.BP_ChessBoard_C.PauseAllObjects
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)

void ABP_ChessBoard_C::PauseAllObjects()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ChessBoard_C", "PauseAllObjects");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_ChessBoard.BP_ChessBoard_C.DestroyAllX
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// TSubclassOf<class AActor>               ActorClass                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)

void ABP_ChessBoard_C::DestroyAllX(TSubclassOf<class AActor> ActorClass)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ChessBoard_C", "DestroyAllX");

	Params::BP_ChessBoard_C_DestroyAllX Parms{};

	Parms.ActorClass = ActorClass;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_ChessBoard.BP_ChessBoard_C.WhiteTime
// (Net, NetMulticast, BlueprintCallable, BlueprintEvent)

void ABP_ChessBoard_C::WhiteTime()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ChessBoard_C", "WhiteTime");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_ChessBoard.BP_ChessBoard_C.BlackTime
// (Net, NetMulticast, BlueprintCallable, BlueprintEvent)

void ABP_ChessBoard_C::BlackTime()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ChessBoard_C", "BlackTime");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_ChessBoard.BP_ChessBoard_C.Countdown to Play
// (BlueprintCallable, BlueprintEvent)

void ABP_ChessBoard_C::Countdown_to_Play()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ChessBoard_C", "Countdown to Play");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_ChessBoard.BP_ChessBoard_C.InitCutscene
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_Piece_C*                      Piece_1                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class ABP_Piece_C*                      Piece_2                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_ChessBoard_C::InitCutscene(class ABP_Piece_C* Piece_1, class ABP_Piece_C* Piece_2)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ChessBoard_C", "InitCutscene");

	Params::BP_ChessBoard_C_InitCutscene Parms{};

	Parms.Piece_1 = Piece_1;
	Parms.Piece_2 = Piece_2;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_ChessBoard.BP_ChessBoard_C.EnablePiece
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_Piece_C*                      Piece                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_ChessBoard_C::EnablePiece(class ABP_Piece_C* Piece)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ChessBoard_C", "EnablePiece");

	Params::BP_ChessBoard_C_EnablePiece Parms{};

	Parms.Piece = Piece;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_ChessBoard.BP_ChessBoard_C.DisablePiece
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_Piece_C*                      Piece                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_ChessBoard_C::DisablePiece(class ABP_Piece_C* Piece)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ChessBoard_C", "DisablePiece");

	Params::BP_ChessBoard_C_DisablePiece Parms{};

	Parms.Piece = Piece;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_ChessBoard.BP_ChessBoard_C.ResetBoard
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)

void ABP_ChessBoard_C::ResetBoard()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ChessBoard_C", "ResetBoard");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_ChessBoard.BP_ChessBoard_C.EndCombat
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)

void ABP_ChessBoard_C::EndCombat()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ChessBoard_C", "EndCombat");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_ChessBoard.BP_ChessBoard_C.JudgePiece
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_PieceChar_C*                  PieceChar                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_ChessBoard_C::JudgePiece(class ABP_PieceChar_C* PieceChar)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ChessBoard_C", "JudgePiece");

	Params::BP_ChessBoard_C_JudgePiece Parms{};

	Parms.PieceChar = PieceChar;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_ChessBoard.BP_ChessBoard_C.AddEnPessantTargetClient
// (Net, NetReliable, NetClient, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_Square_C*                     Square                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_ChessBoard_C::AddEnPessantTargetClient(class ABP_Square_C* Square)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ChessBoard_C", "AddEnPessantTargetClient");

	Params::BP_ChessBoard_C_AddEnPessantTargetClient Parms{};

	Parms.Square = Square;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_ChessBoard.BP_ChessBoard_C.AddEnPessantTargetServer
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_Square_C*                     Square                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_ChessBoard_C::AddEnPessantTargetServer(class ABP_Square_C* Square)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ChessBoard_C", "AddEnPessantTargetServer");

	Params::BP_ChessBoard_C_AddEnPessantTargetServer Parms{};

	Parms.Square = Square;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_ChessBoard.BP_ChessBoard_C.InitBlack
// (Net, NetMulticast, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_PieceChar_C*                  PieceChar                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_ChessBoard_C::InitBlack(class ABP_PieceChar_C* PieceChar)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ChessBoard_C", "InitBlack");

	Params::BP_ChessBoard_C_InitBlack Parms{};

	Parms.PieceChar = PieceChar;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_ChessBoard.BP_ChessBoard_C.CreatePieceChar
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_Piece_C*                      Piece                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class ABP_Player_C*                     Owner_0                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Player1                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class ABP_Square_C*                     Contested_Square                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_ChessBoard_C::CreatePieceChar(class ABP_Piece_C* Piece, class ABP_Player_C* Owner_0, bool Player1, class ABP_Square_C* Contested_Square)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ChessBoard_C", "CreatePieceChar");

	Params::BP_ChessBoard_C_CreatePieceChar Parms{};

	Parms.Piece = Piece;
	Parms.Owner_0 = Owner_0;
	Parms.Player1 = Player1;
	Parms.Contested_Square = Contested_Square;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_ChessBoard.BP_ChessBoard_C.InitiateCombat
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    WhiteUlt                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class ABP_Piece_C*                      Player1Piece                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class ABP_Piece_C*                      Player2Piece                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class ABP_Square_C*                     ContestedSquare                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_ChessBoard_C::InitiateCombat(bool WhiteUlt, class ABP_Piece_C* Player1Piece, class ABP_Piece_C* Player2Piece, class ABP_Square_C* ContestedSquare)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ChessBoard_C", "InitiateCombat");

	Params::BP_ChessBoard_C_InitiateCombat Parms{};

	Parms.WhiteUlt = WhiteUlt;
	Parms.Player1Piece = Player1Piece;
	Parms.Player2Piece = Player2Piece;
	Parms.ContestedSquare = ContestedSquare;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_ChessBoard.BP_ChessBoard_C.DeactivatePiecesForCombat
// (Net, NetReliable, NetMulticast, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class ABP_Piece_C*>              Array                                                  (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)

void ABP_ChessBoard_C::DeactivatePiecesForCombat(const TArray<class ABP_Piece_C*>& Array)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ChessBoard_C", "DeactivatePiecesForCombat");

	Params::BP_ChessBoard_C_DeactivatePiecesForCombat Parms{};

	Parms.Array = std::move(Array);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_ChessBoard.BP_ChessBoard_C.ActivatePiecesForCombat
// (Net, NetReliable, NetMulticast, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class ABP_Piece_C*>              Array                                                  (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)

void ABP_ChessBoard_C::ActivatePiecesForCombat(const TArray<class ABP_Piece_C*>& Array)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ChessBoard_C", "ActivatePiecesForCombat");

	Params::BP_ChessBoard_C_ActivatePiecesForCombat Parms{};

	Parms.Array = std::move(Array);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_ChessBoard.BP_ChessBoard_C.SwitchTurns
// (BlueprintCallable, BlueprintEvent)

void ABP_ChessBoard_C::SwitchTurns()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ChessBoard_C", "SwitchTurns");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_ChessBoard.BP_ChessBoard_C.MovePieceToSquare
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_Piece_C*                      Piece                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class ABP_Square_C*                     Square                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    PlayerMove                                             (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    Animated                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    Queued                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_ChessBoard_C::MovePieceToSquare(class ABP_Piece_C* Piece, class ABP_Square_C* Square, const bool PlayerMove, bool Animated, bool Queued)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ChessBoard_C", "MovePieceToSquare");

	Params::BP_ChessBoard_C_MovePieceToSquare Parms{};

	Parms.Piece = Piece;
	Parms.Square = Square;
	Parms.PlayerMove = PlayerMove;
	Parms.Animated = Animated;
	Parms.Queued = Queued;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_ChessBoard.BP_ChessBoard_C.SetPlayerPositions
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)

void ABP_ChessBoard_C::SetPlayerPositions()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ChessBoard_C", "SetPlayerPositions");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_ChessBoard.BP_ChessBoard_C.TurnBlacksBlack
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)

void ABP_ChessBoard_C::TurnBlacksBlack()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ChessBoard_C", "TurnBlacksBlack");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_ChessBoard.BP_ChessBoard_C.ReceiveTick
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_ChessBoard_C::ReceiveTick(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ChessBoard_C", "ReceiveTick");

	Params::BP_ChessBoard_C_ReceiveTick Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_ChessBoard.BP_ChessBoard_C.ReceiveBeginPlay
// (Event, Protected, BlueprintEvent)

void ABP_ChessBoard_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ChessBoard_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_ChessBoard.BP_ChessBoard_C.Populate Custom Board
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)

void ABP_ChessBoard_C::Populate_Custom_Board()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ChessBoard_C", "Populate Custom Board");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_ChessBoard.BP_ChessBoard_C.Populate
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)

void ABP_ChessBoard_C::Populate()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ChessBoard_C", "Populate");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_ChessBoard.BP_ChessBoard_C.MovePoint2__UpdateFunc
// (BlueprintEvent)

void ABP_ChessBoard_C::MovePoint2__UpdateFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ChessBoard_C", "MovePoint2__UpdateFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_ChessBoard.BP_ChessBoard_C.MovePoint2__FinishedFunc
// (BlueprintEvent)

void ABP_ChessBoard_C::MovePoint2__FinishedFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ChessBoard_C", "MovePoint2__FinishedFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_ChessBoard.BP_ChessBoard_C.MoveCamera2__UpdateFunc
// (BlueprintEvent)

void ABP_ChessBoard_C::MoveCamera2__UpdateFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ChessBoard_C", "MoveCamera2__UpdateFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_ChessBoard.BP_ChessBoard_C.MoveCamera2__FinishedFunc
// (BlueprintEvent)

void ABP_ChessBoard_C::MoveCamera2__FinishedFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ChessBoard_C", "MoveCamera2__FinishedFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_ChessBoard.BP_ChessBoard_C.MoveCamera1__UpdateFunc
// (BlueprintEvent)

void ABP_ChessBoard_C::MoveCamera1__UpdateFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ChessBoard_C", "MoveCamera1__UpdateFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_ChessBoard.BP_ChessBoard_C.MoveCamera1__FinishedFunc
// (BlueprintEvent)

void ABP_ChessBoard_C::MoveCamera1__FinishedFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ChessBoard_C", "MoveCamera1__FinishedFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_ChessBoard.BP_ChessBoard_C.GoToStartBlack__UpdateFunc
// (BlueprintEvent)

void ABP_ChessBoard_C::GoToStartBlack__UpdateFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ChessBoard_C", "GoToStartBlack__UpdateFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_ChessBoard.BP_ChessBoard_C.GoToStartBlack__FinishedFunc
// (BlueprintEvent)

void ABP_ChessBoard_C::GoToStartBlack__FinishedFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ChessBoard_C", "GoToStartBlack__FinishedFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_ChessBoard.BP_ChessBoard_C.GoToStart__UpdateFunc
// (BlueprintEvent)

void ABP_ChessBoard_C::GoToStart__UpdateFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ChessBoard_C", "GoToStart__UpdateFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_ChessBoard.BP_ChessBoard_C.GoToStart__FinishedFunc
// (BlueprintEvent)

void ABP_ChessBoard_C::GoToStart__FinishedFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ChessBoard_C", "GoToStart__FinishedFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_ChessBoard.BP_ChessBoard_C.GetSquareByIndex
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector2D                        Index_0                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class ABP_Square_C*                     Square                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_ChessBoard_C::GetSquareByIndex(const struct FVector2D& Index_0, class ABP_Square_C** Square)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ChessBoard_C", "GetSquareByIndex");

	Params::BP_ChessBoard_C_GetSquareByIndex Parms{};

	Parms.Index_0 = std::move(Index_0);

	UObject::ProcessEvent(Func, &Parms);

	if (Square != nullptr)
		*Square = Parms.Square;
}


// Function BP_ChessBoard.BP_ChessBoard_C.DebugSquare
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector2D                        NewParam                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_ChessBoard_C::DebugSquare(const struct FVector2D& NewParam)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ChessBoard_C", "DebugSquare");

	Params::BP_ChessBoard_C_DebugSquare Parms{};

	Parms.NewParam = std::move(NewParam);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_ChessBoard.BP_ChessBoard_C.Square Has Piece
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector2D                        Index_0                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    HasPiece                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_ChessBoard_C::Square_Has_Piece(const struct FVector2D& Index_0, bool* HasPiece)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ChessBoard_C", "Square Has Piece");

	Params::BP_ChessBoard_C_Square_Has_Piece Parms{};

	Parms.Index_0 = std::move(Index_0);

	UObject::ProcessEvent(Func, &Parms);

	if (HasPiece != nullptr)
		*HasPiece = Parms.HasPiece;
}


// Function BP_ChessBoard.BP_ChessBoard_C.CountPieces
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_ChessBoard_C::CountPieces()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ChessBoard_C", "CountPieces");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_ChessBoard.BP_ChessBoard_C.SpawnPieceChar
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_Piece_C*                      Piece                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class ABP_PieceChar_C*                  PieceChar                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_ChessBoard_C::SpawnPieceChar(class ABP_Piece_C* Piece, class ABP_PieceChar_C** PieceChar)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ChessBoard_C", "SpawnPieceChar");

	Params::BP_ChessBoard_C_SpawnPieceChar Parms{};

	Parms.Piece = Piece;

	UObject::ProcessEvent(Func, &Parms);

	if (PieceChar != nullptr)
		*PieceChar = Parms.PieceChar;
}


// Function BP_ChessBoard.BP_ChessBoard_C.ResetPieces
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class ABP_Piece_C*>              Pieces                                                 (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)

void ABP_ChessBoard_C::ResetPieces(TArray<class ABP_Piece_C*>& Pieces)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ChessBoard_C", "ResetPieces");

	Params::BP_ChessBoard_C_ResetPieces Parms{};

	Parms.Pieces = std::move(Pieces);

	UObject::ProcessEvent(Func, &Parms);

	Pieces = std::move(Parms.Pieces);
}


// Function BP_ChessBoard.BP_ChessBoard_C.DebugCombat
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EPieceTypes                             Player_1                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EPieceTypes                             Player_2                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_ChessBoard_C::DebugCombat(EPieceTypes Player_1, EPieceTypes Player_2)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ChessBoard_C", "DebugCombat");

	Params::BP_ChessBoard_C_DebugCombat Parms{};

	Parms.Player_1 = Player_1;
	Parms.Player_2 = Player_2;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_ChessBoard.BP_ChessBoard_C.GetPieceByType
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// EPieceTypes                             PieceType                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<class ABP_Piece_C*>              Pieces                                                 (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class ABP_Piece_C*                      Piece                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_ChessBoard_C::GetPieceByType(EPieceTypes PieceType, TArray<class ABP_Piece_C*>& Pieces, class ABP_Piece_C** Piece)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ChessBoard_C", "GetPieceByType");

	Params::BP_ChessBoard_C_GetPieceByType Parms{};

	Parms.PieceType = PieceType;
	Parms.Pieces = std::move(Pieces);

	UObject::ProcessEvent(Func, &Parms);

	Pieces = std::move(Parms.Pieces);

	if (Piece != nullptr)
		*Piece = Parms.Piece;
}


// Function BP_ChessBoard.BP_ChessBoard_C.FindClosestEnemyPieceToSquare
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Black                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class ABP_Piece_C*                      Piece                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<class ABP_Piece_C*>              ExcludeList                                            (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class ABP_Piece_C*                      Closest_Piece                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Distance                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_ChessBoard_C::FindClosestEnemyPieceToSquare(bool Black, class ABP_Piece_C* Piece, TArray<class ABP_Piece_C*>& ExcludeList, class ABP_Piece_C** Closest_Piece, float* Distance)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ChessBoard_C", "FindClosestEnemyPieceToSquare");

	Params::BP_ChessBoard_C_FindClosestEnemyPieceToSquare Parms{};

	Parms.Black = Black;
	Parms.Piece = Piece;
	Parms.ExcludeList = std::move(ExcludeList);

	UObject::ProcessEvent(Func, &Parms);

	ExcludeList = std::move(Parms.ExcludeList);

	if (Closest_Piece != nullptr)
		*Closest_Piece = Parms.Closest_Piece;

	if (Distance != nullptr)
		*Distance = Parms.Distance;
}


// Function BP_ChessBoard.BP_ChessBoard_C.FindTwoClosestEnemyPieces
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class ABP_Piece_C*>              ExcludeList                                            (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class ABP_Piece_C*                      White_Piece                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class ABP_Piece_C*                      Black_Piece                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_ChessBoard_C::FindTwoClosestEnemyPieces(TArray<class ABP_Piece_C*>& ExcludeList, class ABP_Piece_C** White_Piece, class ABP_Piece_C** Black_Piece)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ChessBoard_C", "FindTwoClosestEnemyPieces");

	Params::BP_ChessBoard_C_FindTwoClosestEnemyPieces Parms{};

	Parms.ExcludeList = std::move(ExcludeList);

	UObject::ProcessEvent(Func, &Parms);

	ExcludeList = std::move(Parms.ExcludeList);

	if (White_Piece != nullptr)
		*White_Piece = Parms.White_Piece;

	if (Black_Piece != nullptr)
		*Black_Piece = Parms.Black_Piece;
}


// Function BP_ChessBoard.BP_ChessBoard_C.DisablePieces
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class ABP_Piece_C*>              Pieces                                                 (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)

void ABP_ChessBoard_C::DisablePieces(TArray<class ABP_Piece_C*>& Pieces)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ChessBoard_C", "DisablePieces");

	Params::BP_ChessBoard_C_DisablePieces Parms{};

	Parms.Pieces = std::move(Pieces);

	UObject::ProcessEvent(Func, &Parms);

	Pieces = std::move(Parms.Pieces);
}


// Function BP_ChessBoard.BP_ChessBoard_C.KingVerification
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    WhiteWon                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    BlackWon                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_ChessBoard_C::KingVerification(bool* WhiteWon, bool* BlackWon)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ChessBoard_C", "KingVerification");

	Params::BP_ChessBoard_C_KingVerification Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (WhiteWon != nullptr)
		*WhiteWon = Parms.WhiteWon;

	if (BlackWon != nullptr)
		*BlackWon = Parms.BlackWon;
}

}

