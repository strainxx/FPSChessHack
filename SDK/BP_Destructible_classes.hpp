#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Destructible

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "Sounds_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_Destructible.BP_Destructible_C
// 0x0040 (0x0260 - 0x0220)
class ABP_Destructible_C : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0220(0x0008)(ZeroConstructor, Transient, DuplicateTransient, UObjectWrapper)
	class UKillcamRecorder_C*                     KillcamRecorder;                                   // 0x0228(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UDestructibleComponent*                 DestructibleMesh;                                  // 0x0230(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         Health;                                            // 0x0238(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CleanedUp;                                         // 0x023C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	ESounds                                       BreakSound;                                        // 0x023D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Broke;                                             // 0x023E(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_23F[0x1];                                      // 0x023F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Breakability;                                      // 0x0240(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RecordDestruction;                                 // 0x0244(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_245[0x3];                                      // 0x0245(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DestroyTimer;                                      // 0x0248(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_24C[0x4];                                      // 0x024C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(class ABP_Destructible_C* Destructible)> OnFatalDamage;                                     // 0x0250(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)

public:
	void ExecuteUbergraph_BP_Destructible(int32 EntryPoint);
	void DestroySelf();
	void Destroy();
	void InitAsReplayActor();
	void TakeDamage(float Amount, float ImpulseStrength);
	void ReceiveBeginPlay();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_Destructible_C">();
	}
	static class ABP_Destructible_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_Destructible_C>();
	}
};
static_assert(alignof(ABP_Destructible_C) == 0x000008, "Wrong alignment on ABP_Destructible_C");
static_assert(sizeof(ABP_Destructible_C) == 0x000260, "Wrong size on ABP_Destructible_C");
static_assert(offsetof(ABP_Destructible_C, UberGraphFrame) == 0x000220, "Member 'ABP_Destructible_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_Destructible_C, KillcamRecorder) == 0x000228, "Member 'ABP_Destructible_C::KillcamRecorder' has a wrong offset!");
static_assert(offsetof(ABP_Destructible_C, DestructibleMesh) == 0x000230, "Member 'ABP_Destructible_C::DestructibleMesh' has a wrong offset!");
static_assert(offsetof(ABP_Destructible_C, Health) == 0x000238, "Member 'ABP_Destructible_C::Health' has a wrong offset!");
static_assert(offsetof(ABP_Destructible_C, CleanedUp) == 0x00023C, "Member 'ABP_Destructible_C::CleanedUp' has a wrong offset!");
static_assert(offsetof(ABP_Destructible_C, BreakSound) == 0x00023D, "Member 'ABP_Destructible_C::BreakSound' has a wrong offset!");
static_assert(offsetof(ABP_Destructible_C, Broke) == 0x00023E, "Member 'ABP_Destructible_C::Broke' has a wrong offset!");
static_assert(offsetof(ABP_Destructible_C, Breakability) == 0x000240, "Member 'ABP_Destructible_C::Breakability' has a wrong offset!");
static_assert(offsetof(ABP_Destructible_C, RecordDestruction) == 0x000244, "Member 'ABP_Destructible_C::RecordDestruction' has a wrong offset!");
static_assert(offsetof(ABP_Destructible_C, DestroyTimer) == 0x000248, "Member 'ABP_Destructible_C::DestroyTimer' has a wrong offset!");
static_assert(offsetof(ABP_Destructible_C, OnFatalDamage) == 0x000250, "Member 'ABP_Destructible_C::OnFatalDamage' has a wrong offset!");

}

