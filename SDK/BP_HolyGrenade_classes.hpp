#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_HolyGrenade

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_HolyGrenade.BP_HolyGrenade_C
// 0x0068 (0x0288 - 0x0220)
class ABP_HolyGrenade_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0220(0x0008)(ZeroConstructor, Transient, DuplicateTransient, UObjectWrapper)
	class UKillcamRecorder_C*                     KillcamRecorder;                                   // 0x0228(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UNiagaraComponent*                      Trail;                                             // 0x0230(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Mesh;                                              // 0x0238(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       ExplosionSphere;                                   // 0x0240(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         ExplosionStrength;                                 // 0x0248(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	float                                         ExplosionZOverride;                                // 0x024C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         PieceMultiplier;                                   // 0x0250(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_254[0x4];                                      // 0x0254(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_PieceChar_C*                        OwningPiece;                                       // 0x0258(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	float                                         TimeBeforeHitOwner;                                // 0x0260(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CanHitOwner;                                       // 0x0264(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_265[0x3];                                      // 0x0265(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ExplosionDamage;                                   // 0x0268(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	bool                                          Primed;                                            // 0x026C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_26D[0x3];                                      // 0x026D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ExplosionScale;                                    // 0x0270(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_274[0x4];                                      // 0x0274(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         NoDamageList;                                      // 0x0278(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)

public:
	void ExecuteUbergraph_BP_HolyGrenade(int32 EntryPoint);
	void SpawnExplosionSystemAll(const struct FVector& Location);
	void ExplosionSystemMulti(const struct FVector& Location);
	void ExplosionSystemServer(const struct FVector& Location);
	void DestroySelf();
	void SpawnExplosionSystem(const struct FVector& Location);
	void BndEvt__BP_HolyGrenade_Mesh_K2Node_ComponentBoundEvent_1_ComponentHitSignature__DelegateSignature(class UPrimitiveComponent* HitComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, const struct FVector& NormalImpulse, const struct FHitResult& Hit);
	void BndEvt__BP_HolyGrenade_Mesh_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void EnableHitOwner();
	void ReceiveBeginPlay();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_HolyGrenade_C">();
	}
	static class ABP_HolyGrenade_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_HolyGrenade_C>();
	}
};
static_assert(alignof(ABP_HolyGrenade_C) == 0x000008, "Wrong alignment on ABP_HolyGrenade_C");
static_assert(sizeof(ABP_HolyGrenade_C) == 0x000288, "Wrong size on ABP_HolyGrenade_C");
static_assert(offsetof(ABP_HolyGrenade_C, UberGraphFrame) == 0x000220, "Member 'ABP_HolyGrenade_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_HolyGrenade_C, KillcamRecorder) == 0x000228, "Member 'ABP_HolyGrenade_C::KillcamRecorder' has a wrong offset!");
static_assert(offsetof(ABP_HolyGrenade_C, Trail) == 0x000230, "Member 'ABP_HolyGrenade_C::Trail' has a wrong offset!");
static_assert(offsetof(ABP_HolyGrenade_C, Mesh) == 0x000238, "Member 'ABP_HolyGrenade_C::Mesh' has a wrong offset!");
static_assert(offsetof(ABP_HolyGrenade_C, ExplosionSphere) == 0x000240, "Member 'ABP_HolyGrenade_C::ExplosionSphere' has a wrong offset!");
static_assert(offsetof(ABP_HolyGrenade_C, ExplosionStrength) == 0x000248, "Member 'ABP_HolyGrenade_C::ExplosionStrength' has a wrong offset!");
static_assert(offsetof(ABP_HolyGrenade_C, ExplosionZOverride) == 0x00024C, "Member 'ABP_HolyGrenade_C::ExplosionZOverride' has a wrong offset!");
static_assert(offsetof(ABP_HolyGrenade_C, PieceMultiplier) == 0x000250, "Member 'ABP_HolyGrenade_C::PieceMultiplier' has a wrong offset!");
static_assert(offsetof(ABP_HolyGrenade_C, OwningPiece) == 0x000258, "Member 'ABP_HolyGrenade_C::OwningPiece' has a wrong offset!");
static_assert(offsetof(ABP_HolyGrenade_C, TimeBeforeHitOwner) == 0x000260, "Member 'ABP_HolyGrenade_C::TimeBeforeHitOwner' has a wrong offset!");
static_assert(offsetof(ABP_HolyGrenade_C, CanHitOwner) == 0x000264, "Member 'ABP_HolyGrenade_C::CanHitOwner' has a wrong offset!");
static_assert(offsetof(ABP_HolyGrenade_C, ExplosionDamage) == 0x000268, "Member 'ABP_HolyGrenade_C::ExplosionDamage' has a wrong offset!");
static_assert(offsetof(ABP_HolyGrenade_C, Primed) == 0x00026C, "Member 'ABP_HolyGrenade_C::Primed' has a wrong offset!");
static_assert(offsetof(ABP_HolyGrenade_C, ExplosionScale) == 0x000270, "Member 'ABP_HolyGrenade_C::ExplosionScale' has a wrong offset!");
static_assert(offsetof(ABP_HolyGrenade_C, NoDamageList) == 0x000278, "Member 'ABP_HolyGrenade_C::NoDamageList' has a wrong offset!");

}

