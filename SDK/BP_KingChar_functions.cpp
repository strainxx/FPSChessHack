#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_KingChar

#include "Basic.hpp"

#include "BP_KingChar_classes.hpp"
#include "BP_KingChar_parameters.hpp"


namespace SDK
{

// Function BP_KingChar.BP_KingChar_C.ExecuteUbergraph_BP_KingChar
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_KingChar_C::ExecuteUbergraph_BP_KingChar(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_KingChar_C", "ExecuteUbergraph_BP_KingChar");

	Params::BP_KingChar_C_ExecuteUbergraph_BP_KingChar Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_KingChar.BP_KingChar_C.ForceSwing
// (BlueprintCallable, BlueprintEvent)

void ABP_KingChar_C::ForceSwing()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_KingChar_C", "ForceSwing");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_KingChar.BP_KingChar_C.CheckForHits
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class UPrimitiveComponent*              Component                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           Actor                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_KingChar_C::CheckForHits(class UPrimitiveComponent* Component, class AActor* Actor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_KingChar_C", "CheckForHits");

	Params::BP_KingChar_C_CheckForHits Parms{};

	Parms.Component = Component;
	Parms.Actor = Actor;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_KingChar.BP_KingChar_C.SwingPlayback
// (BlueprintCallable, BlueprintEvent)

void ABP_KingChar_C::SwingPlayback()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_KingChar_C", "SwingPlayback");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_KingChar.BP_KingChar_C.SwingingEvent
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Swinging_0                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_KingChar_C::SwingingEvent(bool Swinging_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_KingChar_C", "SwingingEvent");

	Params::BP_KingChar_C_SwingingEvent Parms{};

	Parms.Swinging_0 = Swinging_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_KingChar.BP_KingChar_C.SwingingServer
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Swinging_0                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_KingChar_C::SwingingServer(bool Swinging_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_KingChar_C", "SwingingServer");

	Params::BP_KingChar_C_SwingingServer Parms{};

	Parms.Swinging_0 = Swinging_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_KingChar.BP_KingChar_C.SwingingMulti
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Swinging_0                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_KingChar_C::SwingingMulti(bool Swinging_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_KingChar_C", "SwingingMulti");

	Params::BP_KingChar_C_SwingingMulti Parms{};

	Parms.Swinging_0 = Swinging_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_KingChar.BP_KingChar_C.SwingingAll
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Swinging_0                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_KingChar_C::SwingingAll(bool Swinging_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_KingChar_C", "SwingingAll");

	Params::BP_KingChar_C_SwingingAll Parms{};

	Parms.Swinging_0 = Swinging_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_KingChar.BP_KingChar_C.EnableSwingHitbox
// (BlueprintCallable, BlueprintEvent)

void ABP_KingChar_C::EnableSwingHitbox()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_KingChar_C", "EnableSwingHitbox");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_KingChar.BP_KingChar_C.SlamOver
// (BlueprintCallable, BlueprintEvent)

void ABP_KingChar_C::SlamOver()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_KingChar_C", "SlamOver");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_KingChar.BP_KingChar_C.EndSlamPlayback
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          Location                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_KingChar_C::EndSlamPlayback(const struct FVector& Location)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_KingChar_C", "EndSlamPlayback");

	Params::BP_KingChar_C_EndSlamPlayback Parms{};

	Parms.Location = std::move(Location);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_KingChar.BP_KingChar_C.StartSlamPlayback
// (BlueprintCallable, BlueprintEvent)

void ABP_KingChar_C::StartSlamPlayback()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_KingChar_C", "StartSlamPlayback");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_KingChar.BP_KingChar_C.PlaybackEndBeam
// (BlueprintCallable, BlueprintEvent)

void ABP_KingChar_C::PlaybackEndBeam()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_KingChar_C", "PlaybackEndBeam");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_KingChar.BP_KingChar_C.PlaybackStartBeam
// (BlueprintCallable, BlueprintEvent)

void ABP_KingChar_C::PlaybackStartBeam()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_KingChar_C", "PlaybackStartBeam");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_KingChar.BP_KingChar_C.UnswingPlayback
// (BlueprintCallable, BlueprintEvent)

void ABP_KingChar_C::UnswingPlayback()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_KingChar_C", "UnswingPlayback");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_KingChar.BP_KingChar_C.RecordUnswingServer
// (Net, NetServer, BlueprintCallable, BlueprintEvent)

void ABP_KingChar_C::RecordUnswingServer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_KingChar_C", "RecordUnswingServer");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_KingChar.BP_KingChar_C.RecordUnswingMulti
// (Net, NetMulticast, BlueprintCallable, BlueprintEvent)

void ABP_KingChar_C::RecordUnswingMulti()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_KingChar_C", "RecordUnswingMulti");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_KingChar.BP_KingChar_C.RecordUnswing
// (BlueprintCallable, BlueprintEvent)

void ABP_KingChar_C::RecordUnswing()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_KingChar_C", "RecordUnswing");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_KingChar.BP_KingChar_C.RecordSwingServer
// (Net, NetServer, BlueprintCallable, BlueprintEvent)

void ABP_KingChar_C::RecordSwingServer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_KingChar_C", "RecordSwingServer");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_KingChar.BP_KingChar_C.RecordSwingMulti
// (Net, NetMulticast, BlueprintCallable, BlueprintEvent)

void ABP_KingChar_C::RecordSwingMulti()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_KingChar_C", "RecordSwingMulti");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_KingChar.BP_KingChar_C.RecordSwing
// (BlueprintCallable, BlueprintEvent)

void ABP_KingChar_C::RecordSwing()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_KingChar_C", "RecordSwing");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_KingChar.BP_KingChar_C.DisableSlam
// (BlueprintCallable, BlueprintEvent)

void ABP_KingChar_C::DisableSlam()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_KingChar_C", "DisableSlam");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_KingChar.BP_KingChar_C.SlamAll
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          SlamPosition                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_KingChar_C::SlamAll(const struct FVector& SlamPosition)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_KingChar_C", "SlamAll");

	Params::BP_KingChar_C_SlamAll Parms{};

	Parms.SlamPosition = std::move(SlamPosition);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_KingChar.BP_KingChar_C.SlamServer
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          SlamPosition                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_KingChar_C::SlamServer(const struct FVector& SlamPosition)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_KingChar_C", "SlamServer");

	Params::BP_KingChar_C_SlamServer Parms{};

	Parms.SlamPosition = std::move(SlamPosition);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_KingChar.BP_KingChar_C.SlamMulti
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          SlamPosition                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_KingChar_C::SlamMulti(const struct FVector& SlamPosition)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_KingChar_C", "SlamMulti");

	Params::BP_KingChar_C_SlamMulti Parms{};

	Parms.SlamPosition = std::move(SlamPosition);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_KingChar.BP_KingChar_C.Slam
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          SlamPosition                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_KingChar_C::Slam(const struct FVector& SlamPosition)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_KingChar_C", "Slam");

	Params::BP_KingChar_C_Slam Parms{};

	Parms.SlamPosition = std::move(SlamPosition);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_KingChar.BP_KingChar_C.ProjectSlam
// (Net, NetClient, BlueprintCallable, BlueprintEvent)

void ABP_KingChar_C::ProjectSlam()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_KingChar_C", "ProjectSlam");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_KingChar.BP_KingChar_C.TrailBackward
// (Net, NetMulticast, BlueprintCallable, BlueprintEvent)

void ABP_KingChar_C::TrailBackward()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_KingChar_C", "TrailBackward");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_KingChar.BP_KingChar_C.TrailForward
// (Net, NetMulticast, BlueprintCallable, BlueprintEvent)

void ABP_KingChar_C::TrailForward()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_KingChar_C", "TrailForward");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_KingChar.BP_KingChar_C.BndEvt__BP_KingChar_Hitbox_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature
// (HasOutParams, BlueprintEvent)
// Parameters:
// class UPrimitiveComponent*              OverlappedComponent                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           OtherActor                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UPrimitiveComponent*              OtherComp                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   OtherBodyIndex                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bFromSweep                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FHitResult                       SweepResult                                            (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)

void ABP_KingChar_C::BndEvt__BP_KingChar_Hitbox_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_KingChar_C", "BndEvt__BP_KingChar_Hitbox_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature");

	Params::BP_KingChar_C_BndEvt__BP_KingChar_Hitbox_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature Parms{};

	Parms.OverlappedComponent = OverlappedComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.OtherBodyIndex = OtherBodyIndex;
	Parms.bFromSweep = bFromSweep;
	Parms.SweepResult = std::move(SweepResult);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_KingChar.BP_KingChar_C.TurnOffInvincible
// (BlueprintCallable, BlueprintEvent)

void ABP_KingChar_C::TurnOffInvincible()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_KingChar_C", "TurnOffInvincible");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_KingChar.BP_KingChar_C.TerminateBeamMulti
// (Net, NetMulticast, BlueprintCallable, BlueprintEvent)

void ABP_KingChar_C::TerminateBeamMulti()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_KingChar_C", "TerminateBeamMulti");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_KingChar.BP_KingChar_C.TerminateBeamAll
// (BlueprintCallable, BlueprintEvent)

void ABP_KingChar_C::TerminateBeamAll()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_KingChar_C", "TerminateBeamAll");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_KingChar.BP_KingChar_C.TerminateBeamServer
// (Net, NetServer, BlueprintCallable, BlueprintEvent)

void ABP_KingChar_C::TerminateBeamServer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_KingChar_C", "TerminateBeamServer");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_KingChar.BP_KingChar_C.TerminateBeam
// (BlueprintCallable, BlueprintEvent)

void ABP_KingChar_C::TerminateBeam()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_KingChar_C", "TerminateBeam");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_KingChar.BP_KingChar_C.FireBeam
// (BlueprintCallable, BlueprintEvent)

void ABP_KingChar_C::FireBeam()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_KingChar_C", "FireBeam");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_KingChar.BP_KingChar_C.DoneSwingingForward
// (BlueprintCallable, BlueprintEvent)

void ABP_KingChar_C::DoneSwingingForward()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_KingChar_C", "DoneSwingingForward");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_KingChar.BP_KingChar_C.SlamDown__UpdateFunc
// (BlueprintEvent)

void ABP_KingChar_C::SlamDown__UpdateFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_KingChar_C", "SlamDown__UpdateFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_KingChar.BP_KingChar_C.SlamDown__FinishedFunc
// (BlueprintEvent)

void ABP_KingChar_C::SlamDown__FinishedFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_KingChar_C", "SlamDown__FinishedFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_KingChar.BP_KingChar_C.SlamUp__UpdateFunc
// (BlueprintEvent)

void ABP_KingChar_C::SlamUp__UpdateFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_KingChar_C", "SlamUp__UpdateFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_KingChar.BP_KingChar_C.SlamUp__FinishedFunc
// (BlueprintEvent)

void ABP_KingChar_C::SlamUp__FinishedFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_KingChar_C", "SlamUp__FinishedFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_KingChar.BP_KingChar_C.FiringBeam__UpdateFunc
// (BlueprintEvent)

void ABP_KingChar_C::FiringBeam__UpdateFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_KingChar_C", "FiringBeam__UpdateFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_KingChar.BP_KingChar_C.FiringBeam__FinishedFunc
// (BlueprintEvent)

void ABP_KingChar_C::FiringBeam__FinishedFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_KingChar_C", "FiringBeam__FinishedFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_KingChar.BP_KingChar_C.SequenceEvent__ENTRYPOINTBP_KingChar_0
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_KingChar_C::SequenceEvent__ENTRYPOINTBP_KingChar_0()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_KingChar_C", "SequenceEvent__ENTRYPOINTBP_KingChar_0");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_KingChar.BP_KingChar_C.SequenceEvent__ENTRYPOINTBP_KingChar_1
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_KingChar_C::SequenceEvent__ENTRYPOINTBP_KingChar_1()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_KingChar_C", "SequenceEvent__ENTRYPOINTBP_KingChar_1");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_KingChar.BP_KingChar_C.Start Blocking
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)

void ABP_KingChar_C::Start_Blocking()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_KingChar_C", "Start Blocking");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_KingChar.BP_KingChar_C.StopAllPlaying
// (BlueprintCallable, BlueprintEvent)

void ABP_KingChar_C::StopAllPlaying()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_KingChar_C", "StopAllPlaying");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_KingChar.BP_KingChar_C.ReceiveTick
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_KingChar_C::ReceiveTick(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_KingChar_C", "ReceiveTick");

	Params::BP_KingChar_C_ReceiveTick Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_KingChar.BP_KingChar_C.ShootDirection
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          Direction                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_KingChar_C::ShootDirection(const struct FVector& Direction)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_KingChar_C", "ShootDirection");

	Params::BP_KingChar_C_ShootDirection Parms{};

	Parms.Direction = std::move(Direction);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_KingChar.BP_KingChar_C.MovementAbilityAll
// (BlueprintCallable, BlueprintEvent)

void ABP_KingChar_C::MovementAbilityAll()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_KingChar_C", "MovementAbilityAll");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_KingChar.BP_KingChar_C.ShootOverEvent
// (BlueprintCallable, BlueprintEvent)

void ABP_KingChar_C::ShootOverEvent()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_KingChar_C", "ShootOverEvent");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_KingChar.BP_KingChar_C.ReceiveBeginPlay
// (Event, Protected, BlueprintEvent)

void ABP_KingChar_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_KingChar_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_KingChar.BP_KingChar_C.MainAbility
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_KingChar_C::MainAbility()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_KingChar_C", "MainAbility");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_KingChar.BP_KingChar_C.DeathCleanup
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_KingChar_C::DeathCleanup()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_KingChar_C", "DeathCleanup");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_KingChar.BP_KingChar_C.MovementAbility
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_KingChar_C::MovementAbility()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_KingChar_C", "MovementAbility");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_KingChar.BP_KingChar_C.CantPlayAnimations
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    CantPlay                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_KingChar_C::CantPlayAnimations(bool* CantPlay)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_KingChar_C", "CantPlayAnimations");

	Params::BP_KingChar_C_CantPlayAnimations Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (CantPlay != nullptr)
		*CantPlay = Parms.CantPlay;
}

}

