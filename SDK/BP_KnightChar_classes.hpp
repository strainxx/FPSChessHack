#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_KnightChar

#include "Basic.hpp"

#include "BP_PieceChar_classes.hpp"
#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_KnightChar.BP_KnightChar_C
// 0x00E0 (0x07D0 - 0x06F0)
class ABP_KnightChar_C final : public ABP_PieceChar_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_BP_KnightChar_C;                    // 0x06F0(0x0008)(ZeroConstructor, Transient, DuplicateTransient, UObjectWrapper)
	class USceneComponent*                        ZeroTension;                                       // 0x06F8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	class USceneComponent*                        FullTension;                                       // 0x0700(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Arrow1;                                            // 0x0708(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	class USpringArmComponent*                    SpringArm2;                                        // 0x0710(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	class USceneComponent*                        FullTension1;                                      // 0x0718(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Arrow2;                                            // 0x0720(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	class USceneComponent*                        ZeroTension1;                                      // 0x0728(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	class USpringArmComponent*                    SpringArm1;                                        // 0x0730(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	class UNiagaraComponent*                      LTrail;                                            // 0x0738(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	class UNiagaraComponent*                      LAura;                                             // 0x0740(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	class UActorSequenceComponent*                KnightWalkAnimation;                               // 0x0748(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	class UNiagaraComponent*                      ChargeTrail;                                       // 0x0750(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	class USceneComponent*                        Scene_0;                                           // 0x0758(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	ETimelineDirection                            Charge__Direction_4137876A42AEB45C461A28B7E6293FB1; // 0x0760(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_761[0x7];                                      // 0x0761(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     Charge;                                            // 0x0768(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	bool                                          charging;                                          // 0x0770(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_771[0x3];                                      // 0x0771(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                chargeDir;                                         // 0x0774(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ChargeTime;                                        // 0x0780(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ChargeSpeed;                                       // 0x0784(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ChargeAccel;                                       // 0x0788(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DoneChargingSpeed;                                 // 0x078C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DoneAccel;                                         // 0x0790(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ChargeCollisionPower;                              // 0x0794(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ChargePieceMultiplier;                             // 0x0798(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         PlayerHitZOverride;                                // 0x079C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ChargeDamage;                                      // 0x07A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FullChargeArrowTime;                               // 0x07A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          PullingArrow;                                      // 0x07A8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7A9[0x3];                                      // 0x07A9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ArrowTimer;                                        // 0x07AC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ArrowMaxPower;                                     // 0x07B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CameraArrowAlpha;                                  // 0x07B4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ArrowMaxDamage;                                    // 0x07B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          LArrow;                                            // 0x07BC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7BD[0x3];                                      // 0x07BD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MinimumArrowPullTime;                              // 0x07C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_KnightChar(int32 EntryPoint);
	void SetMiniArrowLocation(const struct FVector& Location);
	void PullArrowMulti();
	void PullArrowServer();
	void ReleaseArrowServer();
	void ReleaseArrowMulti();
	void SetArrowLocationLocal(const struct FVector& Location);
	void TrailEndLocal();
	void TrailLocal();
	void RecordArrowRelease();
	void RecordArrowPull();
	void BndEvt__BP_KnightChar_CapsuleComponent_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void DeactivateTrail();
	void ActivateTrail();
	void ChargeClient(const struct FVector& Direction);
	void TurnBlack(class UMeshComponent* Mesh_0);
	void ReleaseArrow();
	void StartPullingArrow();
	void SetArrowLocation(const struct FVector& Location);
	void FinishCharge();
	void StartCharge(const struct FVector& Direction);
	void Charge__UpdateFunc();
	void Charge__FinishedFunc();
	void StopBlockingServer();
	void StartBlockingServer();
	void Stop_Blocking();
	void Start_Blocking();
	void StopShooting(const struct FVector& Direction);
	void StartShooting(const struct FVector& Direction);
	void ReceiveTick(float DeltaSeconds);
	void ReceiveBeginPlay();
	void MainAbility();
	void MovementAbility();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_KnightChar_C">();
	}
	static class ABP_KnightChar_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_KnightChar_C>();
	}
};
static_assert(alignof(ABP_KnightChar_C) == 0x000010, "Wrong alignment on ABP_KnightChar_C");
static_assert(sizeof(ABP_KnightChar_C) == 0x0007D0, "Wrong size on ABP_KnightChar_C");
static_assert(offsetof(ABP_KnightChar_C, UberGraphFrame_BP_KnightChar_C) == 0x0006F0, "Member 'ABP_KnightChar_C::UberGraphFrame_BP_KnightChar_C' has a wrong offset!");
static_assert(offsetof(ABP_KnightChar_C, ZeroTension) == 0x0006F8, "Member 'ABP_KnightChar_C::ZeroTension' has a wrong offset!");
static_assert(offsetof(ABP_KnightChar_C, FullTension) == 0x000700, "Member 'ABP_KnightChar_C::FullTension' has a wrong offset!");
static_assert(offsetof(ABP_KnightChar_C, Arrow1) == 0x000708, "Member 'ABP_KnightChar_C::Arrow1' has a wrong offset!");
static_assert(offsetof(ABP_KnightChar_C, SpringArm2) == 0x000710, "Member 'ABP_KnightChar_C::SpringArm2' has a wrong offset!");
static_assert(offsetof(ABP_KnightChar_C, FullTension1) == 0x000718, "Member 'ABP_KnightChar_C::FullTension1' has a wrong offset!");
static_assert(offsetof(ABP_KnightChar_C, Arrow2) == 0x000720, "Member 'ABP_KnightChar_C::Arrow2' has a wrong offset!");
static_assert(offsetof(ABP_KnightChar_C, ZeroTension1) == 0x000728, "Member 'ABP_KnightChar_C::ZeroTension1' has a wrong offset!");
static_assert(offsetof(ABP_KnightChar_C, SpringArm1) == 0x000730, "Member 'ABP_KnightChar_C::SpringArm1' has a wrong offset!");
static_assert(offsetof(ABP_KnightChar_C, LTrail) == 0x000738, "Member 'ABP_KnightChar_C::LTrail' has a wrong offset!");
static_assert(offsetof(ABP_KnightChar_C, LAura) == 0x000740, "Member 'ABP_KnightChar_C::LAura' has a wrong offset!");
static_assert(offsetof(ABP_KnightChar_C, KnightWalkAnimation) == 0x000748, "Member 'ABP_KnightChar_C::KnightWalkAnimation' has a wrong offset!");
static_assert(offsetof(ABP_KnightChar_C, ChargeTrail) == 0x000750, "Member 'ABP_KnightChar_C::ChargeTrail' has a wrong offset!");
static_assert(offsetof(ABP_KnightChar_C, Scene_0) == 0x000758, "Member 'ABP_KnightChar_C::Scene_0' has a wrong offset!");
static_assert(offsetof(ABP_KnightChar_C, Charge__Direction_4137876A42AEB45C461A28B7E6293FB1) == 0x000760, "Member 'ABP_KnightChar_C::Charge__Direction_4137876A42AEB45C461A28B7E6293FB1' has a wrong offset!");
static_assert(offsetof(ABP_KnightChar_C, Charge) == 0x000768, "Member 'ABP_KnightChar_C::Charge' has a wrong offset!");
static_assert(offsetof(ABP_KnightChar_C, charging) == 0x000770, "Member 'ABP_KnightChar_C::charging' has a wrong offset!");
static_assert(offsetof(ABP_KnightChar_C, chargeDir) == 0x000774, "Member 'ABP_KnightChar_C::chargeDir' has a wrong offset!");
static_assert(offsetof(ABP_KnightChar_C, ChargeTime) == 0x000780, "Member 'ABP_KnightChar_C::ChargeTime' has a wrong offset!");
static_assert(offsetof(ABP_KnightChar_C, ChargeSpeed) == 0x000784, "Member 'ABP_KnightChar_C::ChargeSpeed' has a wrong offset!");
static_assert(offsetof(ABP_KnightChar_C, ChargeAccel) == 0x000788, "Member 'ABP_KnightChar_C::ChargeAccel' has a wrong offset!");
static_assert(offsetof(ABP_KnightChar_C, DoneChargingSpeed) == 0x00078C, "Member 'ABP_KnightChar_C::DoneChargingSpeed' has a wrong offset!");
static_assert(offsetof(ABP_KnightChar_C, DoneAccel) == 0x000790, "Member 'ABP_KnightChar_C::DoneAccel' has a wrong offset!");
static_assert(offsetof(ABP_KnightChar_C, ChargeCollisionPower) == 0x000794, "Member 'ABP_KnightChar_C::ChargeCollisionPower' has a wrong offset!");
static_assert(offsetof(ABP_KnightChar_C, ChargePieceMultiplier) == 0x000798, "Member 'ABP_KnightChar_C::ChargePieceMultiplier' has a wrong offset!");
static_assert(offsetof(ABP_KnightChar_C, PlayerHitZOverride) == 0x00079C, "Member 'ABP_KnightChar_C::PlayerHitZOverride' has a wrong offset!");
static_assert(offsetof(ABP_KnightChar_C, ChargeDamage) == 0x0007A0, "Member 'ABP_KnightChar_C::ChargeDamage' has a wrong offset!");
static_assert(offsetof(ABP_KnightChar_C, FullChargeArrowTime) == 0x0007A4, "Member 'ABP_KnightChar_C::FullChargeArrowTime' has a wrong offset!");
static_assert(offsetof(ABP_KnightChar_C, PullingArrow) == 0x0007A8, "Member 'ABP_KnightChar_C::PullingArrow' has a wrong offset!");
static_assert(offsetof(ABP_KnightChar_C, ArrowTimer) == 0x0007AC, "Member 'ABP_KnightChar_C::ArrowTimer' has a wrong offset!");
static_assert(offsetof(ABP_KnightChar_C, ArrowMaxPower) == 0x0007B0, "Member 'ABP_KnightChar_C::ArrowMaxPower' has a wrong offset!");
static_assert(offsetof(ABP_KnightChar_C, CameraArrowAlpha) == 0x0007B4, "Member 'ABP_KnightChar_C::CameraArrowAlpha' has a wrong offset!");
static_assert(offsetof(ABP_KnightChar_C, ArrowMaxDamage) == 0x0007B8, "Member 'ABP_KnightChar_C::ArrowMaxDamage' has a wrong offset!");
static_assert(offsetof(ABP_KnightChar_C, LArrow) == 0x0007BC, "Member 'ABP_KnightChar_C::LArrow' has a wrong offset!");
static_assert(offsetof(ABP_KnightChar_C, MinimumArrowPullTime) == 0x0007C0, "Member 'ABP_KnightChar_C::MinimumArrowPullTime' has a wrong offset!");

}

