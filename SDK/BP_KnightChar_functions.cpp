#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_KnightChar

#include "Basic.hpp"

#include "BP_KnightChar_classes.hpp"
#include "BP_KnightChar_parameters.hpp"


namespace SDK
{

// Function BP_KnightChar.BP_KnightChar_C.ExecuteUbergraph_BP_KnightChar
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_KnightChar_C::ExecuteUbergraph_BP_KnightChar(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_KnightChar_C", "ExecuteUbergraph_BP_KnightChar");

	Params::BP_KnightChar_C_ExecuteUbergraph_BP_KnightChar Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_KnightChar.BP_KnightChar_C.SetMiniArrowLocation
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          Location                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_KnightChar_C::SetMiniArrowLocation(const struct FVector& Location)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_KnightChar_C", "SetMiniArrowLocation");

	Params::BP_KnightChar_C_SetMiniArrowLocation Parms{};

	Parms.Location = std::move(Location);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_KnightChar.BP_KnightChar_C.PullArrowMulti
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)

void ABP_KnightChar_C::PullArrowMulti()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_KnightChar_C", "PullArrowMulti");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_KnightChar.BP_KnightChar_C.PullArrowServer
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)

void ABP_KnightChar_C::PullArrowServer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_KnightChar_C", "PullArrowServer");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_KnightChar.BP_KnightChar_C.ReleaseArrowServer
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)

void ABP_KnightChar_C::ReleaseArrowServer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_KnightChar_C", "ReleaseArrowServer");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_KnightChar.BP_KnightChar_C.ReleaseArrowMulti
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)

void ABP_KnightChar_C::ReleaseArrowMulti()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_KnightChar_C", "ReleaseArrowMulti");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_KnightChar.BP_KnightChar_C.SetArrowLocationLocal
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          Location                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_KnightChar_C::SetArrowLocationLocal(const struct FVector& Location)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_KnightChar_C", "SetArrowLocationLocal");

	Params::BP_KnightChar_C_SetArrowLocationLocal Parms{};

	Parms.Location = std::move(Location);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_KnightChar.BP_KnightChar_C.TrailEndLocal
// (BlueprintCallable, BlueprintEvent)

void ABP_KnightChar_C::TrailEndLocal()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_KnightChar_C", "TrailEndLocal");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_KnightChar.BP_KnightChar_C.TrailLocal
// (BlueprintCallable, BlueprintEvent)

void ABP_KnightChar_C::TrailLocal()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_KnightChar_C", "TrailLocal");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_KnightChar.BP_KnightChar_C.RecordArrowRelease
// (BlueprintCallable, BlueprintEvent)

void ABP_KnightChar_C::RecordArrowRelease()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_KnightChar_C", "RecordArrowRelease");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_KnightChar.BP_KnightChar_C.RecordArrowPull
// (BlueprintCallable, BlueprintEvent)

void ABP_KnightChar_C::RecordArrowPull()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_KnightChar_C", "RecordArrowPull");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_KnightChar.BP_KnightChar_C.BndEvt__BP_KnightChar_CapsuleComponent_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature
// (HasOutParams, BlueprintEvent)
// Parameters:
// class UPrimitiveComponent*              OverlappedComponent                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           OtherActor                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UPrimitiveComponent*              OtherComp                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   OtherBodyIndex                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bFromSweep                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FHitResult                       SweepResult                                            (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)

void ABP_KnightChar_C::BndEvt__BP_KnightChar_CapsuleComponent_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_KnightChar_C", "BndEvt__BP_KnightChar_CapsuleComponent_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature");

	Params::BP_KnightChar_C_BndEvt__BP_KnightChar_CapsuleComponent_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature Parms{};

	Parms.OverlappedComponent = OverlappedComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.OtherBodyIndex = OtherBodyIndex;
	Parms.bFromSweep = bFromSweep;
	Parms.SweepResult = std::move(SweepResult);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_KnightChar.BP_KnightChar_C.DeactivateTrail
// (Net, NetMulticast, BlueprintCallable, BlueprintEvent)

void ABP_KnightChar_C::DeactivateTrail()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_KnightChar_C", "DeactivateTrail");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_KnightChar.BP_KnightChar_C.ActivateTrail
// (Net, NetMulticast, BlueprintCallable, BlueprintEvent)

void ABP_KnightChar_C::ActivateTrail()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_KnightChar_C", "ActivateTrail");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_KnightChar.BP_KnightChar_C.ChargeClient
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          Direction                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_KnightChar_C::ChargeClient(const struct FVector& Direction)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_KnightChar_C", "ChargeClient");

	Params::BP_KnightChar_C_ChargeClient Parms{};

	Parms.Direction = std::move(Direction);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_KnightChar.BP_KnightChar_C.TurnBlack
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UMeshComponent*                   Mesh_0                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_KnightChar_C::TurnBlack(class UMeshComponent* Mesh_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_KnightChar_C", "TurnBlack");

	Params::BP_KnightChar_C_TurnBlack Parms{};

	Parms.Mesh_0 = Mesh_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_KnightChar.BP_KnightChar_C.ReleaseArrow
// (BlueprintCallable, BlueprintEvent)

void ABP_KnightChar_C::ReleaseArrow()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_KnightChar_C", "ReleaseArrow");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_KnightChar.BP_KnightChar_C.StartPullingArrow
// (BlueprintCallable, BlueprintEvent)

void ABP_KnightChar_C::StartPullingArrow()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_KnightChar_C", "StartPullingArrow");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_KnightChar.BP_KnightChar_C.SetArrowLocation
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          Location                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_KnightChar_C::SetArrowLocation(const struct FVector& Location)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_KnightChar_C", "SetArrowLocation");

	Params::BP_KnightChar_C_SetArrowLocation Parms{};

	Parms.Location = std::move(Location);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_KnightChar.BP_KnightChar_C.FinishCharge
// (BlueprintCallable, BlueprintEvent)

void ABP_KnightChar_C::FinishCharge()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_KnightChar_C", "FinishCharge");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_KnightChar.BP_KnightChar_C.StartCharge
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          Direction                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_KnightChar_C::StartCharge(const struct FVector& Direction)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_KnightChar_C", "StartCharge");

	Params::BP_KnightChar_C_StartCharge Parms{};

	Parms.Direction = std::move(Direction);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_KnightChar.BP_KnightChar_C.Charge__UpdateFunc
// (BlueprintEvent)

void ABP_KnightChar_C::Charge__UpdateFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_KnightChar_C", "Charge__UpdateFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_KnightChar.BP_KnightChar_C.Charge__FinishedFunc
// (BlueprintEvent)

void ABP_KnightChar_C::Charge__FinishedFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_KnightChar_C", "Charge__FinishedFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_KnightChar.BP_KnightChar_C.StopBlockingServer
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)

void ABP_KnightChar_C::StopBlockingServer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_KnightChar_C", "StopBlockingServer");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_KnightChar.BP_KnightChar_C.StartBlockingServer
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)

void ABP_KnightChar_C::StartBlockingServer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_KnightChar_C", "StartBlockingServer");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_KnightChar.BP_KnightChar_C.Stop Blocking
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)

void ABP_KnightChar_C::Stop_Blocking()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_KnightChar_C", "Stop Blocking");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_KnightChar.BP_KnightChar_C.Start Blocking
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)

void ABP_KnightChar_C::Start_Blocking()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_KnightChar_C", "Start Blocking");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_KnightChar.BP_KnightChar_C.StopShooting
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          Direction                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_KnightChar_C::StopShooting(const struct FVector& Direction)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_KnightChar_C", "StopShooting");

	Params::BP_KnightChar_C_StopShooting Parms{};

	Parms.Direction = std::move(Direction);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_KnightChar.BP_KnightChar_C.StartShooting
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          Direction                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_KnightChar_C::StartShooting(const struct FVector& Direction)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_KnightChar_C", "StartShooting");

	Params::BP_KnightChar_C_StartShooting Parms{};

	Parms.Direction = std::move(Direction);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_KnightChar.BP_KnightChar_C.ReceiveTick
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_KnightChar_C::ReceiveTick(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_KnightChar_C", "ReceiveTick");

	Params::BP_KnightChar_C_ReceiveTick Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_KnightChar.BP_KnightChar_C.ReceiveBeginPlay
// (Event, Protected, BlueprintEvent)

void ABP_KnightChar_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_KnightChar_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_KnightChar.BP_KnightChar_C.MainAbility
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_KnightChar_C::MainAbility()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_KnightChar_C", "MainAbility");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_KnightChar.BP_KnightChar_C.MovementAbility
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_KnightChar_C::MovementAbility()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_KnightChar_C", "MovementAbility");

	UObject::ProcessEvent(Func, nullptr);
}

}

