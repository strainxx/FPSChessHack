#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Piece

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "PieceTypes_structs.hpp"
#include "E_PP_HighlightState_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_Piece.BP_Piece_C
// 0x0090 (0x02B0 - 0x0220)
class ABP_Piece_C : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0220(0x0008)(ZeroConstructor, Transient, DuplicateTransient, UObjectWrapper)
	class UKillcamRecorder_C*                     KillcamRecorder;                                   // 0x0228(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        ProjectileAura;                                    // 0x0230(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        Base;                                              // 0x0238(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UNiagaraComponent*                      ThrowAura;                                         // 0x0240(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       Head;                                              // 0x0248(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   StaticMesh;                                        // 0x0250(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class ABP_Square_C*                           BoardSquare;                                       // 0x0258(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Selected;                                          // 0x0260(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          Black;                                             // 0x0261(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor)
	bool                                          HasMoved;                                          // 0x0262(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_263[0x1];                                      // 0x0263(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ProjectileHealth;                                  // 0x0264(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_Square_C*                           ContestedSquare;                                   // 0x0268(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_PieceChar_C*                        RepresentedChar;                                   // 0x0270(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPieceTypes                                   PieceType;                                         // 0x0278(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsProjectile;                                      // 0x0279(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_27A[0x2];                                      // 0x027A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MaxBounceCount;                                    // 0x027C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BounceCount;                                       // 0x0280(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ProjectileDamage;                                  // 0x0284(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_PieceChar_C*                        OwningChar;                                        // 0x0288(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MaxProjectileHealth;                               // 0x0290(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Height;                                            // 0x0294(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           HitTimer;                                          // 0x0298(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	float                                         SoundCooldown;                                     // 0x02A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         throwntimestamp;                                   // 0x02A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          BSide;                                             // 0x02A8(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor)

public:
	void ExecuteUbergraph_BP_Piece(int32 EntryPoint);
	void SetShinyOnAllMaterials(bool Shiny);
	void ReceiveTick(float DeltaSeconds);
	void DeleteTimer();
	void PlaybackAuraOff();
	void PlaybackAuraOn();
	void InitAsReplayActor();
	void HitPiece(const struct FVector& Position, const struct FVector& Normal);
	void MulticastExplodeDestructible(float Impulse);
	void ReceiveBeginPlay();
	void DeactivateHighlight();
	void DeactivateAura();
	void ActivateAura();
	void CreateAndExplodeDestructible(float Impulse);
	void GetThrown();
	void ReceiveHit(class UPrimitiveComponent* MyComp, class AActor* Other, class UPrimitiveComponent* OtherComp, bool bSelfMoved, const struct FVector& HitLocation, const struct FVector& HitNormal, const struct FVector& NormalImpulse, const struct FHitResult& Hit);
	void ActivateHighlight(E_PP_HighlightState HighlightState);
	void SliceMesh();
	void UserConstructionScript();
	void OnRep_BSide();
	void OnRep_Black();
	void GetRenderedComponent(class UPrimitiveComponent** RenderedComponent);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_Piece_C">();
	}
	static class ABP_Piece_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_Piece_C>();
	}
};
static_assert(alignof(ABP_Piece_C) == 0x000008, "Wrong alignment on ABP_Piece_C");
static_assert(sizeof(ABP_Piece_C) == 0x0002B0, "Wrong size on ABP_Piece_C");
static_assert(offsetof(ABP_Piece_C, UberGraphFrame) == 0x000220, "Member 'ABP_Piece_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_Piece_C, KillcamRecorder) == 0x000228, "Member 'ABP_Piece_C::KillcamRecorder' has a wrong offset!");
static_assert(offsetof(ABP_Piece_C, ProjectileAura) == 0x000230, "Member 'ABP_Piece_C::ProjectileAura' has a wrong offset!");
static_assert(offsetof(ABP_Piece_C, Base) == 0x000238, "Member 'ABP_Piece_C::Base' has a wrong offset!");
static_assert(offsetof(ABP_Piece_C, ThrowAura) == 0x000240, "Member 'ABP_Piece_C::ThrowAura' has a wrong offset!");
static_assert(offsetof(ABP_Piece_C, Head) == 0x000248, "Member 'ABP_Piece_C::Head' has a wrong offset!");
static_assert(offsetof(ABP_Piece_C, StaticMesh) == 0x000250, "Member 'ABP_Piece_C::StaticMesh' has a wrong offset!");
static_assert(offsetof(ABP_Piece_C, BoardSquare) == 0x000258, "Member 'ABP_Piece_C::BoardSquare' has a wrong offset!");
static_assert(offsetof(ABP_Piece_C, Selected) == 0x000260, "Member 'ABP_Piece_C::Selected' has a wrong offset!");
static_assert(offsetof(ABP_Piece_C, Black) == 0x000261, "Member 'ABP_Piece_C::Black' has a wrong offset!");
static_assert(offsetof(ABP_Piece_C, HasMoved) == 0x000262, "Member 'ABP_Piece_C::HasMoved' has a wrong offset!");
static_assert(offsetof(ABP_Piece_C, ProjectileHealth) == 0x000264, "Member 'ABP_Piece_C::ProjectileHealth' has a wrong offset!");
static_assert(offsetof(ABP_Piece_C, ContestedSquare) == 0x000268, "Member 'ABP_Piece_C::ContestedSquare' has a wrong offset!");
static_assert(offsetof(ABP_Piece_C, RepresentedChar) == 0x000270, "Member 'ABP_Piece_C::RepresentedChar' has a wrong offset!");
static_assert(offsetof(ABP_Piece_C, PieceType) == 0x000278, "Member 'ABP_Piece_C::PieceType' has a wrong offset!");
static_assert(offsetof(ABP_Piece_C, IsProjectile) == 0x000279, "Member 'ABP_Piece_C::IsProjectile' has a wrong offset!");
static_assert(offsetof(ABP_Piece_C, MaxBounceCount) == 0x00027C, "Member 'ABP_Piece_C::MaxBounceCount' has a wrong offset!");
static_assert(offsetof(ABP_Piece_C, BounceCount) == 0x000280, "Member 'ABP_Piece_C::BounceCount' has a wrong offset!");
static_assert(offsetof(ABP_Piece_C, ProjectileDamage) == 0x000284, "Member 'ABP_Piece_C::ProjectileDamage' has a wrong offset!");
static_assert(offsetof(ABP_Piece_C, OwningChar) == 0x000288, "Member 'ABP_Piece_C::OwningChar' has a wrong offset!");
static_assert(offsetof(ABP_Piece_C, MaxProjectileHealth) == 0x000290, "Member 'ABP_Piece_C::MaxProjectileHealth' has a wrong offset!");
static_assert(offsetof(ABP_Piece_C, Height) == 0x000294, "Member 'ABP_Piece_C::Height' has a wrong offset!");
static_assert(offsetof(ABP_Piece_C, HitTimer) == 0x000298, "Member 'ABP_Piece_C::HitTimer' has a wrong offset!");
static_assert(offsetof(ABP_Piece_C, SoundCooldown) == 0x0002A0, "Member 'ABP_Piece_C::SoundCooldown' has a wrong offset!");
static_assert(offsetof(ABP_Piece_C, throwntimestamp) == 0x0002A4, "Member 'ABP_Piece_C::throwntimestamp' has a wrong offset!");
static_assert(offsetof(ABP_Piece_C, BSide) == 0x0002A8, "Member 'ABP_Piece_C::BSide' has a wrong offset!");

}

