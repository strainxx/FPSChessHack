#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Piece

#include "Basic.hpp"

#include "BP_Piece_classes.hpp"
#include "BP_Piece_parameters.hpp"


namespace SDK
{

// Function BP_Piece.BP_Piece_C.ExecuteUbergraph_BP_Piece
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Piece_C::ExecuteUbergraph_BP_Piece(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Piece_C", "ExecuteUbergraph_BP_Piece");

	Params::BP_Piece_C_ExecuteUbergraph_BP_Piece Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Piece.BP_Piece_C.SetShinyOnAllMaterials
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Shiny                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper)

void ABP_Piece_C::SetShinyOnAllMaterials(bool Shiny)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Piece_C", "SetShinyOnAllMaterials");

	Params::BP_Piece_C_SetShinyOnAllMaterials Parms{};

	Parms.Shiny = Shiny;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Piece.BP_Piece_C.ReceiveTick
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Piece_C::ReceiveTick(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Piece_C", "ReceiveTick");

	Params::BP_Piece_C_ReceiveTick Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Piece.BP_Piece_C.DeleteTimer
// (BlueprintCallable, BlueprintEvent)

void ABP_Piece_C::DeleteTimer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Piece_C", "DeleteTimer");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Piece.BP_Piece_C.PlaybackAuraOff
// (BlueprintCallable, BlueprintEvent)

void ABP_Piece_C::PlaybackAuraOff()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Piece_C", "PlaybackAuraOff");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Piece.BP_Piece_C.PlaybackAuraOn
// (BlueprintCallable, BlueprintEvent)

void ABP_Piece_C::PlaybackAuraOn()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Piece_C", "PlaybackAuraOn");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Piece.BP_Piece_C.InitAsReplayActor
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_Piece_C::InitAsReplayActor()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Piece_C", "InitAsReplayActor");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Piece.BP_Piece_C.HitPiece
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          Position                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Normal                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Piece_C::HitPiece(const struct FVector& Position, const struct FVector& Normal)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Piece_C", "HitPiece");

	Params::BP_Piece_C_HitPiece Parms{};

	Parms.Position = std::move(Position);
	Parms.Normal = std::move(Normal);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Piece.BP_Piece_C.MulticastExplodeDestructible
// (Net, NetMulticast, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Impulse                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Piece_C::MulticastExplodeDestructible(float Impulse)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Piece_C", "MulticastExplodeDestructible");

	Params::BP_Piece_C_MulticastExplodeDestructible Parms{};

	Parms.Impulse = Impulse;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Piece.BP_Piece_C.ReceiveBeginPlay
// (Event, Protected, BlueprintEvent)

void ABP_Piece_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Piece_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Piece.BP_Piece_C.DeactivateHighlight
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_Piece_C::DeactivateHighlight()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Piece_C", "DeactivateHighlight");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Piece.BP_Piece_C.DeactivateAura
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)

void ABP_Piece_C::DeactivateAura()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Piece_C", "DeactivateAura");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Piece.BP_Piece_C.ActivateAura
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)

void ABP_Piece_C::ActivateAura()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Piece_C", "ActivateAura");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Piece.BP_Piece_C.CreateAndExplodeDestructible
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Impulse                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Piece_C::CreateAndExplodeDestructible(float Impulse)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Piece_C", "CreateAndExplodeDestructible");

	Params::BP_Piece_C_CreateAndExplodeDestructible Parms{};

	Parms.Impulse = Impulse;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Piece.BP_Piece_C.GetThrown
// (BlueprintCallable, BlueprintEvent)

void ABP_Piece_C::GetThrown()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Piece_C", "GetThrown");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Piece.BP_Piece_C.ReceiveHit
// (Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// class UPrimitiveComponent*              MyComp                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           Other                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UPrimitiveComponent*              OtherComp                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bSelfMoved                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FVector                          HitLocation                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          HitNormal                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          NormalImpulse                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FHitResult                       Hit                                                    (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)

void ABP_Piece_C::ReceiveHit(class UPrimitiveComponent* MyComp, class AActor* Other, class UPrimitiveComponent* OtherComp, bool bSelfMoved, const struct FVector& HitLocation, const struct FVector& HitNormal, const struct FVector& NormalImpulse, const struct FHitResult& Hit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Piece_C", "ReceiveHit");

	Params::BP_Piece_C_ReceiveHit Parms{};

	Parms.MyComp = MyComp;
	Parms.Other = Other;
	Parms.OtherComp = OtherComp;
	Parms.bSelfMoved = bSelfMoved;
	Parms.HitLocation = std::move(HitLocation);
	Parms.HitNormal = std::move(HitNormal);
	Parms.NormalImpulse = std::move(NormalImpulse);
	Parms.Hit = std::move(Hit);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Piece.BP_Piece_C.ActivateHighlight
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// E_PP_HighlightState                     HighlightState                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Piece_C::ActivateHighlight(E_PP_HighlightState HighlightState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Piece_C", "ActivateHighlight");

	Params::BP_Piece_C_ActivateHighlight Parms{};

	Parms.HighlightState = HighlightState;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Piece.BP_Piece_C.SliceMesh
// (BlueprintCallable, BlueprintEvent)

void ABP_Piece_C::SliceMesh()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Piece_C", "SliceMesh");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Piece.BP_Piece_C.UserConstructionScript
// (Event, Public, BlueprintCallable, BlueprintEvent)

void ABP_Piece_C::UserConstructionScript()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Piece_C", "UserConstructionScript");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Piece.BP_Piece_C.OnRep_BSide
// (BlueprintCallable, BlueprintEvent)

void ABP_Piece_C::OnRep_BSide()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Piece_C", "OnRep_BSide");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Piece.BP_Piece_C.OnRep_Black
// (BlueprintCallable, BlueprintEvent)

void ABP_Piece_C::OnRep_Black()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Piece_C", "OnRep_Black");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Piece.BP_Piece_C.GetRenderedComponent
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UPrimitiveComponent*              RenderedComponent                                      (Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Piece_C::GetRenderedComponent(class UPrimitiveComponent** RenderedComponent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Piece_C", "GetRenderedComponent");

	Params::BP_Piece_C_GetRenderedComponent Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (RenderedComponent != nullptr)
		*RenderedComponent = Parms.RenderedComponent;
}

}

