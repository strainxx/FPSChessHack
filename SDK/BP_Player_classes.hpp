#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Player

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "CoreUObject_structs.hpp"
#include "UMG_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_Player.BP_Player_C
// 0x00C8 (0x0348 - 0x0280)
class ABP_Player_C final : public APawn
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0280(0x0008)(ZeroConstructor, Transient, DuplicateTransient, UObjectWrapper)
	class UCameraComponent*                       Camera;                                            // 0x0288(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x0290(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	class ABP_ChessBoard_C*                       chessboard;                                        // 0x0298(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_Piece_C*                            SelectedPiece;                                     // 0x02A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class ABP_Square_C*>                   ValidMoves;                                        // 0x02A8(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	class ABP_Square_C*                           MousedOverSquare;                                  // 0x02B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Player1;                                           // 0x02C0(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2C1[0x7];                                      // 0x02C1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_PieceChar_C*                        Player1Character;                                  // 0x02C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class ABP_Square_C*>                   EnemyMoves;                                        // 0x02D0(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	class ABP_PromotionCutscene_C*                PromotionTarget;                                   // 0x02E0(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	bool                                          IsPromoting;                                       // 0x02E8(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2E9[0x7];                                      // 0x02E9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_Piece_C*                            CacheSelectedPiece;                                // 0x02F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UEndScreen_C*                           WinScreen;                                         // 0x02F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DeadZone;                                          // 0x0300(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              ControllerMove;                                    // 0x0304(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ControllerMoveRate;                                // 0x030C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ControllerMoveTimer;                               // 0x0310(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DefaultControllerMoveRate;                         // 0x0314(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          UsingController;                                   // 0x0318(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          RequestedRematch;                                  // 0x0319(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_31A[0x6];                                      // 0x031A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UUMG_PlayerHUD_C*                       PlayerHUD;                                         // 0x0320(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ChatEnabled;                                       // 0x0328(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          chatOnCooldown;                                    // 0x0329(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_32A[0x6];                                      // 0x032A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(const struct FVector2D& GamepadXY)> GetGamepadXY;                                      // 0x0330(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	struct FVector2D                              GamepadXY;                                         // 0x0340(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_Player(int32 EntryPoint);
	void SetIsPromotingServer(bool IsPromoting_0);
	void DeselectAllPieces();
	void DehoverAllPieces();
	void InpAxisEvt_ChatWheelY_K2Node_InputAxisEvent_2(float AxisValue);
	void InpAxisEvt_ChatWheelX_K2Node_InputAxisEvent_1(float AxisValue);
	void ChatOffCooldown();
	void ChangeChatEnabled(bool ChatEnabled_0);
	void RebindMessage();
	void CreateHUD();
	void SendMessageToPlayers(const class FText& Message);
	void Send_New_Message(const class FText& Message, bool Player1_0);
	void DestroyWinScreen();
	void StartRematch();
	void GetChallengedServer();
	void GetChallengedClient();
	void Challenged(class ABP_Player_C* Enemy);
	void InpAxisEvt_GamepadChessYaw_K2Node_InputAxisEvent_5(float AxisValue);
	void InpAxisEvt_GamepadChessPitch_K2Node_InputAxisEvent_4(float AxisValue);
	void HoverSquare(class ABP_Square_C* Square);
	void CleanUp();
	void WinnerScreen(bool BlackWin, class ABP_Player_C* Enemy, bool Tied);
	void SetEnemySelectedPieceAll(const class ABP_Piece_C* Piece, bool Reset);
	void SetEnemySelectedPieceClient(const class ABP_Piece_C* Piece, bool Reset);
	void SetEnemySelectedPieceServer(const class ABP_Piece_C* Piece, bool Reset);
	void SetEnemySelectedPiece(const class ABP_Piece_C* Piece, bool Reset);
	void AddEnemyMovesAll(const TArray<class ABP_Square_C*>& Moves);
	void AddEnemyMoves(const TArray<class ABP_Square_C*>& EnemySquares);
	void AddEnemyMovesServer(const TArray<class ABP_Square_C*>& EnemySquares);
	void AddEnemyMovesClient(const TArray<class ABP_Square_C*>& EnemySquares);
	void Select_Piece();
	void MouseOverPiece();
	void ReceiveBeginPlay();
	void ClientInitPromoCutscene(class ABP_PromotionCutscene_C* cutscene, class ABP_Piece_C* SelectedPiece_0);
	void ServerInitPromoCutscene(class ABP_Piece_C* Piece, bool BlackOwner);
	void InitializePromotionCutscene(class ABP_Piece_C* Piece, bool BlackOwner);
	void InitializePromoCutsceneNoSpawn(class ABP_PromotionCutscene_C* cutscene, class ABP_Piece_C* SelectedPiece_0, bool BlackOwner);
	void Promotion();
	void ReceivePromotedClient();
	void ReceivePromotedServer();
	void NotifyEnemyPromoted();
	void InpActEvt_Open_Chat_Wheel_K2Node_InputActionEvent_0(const struct FKey& Key);
	void InpActEvt_Open_Chat_Wheel_K2Node_InputActionEvent_1(const struct FKey& Key);
	void InpActEvt_Skip_K2Node_InputActionEvent_2(const struct FKey& Key);
	void InpActEvt_MouseFocus_K2Node_InputActionEvent_3(const struct FKey& Key);
	void InpActEvt_SelectPiece_K2Node_InputActionEvent_4(const struct FKey& Key);
	void ClearMoves(TArray<class ABP_Square_C*>& Array);
	void AddSquareToValidMovesFromIndex(const struct FVector2D& Index_0, class ABP_Square_C** Square, bool* bLocked);
	void CheckForPromotion(bool* NewParam);
	void OnRep_PromotionTarget();
	void OnRep_IsPromoting();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_Player_C">();
	}
	static class ABP_Player_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_Player_C>();
	}
};
static_assert(alignof(ABP_Player_C) == 0x000008, "Wrong alignment on ABP_Player_C");
static_assert(sizeof(ABP_Player_C) == 0x000348, "Wrong size on ABP_Player_C");
static_assert(offsetof(ABP_Player_C, UberGraphFrame) == 0x000280, "Member 'ABP_Player_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_Player_C, Camera) == 0x000288, "Member 'ABP_Player_C::Camera' has a wrong offset!");
static_assert(offsetof(ABP_Player_C, DefaultSceneRoot) == 0x000290, "Member 'ABP_Player_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_Player_C, chessboard) == 0x000298, "Member 'ABP_Player_C::chessboard' has a wrong offset!");
static_assert(offsetof(ABP_Player_C, SelectedPiece) == 0x0002A0, "Member 'ABP_Player_C::SelectedPiece' has a wrong offset!");
static_assert(offsetof(ABP_Player_C, ValidMoves) == 0x0002A8, "Member 'ABP_Player_C::ValidMoves' has a wrong offset!");
static_assert(offsetof(ABP_Player_C, MousedOverSquare) == 0x0002B8, "Member 'ABP_Player_C::MousedOverSquare' has a wrong offset!");
static_assert(offsetof(ABP_Player_C, Player1) == 0x0002C0, "Member 'ABP_Player_C::Player1' has a wrong offset!");
static_assert(offsetof(ABP_Player_C, Player1Character) == 0x0002C8, "Member 'ABP_Player_C::Player1Character' has a wrong offset!");
static_assert(offsetof(ABP_Player_C, EnemyMoves) == 0x0002D0, "Member 'ABP_Player_C::EnemyMoves' has a wrong offset!");
static_assert(offsetof(ABP_Player_C, PromotionTarget) == 0x0002E0, "Member 'ABP_Player_C::PromotionTarget' has a wrong offset!");
static_assert(offsetof(ABP_Player_C, IsPromoting) == 0x0002E8, "Member 'ABP_Player_C::IsPromoting' has a wrong offset!");
static_assert(offsetof(ABP_Player_C, CacheSelectedPiece) == 0x0002F0, "Member 'ABP_Player_C::CacheSelectedPiece' has a wrong offset!");
static_assert(offsetof(ABP_Player_C, WinScreen) == 0x0002F8, "Member 'ABP_Player_C::WinScreen' has a wrong offset!");
static_assert(offsetof(ABP_Player_C, DeadZone) == 0x000300, "Member 'ABP_Player_C::DeadZone' has a wrong offset!");
static_assert(offsetof(ABP_Player_C, ControllerMove) == 0x000304, "Member 'ABP_Player_C::ControllerMove' has a wrong offset!");
static_assert(offsetof(ABP_Player_C, ControllerMoveRate) == 0x00030C, "Member 'ABP_Player_C::ControllerMoveRate' has a wrong offset!");
static_assert(offsetof(ABP_Player_C, ControllerMoveTimer) == 0x000310, "Member 'ABP_Player_C::ControllerMoveTimer' has a wrong offset!");
static_assert(offsetof(ABP_Player_C, DefaultControllerMoveRate) == 0x000314, "Member 'ABP_Player_C::DefaultControllerMoveRate' has a wrong offset!");
static_assert(offsetof(ABP_Player_C, UsingController) == 0x000318, "Member 'ABP_Player_C::UsingController' has a wrong offset!");
static_assert(offsetof(ABP_Player_C, RequestedRematch) == 0x000319, "Member 'ABP_Player_C::RequestedRematch' has a wrong offset!");
static_assert(offsetof(ABP_Player_C, PlayerHUD) == 0x000320, "Member 'ABP_Player_C::PlayerHUD' has a wrong offset!");
static_assert(offsetof(ABP_Player_C, ChatEnabled) == 0x000328, "Member 'ABP_Player_C::ChatEnabled' has a wrong offset!");
static_assert(offsetof(ABP_Player_C, chatOnCooldown) == 0x000329, "Member 'ABP_Player_C::chatOnCooldown' has a wrong offset!");
static_assert(offsetof(ABP_Player_C, GetGamepadXY) == 0x000330, "Member 'ABP_Player_C::GetGamepadXY' has a wrong offset!");
static_assert(offsetof(ABP_Player_C, GamepadXY) == 0x000340, "Member 'ABP_Player_C::GamepadXY' has a wrong offset!");

}

