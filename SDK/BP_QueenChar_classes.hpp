#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_QueenChar

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "BP_PieceChar_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_QueenChar.BP_QueenChar_C
// 0x00C0 (0x07B0 - 0x06F0)
class ABP_QueenChar_C final : public ABP_PieceChar_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_BP_QueenChar_C;                     // 0x06F0(0x0008)(ZeroConstructor, Transient, DuplicateTransient, UObjectWrapper)
	class UStaticMeshComponent*                   RevolvingPortion1;                                 // 0x06F8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USpringArmComponent*                    SpringArm1;                                        // 0x0700(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UNiagaraComponent*                      LevitateAura;                                      // 0x0708(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UActorSequenceComponent*                QueenWalk;                                         // 0x0710(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UActorSequenceComponent*                BarrelStretch;                                     // 0x0718(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   RevolvingPortion;                                  // 0x0720(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        ShootingSound;                                     // 0x0728(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        HoldPoint;                                         // 0x0730(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            GoUp__Direction_E30AA11B4DAE9E72E94803A67191AE04;  // 0x0738(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_739[0x7];                                      // 0x0739(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     GoUp;                                              // 0x0740(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	float                                         RevolveGun_Rotation_1575961F412454A75DE7149492974279; // 0x0748(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	ETimelineDirection                            RevolveGun__Direction_1575961F412454A75DE7149492974279; // 0x074C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_74D[0x3];                                      // 0x074D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     RevolveGun;                                        // 0x0750(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	ETimelineDirection                            Timeline_0_0__Direction_A3145EEE45CADDC3996BE8BA819F2235; // 0x0758(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_759[0x7];                                      // 0x0759(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     Timeline_0_0;                                      // 0x0760(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	float                                         PiecePullSpeed;                                    // 0x0768(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_76C[0x4];                                      // 0x076C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_Piece_C*                            HeldPiece;                                         // 0x0770(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          HoldingPiece;                                      // 0x0778(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_779[0x3];                                      // 0x0779(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ThrowVelocity;                                     // 0x077C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          PieceThrowable;                                    // 0x0780(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_781[0x3];                                      // 0x0781(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ThrowableRange;                                    // 0x0784(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ThrowOffsetZ;                                      // 0x0788(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CollidingObj;                                      // 0x078C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          Levitating;                                        // 0x078D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_78E[0x2];                                      // 0x078E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         FlightTime;                                        // 0x0790(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FlightForce;                                       // 0x0794(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FlightInitialForce;                                // 0x0798(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CloseRange;                                        // 0x079C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FlyingSpeedMultiplier;                             // 0x07A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_QueenChar(int32 EntryPoint);
	void EndShootingFXPlayback();
	void StartShootingFXPlayback();
	void EndShootingFXMulti();
	void StartShootingFXMulti();
	void EndShootingFXServer();
	void StartShootingFXServer();
	void EndShootingFX();
	void StartShootingFX();
	void PlaybackAuraOff();
	void PlaybackAuraOn();
	void EndLevitateMulti();
	void LevitateServer();
	void EndLevitateServer();
	void LevitateMulti();
	void FinishFlight();
	void BeginFlight();
	void ThrowSound();
	void Revolving(bool Revolving_0);
	void RevolvingMulti(bool Revolving);
	void RevolvingServer(bool Revolving);
	void RevolvingAll(bool Revolving);
	void Throw_Piece(const struct FVector& Direction);
	void ReleasePiece();
	void HoldPiece(class ABP_Piece_C* Piece);
	void GoUp__UpdateFunc();
	void GoUp__FinishedFunc();
	void RevolveGun__UpdateFunc();
	void RevolveGun__FinishedFunc();
	void Timeline_0_0__UpdateFunc();
	void Timeline_0_0__FinishedFunc();
	void EndJump();
	void StartJump();
	void StopBlockingServer();
	void StartBlockingServer();
	void Stop_Blocking();
	void Start_Blocking();
	void DeathCleanup();
	void StopShooting(const struct FVector& Direction);
	void StartShooting(const struct FVector& Direction);
	void ReceiveBeginPlay();
	void MainAbility();
	void MovementAbility();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_QueenChar_C">();
	}
	static class ABP_QueenChar_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_QueenChar_C>();
	}
};
static_assert(alignof(ABP_QueenChar_C) == 0x000010, "Wrong alignment on ABP_QueenChar_C");
static_assert(sizeof(ABP_QueenChar_C) == 0x0007B0, "Wrong size on ABP_QueenChar_C");
static_assert(offsetof(ABP_QueenChar_C, UberGraphFrame_BP_QueenChar_C) == 0x0006F0, "Member 'ABP_QueenChar_C::UberGraphFrame_BP_QueenChar_C' has a wrong offset!");
static_assert(offsetof(ABP_QueenChar_C, RevolvingPortion1) == 0x0006F8, "Member 'ABP_QueenChar_C::RevolvingPortion1' has a wrong offset!");
static_assert(offsetof(ABP_QueenChar_C, SpringArm1) == 0x000700, "Member 'ABP_QueenChar_C::SpringArm1' has a wrong offset!");
static_assert(offsetof(ABP_QueenChar_C, LevitateAura) == 0x000708, "Member 'ABP_QueenChar_C::LevitateAura' has a wrong offset!");
static_assert(offsetof(ABP_QueenChar_C, QueenWalk) == 0x000710, "Member 'ABP_QueenChar_C::QueenWalk' has a wrong offset!");
static_assert(offsetof(ABP_QueenChar_C, BarrelStretch) == 0x000718, "Member 'ABP_QueenChar_C::BarrelStretch' has a wrong offset!");
static_assert(offsetof(ABP_QueenChar_C, RevolvingPortion) == 0x000720, "Member 'ABP_QueenChar_C::RevolvingPortion' has a wrong offset!");
static_assert(offsetof(ABP_QueenChar_C, ShootingSound) == 0x000728, "Member 'ABP_QueenChar_C::ShootingSound' has a wrong offset!");
static_assert(offsetof(ABP_QueenChar_C, HoldPoint) == 0x000730, "Member 'ABP_QueenChar_C::HoldPoint' has a wrong offset!");
static_assert(offsetof(ABP_QueenChar_C, GoUp__Direction_E30AA11B4DAE9E72E94803A67191AE04) == 0x000738, "Member 'ABP_QueenChar_C::GoUp__Direction_E30AA11B4DAE9E72E94803A67191AE04' has a wrong offset!");
static_assert(offsetof(ABP_QueenChar_C, GoUp) == 0x000740, "Member 'ABP_QueenChar_C::GoUp' has a wrong offset!");
static_assert(offsetof(ABP_QueenChar_C, RevolveGun_Rotation_1575961F412454A75DE7149492974279) == 0x000748, "Member 'ABP_QueenChar_C::RevolveGun_Rotation_1575961F412454A75DE7149492974279' has a wrong offset!");
static_assert(offsetof(ABP_QueenChar_C, RevolveGun__Direction_1575961F412454A75DE7149492974279) == 0x00074C, "Member 'ABP_QueenChar_C::RevolveGun__Direction_1575961F412454A75DE7149492974279' has a wrong offset!");
static_assert(offsetof(ABP_QueenChar_C, RevolveGun) == 0x000750, "Member 'ABP_QueenChar_C::RevolveGun' has a wrong offset!");
static_assert(offsetof(ABP_QueenChar_C, Timeline_0_0__Direction_A3145EEE45CADDC3996BE8BA819F2235) == 0x000758, "Member 'ABP_QueenChar_C::Timeline_0_0__Direction_A3145EEE45CADDC3996BE8BA819F2235' has a wrong offset!");
static_assert(offsetof(ABP_QueenChar_C, Timeline_0_0) == 0x000760, "Member 'ABP_QueenChar_C::Timeline_0_0' has a wrong offset!");
static_assert(offsetof(ABP_QueenChar_C, PiecePullSpeed) == 0x000768, "Member 'ABP_QueenChar_C::PiecePullSpeed' has a wrong offset!");
static_assert(offsetof(ABP_QueenChar_C, HeldPiece) == 0x000770, "Member 'ABP_QueenChar_C::HeldPiece' has a wrong offset!");
static_assert(offsetof(ABP_QueenChar_C, HoldingPiece) == 0x000778, "Member 'ABP_QueenChar_C::HoldingPiece' has a wrong offset!");
static_assert(offsetof(ABP_QueenChar_C, ThrowVelocity) == 0x00077C, "Member 'ABP_QueenChar_C::ThrowVelocity' has a wrong offset!");
static_assert(offsetof(ABP_QueenChar_C, PieceThrowable) == 0x000780, "Member 'ABP_QueenChar_C::PieceThrowable' has a wrong offset!");
static_assert(offsetof(ABP_QueenChar_C, ThrowableRange) == 0x000784, "Member 'ABP_QueenChar_C::ThrowableRange' has a wrong offset!");
static_assert(offsetof(ABP_QueenChar_C, ThrowOffsetZ) == 0x000788, "Member 'ABP_QueenChar_C::ThrowOffsetZ' has a wrong offset!");
static_assert(offsetof(ABP_QueenChar_C, CollidingObj) == 0x00078C, "Member 'ABP_QueenChar_C::CollidingObj' has a wrong offset!");
static_assert(offsetof(ABP_QueenChar_C, Levitating) == 0x00078D, "Member 'ABP_QueenChar_C::Levitating' has a wrong offset!");
static_assert(offsetof(ABP_QueenChar_C, FlightTime) == 0x000790, "Member 'ABP_QueenChar_C::FlightTime' has a wrong offset!");
static_assert(offsetof(ABP_QueenChar_C, FlightForce) == 0x000794, "Member 'ABP_QueenChar_C::FlightForce' has a wrong offset!");
static_assert(offsetof(ABP_QueenChar_C, FlightInitialForce) == 0x000798, "Member 'ABP_QueenChar_C::FlightInitialForce' has a wrong offset!");
static_assert(offsetof(ABP_QueenChar_C, CloseRange) == 0x00079C, "Member 'ABP_QueenChar_C::CloseRange' has a wrong offset!");
static_assert(offsetof(ABP_QueenChar_C, FlyingSpeedMultiplier) == 0x0007A0, "Member 'ABP_QueenChar_C::FlyingSpeedMultiplier' has a wrong offset!");

}

