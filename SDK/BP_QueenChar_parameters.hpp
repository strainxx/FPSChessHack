#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_QueenChar

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function BP_QueenChar.BP_QueenChar_C.ExecuteUbergraph_BP_QueenChar
// 0x0270 (0x0270 - 0x0000)
struct BP_QueenChar_C_ExecuteUbergraph_BP_QueenChar final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasAuthority_ReturnValue;                 // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate;              // 0x0008(0x0010)(ZeroConstructor, NoDestructor)
	bool                                          CallFunc_HasAuthority_ReturnValue_1;               // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasAuthority_ReturnValue_2;               // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasAuthority_ReturnValue_3;               // 0x001A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1B[0x5];                                       // 0x001B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_Piece_C*                            K2Node_CustomEvent_Piece;                          // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue;      // 0x0028(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UPrimitiveComponent*>            CallFunc_GetOverlappingComponents_OutOverlappingComponents; // 0x0038(0x0010)(ReferenceParm, ContainsInstancedReference)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0048(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x0058(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_69[0x3];                                       // 0x0069(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x006C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_CustomEvent_direction;                      // 0x0078(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue_1;       // 0x0084(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X;                            // 0x0090(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y;                            // 0x0094(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z;                            // 0x0098(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x009C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_Event_Direction_1;                          // 0x00A0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x00AC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_Event_Direction;                            // 0x00B8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Roll;                        // 0x00C4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch;                       // 0x00C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw;                         // 0x00CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_CustomEvent_Revolving_3;                    // 0x00D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_D1[0x3];                                       // 0x00D1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               CallFunc_MakeRotator_ReturnValue;                  // 0x00D4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FHitResult                             CallFunc_K2_SetRelativeRotation_SweepHitResult;    // 0x00E0(0x008C)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          K2Node_CustomEvent_Revolving_2;                    // 0x016C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_CustomEvent_Revolving_1;                    // 0x016D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_CustomEvent_Revolving;                      // 0x016E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_16F[0x1];                                      // 0x016F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0170(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0174(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_175[0x3];                                      // 0x0175(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0178(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x017C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_Array_Get_Item;                           // 0x0180(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ECollisionChannel                             CallFunc_GetCollisionObjectType_ReturnValue;       // 0x0188(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0189(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_1;        // 0x018A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x018B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue_1;    // 0x018C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Vector_Distance_ReturnValue;              // 0x0198(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue_1;                 // 0x019C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           CallFunc_K2_SetTimerDelegate_ReturnValue;          // 0x01A8(0x0008)(NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue_2;                 // 0x01B0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_True_if_break_was_hit_Variable;          // 0x01BC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue;              // 0x01BD(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x01BE(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x01BF(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasAuthority_ReturnValue_4;               // 0x01C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x01C1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x01C2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1C3[0x1];                                      // 0x01C3(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x01C4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Roll_1;                      // 0x01C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch_1;                     // 0x01CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw_1;                       // 0x01D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue_1;                // 0x01D4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_1;        // 0x01E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_K2_SetRelativeRotation_SweepHitResult_1;  // 0x01E4(0x008C)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(BP_QueenChar_C_ExecuteUbergraph_BP_QueenChar) == 0x000008, "Wrong alignment on BP_QueenChar_C_ExecuteUbergraph_BP_QueenChar");
static_assert(sizeof(BP_QueenChar_C_ExecuteUbergraph_BP_QueenChar) == 0x000270, "Wrong size on BP_QueenChar_C_ExecuteUbergraph_BP_QueenChar");
static_assert(offsetof(BP_QueenChar_C_ExecuteUbergraph_BP_QueenChar, EntryPoint) == 0x000000, "Member 'BP_QueenChar_C_ExecuteUbergraph_BP_QueenChar::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_QueenChar_C_ExecuteUbergraph_BP_QueenChar, CallFunc_HasAuthority_ReturnValue) == 0x000004, "Member 'BP_QueenChar_C_ExecuteUbergraph_BP_QueenChar::CallFunc_HasAuthority_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_QueenChar_C_ExecuteUbergraph_BP_QueenChar, K2Node_CreateDelegate_OutputDelegate) == 0x000008, "Member 'BP_QueenChar_C_ExecuteUbergraph_BP_QueenChar::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(BP_QueenChar_C_ExecuteUbergraph_BP_QueenChar, CallFunc_HasAuthority_ReturnValue_1) == 0x000018, "Member 'BP_QueenChar_C_ExecuteUbergraph_BP_QueenChar::CallFunc_HasAuthority_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_QueenChar_C_ExecuteUbergraph_BP_QueenChar, CallFunc_HasAuthority_ReturnValue_2) == 0x000019, "Member 'BP_QueenChar_C_ExecuteUbergraph_BP_QueenChar::CallFunc_HasAuthority_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_QueenChar_C_ExecuteUbergraph_BP_QueenChar, CallFunc_HasAuthority_ReturnValue_3) == 0x00001A, "Member 'BP_QueenChar_C_ExecuteUbergraph_BP_QueenChar::CallFunc_HasAuthority_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_QueenChar_C_ExecuteUbergraph_BP_QueenChar, K2Node_CustomEvent_Piece) == 0x000020, "Member 'BP_QueenChar_C_ExecuteUbergraph_BP_QueenChar::K2Node_CustomEvent_Piece' has a wrong offset!");
static_assert(offsetof(BP_QueenChar_C_ExecuteUbergraph_BP_QueenChar, CallFunc_K2_GetComponentLocation_ReturnValue) == 0x000028, "Member 'BP_QueenChar_C_ExecuteUbergraph_BP_QueenChar::CallFunc_K2_GetComponentLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_QueenChar_C_ExecuteUbergraph_BP_QueenChar, CallFunc_GetOverlappingComponents_OutOverlappingComponents) == 0x000038, "Member 'BP_QueenChar_C_ExecuteUbergraph_BP_QueenChar::CallFunc_GetOverlappingComponents_OutOverlappingComponents' has a wrong offset!");
static_assert(offsetof(BP_QueenChar_C_ExecuteUbergraph_BP_QueenChar, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000048, "Member 'BP_QueenChar_C_ExecuteUbergraph_BP_QueenChar::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_QueenChar_C_ExecuteUbergraph_BP_QueenChar, CallFunc_Array_Length_ReturnValue) == 0x000054, "Member 'BP_QueenChar_C_ExecuteUbergraph_BP_QueenChar::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_QueenChar_C_ExecuteUbergraph_BP_QueenChar, CallFunc_Subtract_VectorVector_ReturnValue) == 0x000058, "Member 'BP_QueenChar_C_ExecuteUbergraph_BP_QueenChar::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_QueenChar_C_ExecuteUbergraph_BP_QueenChar, CallFunc_Array_Length_ReturnValue_1) == 0x000064, "Member 'BP_QueenChar_C_ExecuteUbergraph_BP_QueenChar::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_QueenChar_C_ExecuteUbergraph_BP_QueenChar, CallFunc_Greater_IntInt_ReturnValue) == 0x000068, "Member 'BP_QueenChar_C_ExecuteUbergraph_BP_QueenChar::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_QueenChar_C_ExecuteUbergraph_BP_QueenChar, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x00006C, "Member 'BP_QueenChar_C_ExecuteUbergraph_BP_QueenChar::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_QueenChar_C_ExecuteUbergraph_BP_QueenChar, K2Node_CustomEvent_direction) == 0x000078, "Member 'BP_QueenChar_C_ExecuteUbergraph_BP_QueenChar::K2Node_CustomEvent_direction' has a wrong offset!");
static_assert(offsetof(BP_QueenChar_C_ExecuteUbergraph_BP_QueenChar, CallFunc_Multiply_VectorFloat_ReturnValue_1) == 0x000084, "Member 'BP_QueenChar_C_ExecuteUbergraph_BP_QueenChar::CallFunc_Multiply_VectorFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_QueenChar_C_ExecuteUbergraph_BP_QueenChar, CallFunc_BreakVector_X) == 0x000090, "Member 'BP_QueenChar_C_ExecuteUbergraph_BP_QueenChar::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(BP_QueenChar_C_ExecuteUbergraph_BP_QueenChar, CallFunc_BreakVector_Y) == 0x000094, "Member 'BP_QueenChar_C_ExecuteUbergraph_BP_QueenChar::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(BP_QueenChar_C_ExecuteUbergraph_BP_QueenChar, CallFunc_BreakVector_Z) == 0x000098, "Member 'BP_QueenChar_C_ExecuteUbergraph_BP_QueenChar::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(BP_QueenChar_C_ExecuteUbergraph_BP_QueenChar, CallFunc_Add_FloatFloat_ReturnValue) == 0x00009C, "Member 'BP_QueenChar_C_ExecuteUbergraph_BP_QueenChar::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_QueenChar_C_ExecuteUbergraph_BP_QueenChar, K2Node_Event_Direction_1) == 0x0000A0, "Member 'BP_QueenChar_C_ExecuteUbergraph_BP_QueenChar::K2Node_Event_Direction_1' has a wrong offset!");
static_assert(offsetof(BP_QueenChar_C_ExecuteUbergraph_BP_QueenChar, CallFunc_MakeVector_ReturnValue) == 0x0000AC, "Member 'BP_QueenChar_C_ExecuteUbergraph_BP_QueenChar::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_QueenChar_C_ExecuteUbergraph_BP_QueenChar, K2Node_Event_Direction) == 0x0000B8, "Member 'BP_QueenChar_C_ExecuteUbergraph_BP_QueenChar::K2Node_Event_Direction' has a wrong offset!");
static_assert(offsetof(BP_QueenChar_C_ExecuteUbergraph_BP_QueenChar, CallFunc_BreakRotator_Roll) == 0x0000C4, "Member 'BP_QueenChar_C_ExecuteUbergraph_BP_QueenChar::CallFunc_BreakRotator_Roll' has a wrong offset!");
static_assert(offsetof(BP_QueenChar_C_ExecuteUbergraph_BP_QueenChar, CallFunc_BreakRotator_Pitch) == 0x0000C8, "Member 'BP_QueenChar_C_ExecuteUbergraph_BP_QueenChar::CallFunc_BreakRotator_Pitch' has a wrong offset!");
static_assert(offsetof(BP_QueenChar_C_ExecuteUbergraph_BP_QueenChar, CallFunc_BreakRotator_Yaw) == 0x0000CC, "Member 'BP_QueenChar_C_ExecuteUbergraph_BP_QueenChar::CallFunc_BreakRotator_Yaw' has a wrong offset!");
static_assert(offsetof(BP_QueenChar_C_ExecuteUbergraph_BP_QueenChar, K2Node_CustomEvent_Revolving_3) == 0x0000D0, "Member 'BP_QueenChar_C_ExecuteUbergraph_BP_QueenChar::K2Node_CustomEvent_Revolving_3' has a wrong offset!");
static_assert(offsetof(BP_QueenChar_C_ExecuteUbergraph_BP_QueenChar, CallFunc_MakeRotator_ReturnValue) == 0x0000D4, "Member 'BP_QueenChar_C_ExecuteUbergraph_BP_QueenChar::CallFunc_MakeRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_QueenChar_C_ExecuteUbergraph_BP_QueenChar, CallFunc_K2_SetRelativeRotation_SweepHitResult) == 0x0000E0, "Member 'BP_QueenChar_C_ExecuteUbergraph_BP_QueenChar::CallFunc_K2_SetRelativeRotation_SweepHitResult' has a wrong offset!");
static_assert(offsetof(BP_QueenChar_C_ExecuteUbergraph_BP_QueenChar, K2Node_CustomEvent_Revolving_2) == 0x00016C, "Member 'BP_QueenChar_C_ExecuteUbergraph_BP_QueenChar::K2Node_CustomEvent_Revolving_2' has a wrong offset!");
static_assert(offsetof(BP_QueenChar_C_ExecuteUbergraph_BP_QueenChar, K2Node_CustomEvent_Revolving_1) == 0x00016D, "Member 'BP_QueenChar_C_ExecuteUbergraph_BP_QueenChar::K2Node_CustomEvent_Revolving_1' has a wrong offset!");
static_assert(offsetof(BP_QueenChar_C_ExecuteUbergraph_BP_QueenChar, K2Node_CustomEvent_Revolving) == 0x00016E, "Member 'BP_QueenChar_C_ExecuteUbergraph_BP_QueenChar::K2Node_CustomEvent_Revolving' has a wrong offset!");
static_assert(offsetof(BP_QueenChar_C_ExecuteUbergraph_BP_QueenChar, Temp_int_Loop_Counter_Variable) == 0x000170, "Member 'BP_QueenChar_C_ExecuteUbergraph_BP_QueenChar::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_QueenChar_C_ExecuteUbergraph_BP_QueenChar, CallFunc_Less_IntInt_ReturnValue) == 0x000174, "Member 'BP_QueenChar_C_ExecuteUbergraph_BP_QueenChar::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_QueenChar_C_ExecuteUbergraph_BP_QueenChar, CallFunc_Add_IntInt_ReturnValue) == 0x000178, "Member 'BP_QueenChar_C_ExecuteUbergraph_BP_QueenChar::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_QueenChar_C_ExecuteUbergraph_BP_QueenChar, Temp_int_Array_Index_Variable) == 0x00017C, "Member 'BP_QueenChar_C_ExecuteUbergraph_BP_QueenChar::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_QueenChar_C_ExecuteUbergraph_BP_QueenChar, CallFunc_Array_Get_Item) == 0x000180, "Member 'BP_QueenChar_C_ExecuteUbergraph_BP_QueenChar::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_QueenChar_C_ExecuteUbergraph_BP_QueenChar, CallFunc_GetCollisionObjectType_ReturnValue) == 0x000188, "Member 'BP_QueenChar_C_ExecuteUbergraph_BP_QueenChar::CallFunc_GetCollisionObjectType_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_QueenChar_C_ExecuteUbergraph_BP_QueenChar, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000189, "Member 'BP_QueenChar_C_ExecuteUbergraph_BP_QueenChar::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_QueenChar_C_ExecuteUbergraph_BP_QueenChar, CallFunc_EqualEqual_ByteByte_ReturnValue_1) == 0x00018A, "Member 'BP_QueenChar_C_ExecuteUbergraph_BP_QueenChar::CallFunc_EqualEqual_ByteByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_QueenChar_C_ExecuteUbergraph_BP_QueenChar, CallFunc_BooleanOR_ReturnValue) == 0x00018B, "Member 'BP_QueenChar_C_ExecuteUbergraph_BP_QueenChar::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_QueenChar_C_ExecuteUbergraph_BP_QueenChar, CallFunc_K2_GetComponentLocation_ReturnValue_1) == 0x00018C, "Member 'BP_QueenChar_C_ExecuteUbergraph_BP_QueenChar::CallFunc_K2_GetComponentLocation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_QueenChar_C_ExecuteUbergraph_BP_QueenChar, CallFunc_Vector_Distance_ReturnValue) == 0x000198, "Member 'BP_QueenChar_C_ExecuteUbergraph_BP_QueenChar::CallFunc_Vector_Distance_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_QueenChar_C_ExecuteUbergraph_BP_QueenChar, CallFunc_MakeVector_ReturnValue_1) == 0x00019C, "Member 'BP_QueenChar_C_ExecuteUbergraph_BP_QueenChar::CallFunc_MakeVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_QueenChar_C_ExecuteUbergraph_BP_QueenChar, CallFunc_K2_SetTimerDelegate_ReturnValue) == 0x0001A8, "Member 'BP_QueenChar_C_ExecuteUbergraph_BP_QueenChar::CallFunc_K2_SetTimerDelegate_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_QueenChar_C_ExecuteUbergraph_BP_QueenChar, CallFunc_MakeVector_ReturnValue_2) == 0x0001B0, "Member 'BP_QueenChar_C_ExecuteUbergraph_BP_QueenChar::CallFunc_MakeVector_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_QueenChar_C_ExecuteUbergraph_BP_QueenChar, Temp_bool_True_if_break_was_hit_Variable) == 0x0001BC, "Member 'BP_QueenChar_C_ExecuteUbergraph_BP_QueenChar::Temp_bool_True_if_break_was_hit_Variable' has a wrong offset!");
static_assert(offsetof(BP_QueenChar_C_ExecuteUbergraph_BP_QueenChar, CallFunc_Less_FloatFloat_ReturnValue) == 0x0001BD, "Member 'BP_QueenChar_C_ExecuteUbergraph_BP_QueenChar::CallFunc_Less_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_QueenChar_C_ExecuteUbergraph_BP_QueenChar, CallFunc_Not_PreBool_ReturnValue) == 0x0001BE, "Member 'BP_QueenChar_C_ExecuteUbergraph_BP_QueenChar::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_QueenChar_C_ExecuteUbergraph_BP_QueenChar, CallFunc_BooleanAND_ReturnValue) == 0x0001BF, "Member 'BP_QueenChar_C_ExecuteUbergraph_BP_QueenChar::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_QueenChar_C_ExecuteUbergraph_BP_QueenChar, CallFunc_HasAuthority_ReturnValue_4) == 0x0001C0, "Member 'BP_QueenChar_C_ExecuteUbergraph_BP_QueenChar::CallFunc_HasAuthority_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_QueenChar_C_ExecuteUbergraph_BP_QueenChar, CallFunc_IsValid_ReturnValue) == 0x0001C1, "Member 'BP_QueenChar_C_ExecuteUbergraph_BP_QueenChar::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_QueenChar_C_ExecuteUbergraph_BP_QueenChar, CallFunc_IsValid_ReturnValue_1) == 0x0001C2, "Member 'BP_QueenChar_C_ExecuteUbergraph_BP_QueenChar::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_QueenChar_C_ExecuteUbergraph_BP_QueenChar, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x0001C4, "Member 'BP_QueenChar_C_ExecuteUbergraph_BP_QueenChar::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_QueenChar_C_ExecuteUbergraph_BP_QueenChar, CallFunc_BreakRotator_Roll_1) == 0x0001C8, "Member 'BP_QueenChar_C_ExecuteUbergraph_BP_QueenChar::CallFunc_BreakRotator_Roll_1' has a wrong offset!");
static_assert(offsetof(BP_QueenChar_C_ExecuteUbergraph_BP_QueenChar, CallFunc_BreakRotator_Pitch_1) == 0x0001CC, "Member 'BP_QueenChar_C_ExecuteUbergraph_BP_QueenChar::CallFunc_BreakRotator_Pitch_1' has a wrong offset!");
static_assert(offsetof(BP_QueenChar_C_ExecuteUbergraph_BP_QueenChar, CallFunc_BreakRotator_Yaw_1) == 0x0001D0, "Member 'BP_QueenChar_C_ExecuteUbergraph_BP_QueenChar::CallFunc_BreakRotator_Yaw_1' has a wrong offset!");
static_assert(offsetof(BP_QueenChar_C_ExecuteUbergraph_BP_QueenChar, CallFunc_MakeRotator_ReturnValue_1) == 0x0001D4, "Member 'BP_QueenChar_C_ExecuteUbergraph_BP_QueenChar::CallFunc_MakeRotator_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_QueenChar_C_ExecuteUbergraph_BP_QueenChar, CallFunc_Multiply_FloatFloat_ReturnValue_1) == 0x0001E0, "Member 'BP_QueenChar_C_ExecuteUbergraph_BP_QueenChar::CallFunc_Multiply_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_QueenChar_C_ExecuteUbergraph_BP_QueenChar, CallFunc_K2_SetRelativeRotation_SweepHitResult_1) == 0x0001E4, "Member 'BP_QueenChar_C_ExecuteUbergraph_BP_QueenChar::CallFunc_K2_SetRelativeRotation_SweepHitResult_1' has a wrong offset!");

// Function BP_QueenChar.BP_QueenChar_C.Revolving
// 0x0001 (0x0001 - 0x0000)
struct BP_QueenChar_C_Revolving final
{
public:
	bool                                          Revolving_0;                                       // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_QueenChar_C_Revolving) == 0x000001, "Wrong alignment on BP_QueenChar_C_Revolving");
static_assert(sizeof(BP_QueenChar_C_Revolving) == 0x000001, "Wrong size on BP_QueenChar_C_Revolving");
static_assert(offsetof(BP_QueenChar_C_Revolving, Revolving_0) == 0x000000, "Member 'BP_QueenChar_C_Revolving::Revolving_0' has a wrong offset!");

// Function BP_QueenChar.BP_QueenChar_C.RevolvingMulti
// 0x0001 (0x0001 - 0x0000)
struct BP_QueenChar_C_RevolvingMulti final
{
public:
	bool                                          Revolving;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_QueenChar_C_RevolvingMulti) == 0x000001, "Wrong alignment on BP_QueenChar_C_RevolvingMulti");
static_assert(sizeof(BP_QueenChar_C_RevolvingMulti) == 0x000001, "Wrong size on BP_QueenChar_C_RevolvingMulti");
static_assert(offsetof(BP_QueenChar_C_RevolvingMulti, Revolving) == 0x000000, "Member 'BP_QueenChar_C_RevolvingMulti::Revolving' has a wrong offset!");

// Function BP_QueenChar.BP_QueenChar_C.RevolvingServer
// 0x0001 (0x0001 - 0x0000)
struct BP_QueenChar_C_RevolvingServer final
{
public:
	bool                                          Revolving;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_QueenChar_C_RevolvingServer) == 0x000001, "Wrong alignment on BP_QueenChar_C_RevolvingServer");
static_assert(sizeof(BP_QueenChar_C_RevolvingServer) == 0x000001, "Wrong size on BP_QueenChar_C_RevolvingServer");
static_assert(offsetof(BP_QueenChar_C_RevolvingServer, Revolving) == 0x000000, "Member 'BP_QueenChar_C_RevolvingServer::Revolving' has a wrong offset!");

// Function BP_QueenChar.BP_QueenChar_C.RevolvingAll
// 0x0001 (0x0001 - 0x0000)
struct BP_QueenChar_C_RevolvingAll final
{
public:
	bool                                          Revolving;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_QueenChar_C_RevolvingAll) == 0x000001, "Wrong alignment on BP_QueenChar_C_RevolvingAll");
static_assert(sizeof(BP_QueenChar_C_RevolvingAll) == 0x000001, "Wrong size on BP_QueenChar_C_RevolvingAll");
static_assert(offsetof(BP_QueenChar_C_RevolvingAll, Revolving) == 0x000000, "Member 'BP_QueenChar_C_RevolvingAll::Revolving' has a wrong offset!");

// Function BP_QueenChar.BP_QueenChar_C.Throw Piece
// 0x000C (0x000C - 0x0000)
struct BP_QueenChar_C_Throw_Piece final
{
public:
	struct FVector                                Direction;                                         // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_QueenChar_C_Throw_Piece) == 0x000004, "Wrong alignment on BP_QueenChar_C_Throw_Piece");
static_assert(sizeof(BP_QueenChar_C_Throw_Piece) == 0x00000C, "Wrong size on BP_QueenChar_C_Throw_Piece");
static_assert(offsetof(BP_QueenChar_C_Throw_Piece, Direction) == 0x000000, "Member 'BP_QueenChar_C_Throw_Piece::Direction' has a wrong offset!");

// Function BP_QueenChar.BP_QueenChar_C.HoldPiece
// 0x0008 (0x0008 - 0x0000)
struct BP_QueenChar_C_HoldPiece final
{
public:
	class ABP_Piece_C*                            Piece;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_QueenChar_C_HoldPiece) == 0x000008, "Wrong alignment on BP_QueenChar_C_HoldPiece");
static_assert(sizeof(BP_QueenChar_C_HoldPiece) == 0x000008, "Wrong size on BP_QueenChar_C_HoldPiece");
static_assert(offsetof(BP_QueenChar_C_HoldPiece, Piece) == 0x000000, "Member 'BP_QueenChar_C_HoldPiece::Piece' has a wrong offset!");

// Function BP_QueenChar.BP_QueenChar_C.StopShooting
// 0x000C (0x000C - 0x0000)
struct BP_QueenChar_C_StopShooting final
{
public:
	struct FVector                                Direction;                                         // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_QueenChar_C_StopShooting) == 0x000004, "Wrong alignment on BP_QueenChar_C_StopShooting");
static_assert(sizeof(BP_QueenChar_C_StopShooting) == 0x00000C, "Wrong size on BP_QueenChar_C_StopShooting");
static_assert(offsetof(BP_QueenChar_C_StopShooting, Direction) == 0x000000, "Member 'BP_QueenChar_C_StopShooting::Direction' has a wrong offset!");

// Function BP_QueenChar.BP_QueenChar_C.StartShooting
// 0x000C (0x000C - 0x0000)
struct BP_QueenChar_C_StartShooting final
{
public:
	struct FVector                                Direction;                                         // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_QueenChar_C_StartShooting) == 0x000004, "Wrong alignment on BP_QueenChar_C_StartShooting");
static_assert(sizeof(BP_QueenChar_C_StartShooting) == 0x00000C, "Wrong size on BP_QueenChar_C_StartShooting");
static_assert(offsetof(BP_QueenChar_C_StartShooting, Direction) == 0x000000, "Member 'BP_QueenChar_C_StartShooting::Direction' has a wrong offset!");

// Function BP_QueenChar.BP_QueenChar_C.MainAbility
// 0x0038 (0x0038 - 0x0000)
struct BP_QueenChar_C_MainAbility final
{
public:
	TArray<class ABP_Piece_C*>                    FriendlyPieces;                                    // 0x0000(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate)
	struct FRotator                               CallFunc_K2_GetComponentRotation_ReturnValue;      // 0x0010(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_Conv_RotatorToVector_ReturnValue;         // 0x001C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_Piece_C*                            CallFunc_FindClosestFriendlyPiece_Closest_Piece;   // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_QueenChar_C_MainAbility) == 0x000008, "Wrong alignment on BP_QueenChar_C_MainAbility");
static_assert(sizeof(BP_QueenChar_C_MainAbility) == 0x000038, "Wrong size on BP_QueenChar_C_MainAbility");
static_assert(offsetof(BP_QueenChar_C_MainAbility, FriendlyPieces) == 0x000000, "Member 'BP_QueenChar_C_MainAbility::FriendlyPieces' has a wrong offset!");
static_assert(offsetof(BP_QueenChar_C_MainAbility, CallFunc_K2_GetComponentRotation_ReturnValue) == 0x000010, "Member 'BP_QueenChar_C_MainAbility::CallFunc_K2_GetComponentRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_QueenChar_C_MainAbility, CallFunc_Conv_RotatorToVector_ReturnValue) == 0x00001C, "Member 'BP_QueenChar_C_MainAbility::CallFunc_Conv_RotatorToVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_QueenChar_C_MainAbility, CallFunc_FindClosestFriendlyPiece_Closest_Piece) == 0x000028, "Member 'BP_QueenChar_C_MainAbility::CallFunc_FindClosestFriendlyPiece_Closest_Piece' has a wrong offset!");
static_assert(offsetof(BP_QueenChar_C_MainAbility, CallFunc_IsValid_ReturnValue) == 0x000030, "Member 'BP_QueenChar_C_MainAbility::CallFunc_IsValid_ReturnValue' has a wrong offset!");

}

