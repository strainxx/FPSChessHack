#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_RookChar

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "BP_PieceChar_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_RookChar.BP_RookChar_C
// 0x00E0 (0x07D0 - 0x06F0)
class ABP_RookChar_C : public ABP_PieceChar_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_BP_RookChar_C;                      // 0x06F0(0x0008)(ZeroConstructor, Transient, DuplicateTransient, UObjectWrapper)
	class UStaticMeshComponent*                   CrosshairX1;                                       // 0x06F8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	class UStaticMeshComponent*                   CrosshairY1;                                       // 0x0700(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	class UStaticMeshComponent*                   ScopeLensMini;                                     // 0x0708(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	class USceneComponent*                        SnipeLocation;                                     // 0x0710(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	class USceneComponent*                        Scene;                                             // 0x0718(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	class UActorSequenceComponent*                UnscopeAnimation;                                  // 0x0720(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	class UActorSequenceComponent*                ScopeAnimation;                                    // 0x0728(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	class UStaticMeshComponent*                   ScopeLens;                                         // 0x0730(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	class UStaticMeshComponent*                   MeshPlacerHitbox;                                  // 0x0738(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	class USceneComponent*                        MeshPlacerMiddle;                                  // 0x0740(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	class USceneComponent*                        MeshPlacerDefault;                                 // 0x0748(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	class UStaticMeshComponent*                   MeshPlacer;                                        // 0x0750(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	class USceneCaptureComponent2D*               SceneCaptureComponent2D;                           // 0x0758(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	ETimelineDirection                            Scoped__Direction_B16287D4454ADED0672745BFA0A6761D; // 0x0760(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_761[0x7];                                      // 0x0761(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     Scoped;                                            // 0x0768(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	ETimelineDirection                            GoToGrapplePoint__Direction_442277624DBD510168872CAC30844E22; // 0x0770(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_771[0x7];                                      // 0x0771(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     GoToGrapplePoint;                                  // 0x0778(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	float                                         ScopedSensitivity;                                 // 0x0780(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         UnscopedAccuracy;                                  // 0x0784(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          PlacingWall;                                       // 0x0788(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_789[0x3];                                      // 0x0789(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         WallDistance;                                      // 0x078C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         WallZDistance;                                     // 0x0790(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Placable;                                          // 0x0794(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_795[0x3];                                      // 0x0795(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_Destructible_C*                     wall;                                              // 0x0798(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AGrapplingHook_C*                       GrapplingHook;                                     // 0x07A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         GrappleLaunchSpeed;                                // 0x07A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         GrappleForce;                                      // 0x07AC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         GrappleTimeout;                                    // 0x07B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Scoping;                                           // 0x07B4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7B5[0x3];                                      // 0x07B5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         GrappleRange;                                      // 0x07B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         maxDamage;                                         // 0x07BC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Grappling;                                         // 0x07C0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7C1[0x3];                                      // 0x07C1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CurrentGrappleDistance;                            // 0x07C4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ScopedMultiplier;                                  // 0x07C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          GrapplingWall;                                     // 0x07CC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void ExecuteUbergraph_BP_RookChar(int32 EntryPoint);
	void UpdateSensitivityScoped(float Sensitivity);
	void SetAccuracyScoped();
	void InpAxisEvt_Pitch_K2Node_InputAxisEvent_3(float AxisValue);
	void InpAxisEvt_Yaw_K2Node_InputAxisEvent_1(float AxisValue);
	void BreakGrapple();
	void ForceStopScope();
	void UnscopeAll();
	void UnscopeServer();
	void UnscopeMulti();
	void ScopeAll();
	void ScopeServer();
	void ScopeMulti();
	void EnablePlacerClient();
	void FinishGrapple(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void Grapple();
	void LaunchGrapplingHook();
	void SetScopeBlack();
	void SetPlacerLocationServer(const struct FVector& Location);
	void ProjectWall();
	void SetPlacerLocation(const struct FVector& Location);
	void BlackifyWall(class ABP_Wall_C* Target);
	void EndScoping();
	void StartScoping();
	void PlaceWallMulti();
	void PlaceWallServer();
	void InpAxisEvt_MoveScope_K2Node_InputAxisEvent_2(float AxisValue);
	void Scope();
	void Unscope();
	void InpActEvt_Fire_K2Node_InputActionEvent_0(const struct FKey& Key);
	void InpActEvt_Fire_K2Node_InputActionEvent_1(const struct FKey& Key);
	void Scoped__UpdateFunc();
	void Scoped__FinishedFunc();
	void GoToGrapplePoint__UpdateFunc();
	void ReceiveBeginPlay();
	void ReceiveTick(float DeltaSeconds);
	void StopAllPlaying();
	void ShootDirection(const struct FVector& Direction);
	void InpActEvt_Block_K2Node_InputActionEvent_2(const struct FKey& Key);
	void InpActEvt_Block_K2Node_InputActionEvent_3(const struct FKey& Key);
	void GoToGrapplePoint__FinishedFunc();
	void InitializeScopeHUD();
	void MainAbility();
	void DeathCleanup();
	void MovementAbility();
	void CantPlayAnimations(bool* CantPlay);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_RookChar_C">();
	}
	static class ABP_RookChar_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_RookChar_C>();
	}
};
static_assert(alignof(ABP_RookChar_C) == 0x000010, "Wrong alignment on ABP_RookChar_C");
static_assert(sizeof(ABP_RookChar_C) == 0x0007D0, "Wrong size on ABP_RookChar_C");
static_assert(offsetof(ABP_RookChar_C, UberGraphFrame_BP_RookChar_C) == 0x0006F0, "Member 'ABP_RookChar_C::UberGraphFrame_BP_RookChar_C' has a wrong offset!");
static_assert(offsetof(ABP_RookChar_C, CrosshairX1) == 0x0006F8, "Member 'ABP_RookChar_C::CrosshairX1' has a wrong offset!");
static_assert(offsetof(ABP_RookChar_C, CrosshairY1) == 0x000700, "Member 'ABP_RookChar_C::CrosshairY1' has a wrong offset!");
static_assert(offsetof(ABP_RookChar_C, ScopeLensMini) == 0x000708, "Member 'ABP_RookChar_C::ScopeLensMini' has a wrong offset!");
static_assert(offsetof(ABP_RookChar_C, SnipeLocation) == 0x000710, "Member 'ABP_RookChar_C::SnipeLocation' has a wrong offset!");
static_assert(offsetof(ABP_RookChar_C, Scene) == 0x000718, "Member 'ABP_RookChar_C::Scene' has a wrong offset!");
static_assert(offsetof(ABP_RookChar_C, UnscopeAnimation) == 0x000720, "Member 'ABP_RookChar_C::UnscopeAnimation' has a wrong offset!");
static_assert(offsetof(ABP_RookChar_C, ScopeAnimation) == 0x000728, "Member 'ABP_RookChar_C::ScopeAnimation' has a wrong offset!");
static_assert(offsetof(ABP_RookChar_C, ScopeLens) == 0x000730, "Member 'ABP_RookChar_C::ScopeLens' has a wrong offset!");
static_assert(offsetof(ABP_RookChar_C, MeshPlacerHitbox) == 0x000738, "Member 'ABP_RookChar_C::MeshPlacerHitbox' has a wrong offset!");
static_assert(offsetof(ABP_RookChar_C, MeshPlacerMiddle) == 0x000740, "Member 'ABP_RookChar_C::MeshPlacerMiddle' has a wrong offset!");
static_assert(offsetof(ABP_RookChar_C, MeshPlacerDefault) == 0x000748, "Member 'ABP_RookChar_C::MeshPlacerDefault' has a wrong offset!");
static_assert(offsetof(ABP_RookChar_C, MeshPlacer) == 0x000750, "Member 'ABP_RookChar_C::MeshPlacer' has a wrong offset!");
static_assert(offsetof(ABP_RookChar_C, SceneCaptureComponent2D) == 0x000758, "Member 'ABP_RookChar_C::SceneCaptureComponent2D' has a wrong offset!");
static_assert(offsetof(ABP_RookChar_C, Scoped__Direction_B16287D4454ADED0672745BFA0A6761D) == 0x000760, "Member 'ABP_RookChar_C::Scoped__Direction_B16287D4454ADED0672745BFA0A6761D' has a wrong offset!");
static_assert(offsetof(ABP_RookChar_C, Scoped) == 0x000768, "Member 'ABP_RookChar_C::Scoped' has a wrong offset!");
static_assert(offsetof(ABP_RookChar_C, GoToGrapplePoint__Direction_442277624DBD510168872CAC30844E22) == 0x000770, "Member 'ABP_RookChar_C::GoToGrapplePoint__Direction_442277624DBD510168872CAC30844E22' has a wrong offset!");
static_assert(offsetof(ABP_RookChar_C, GoToGrapplePoint) == 0x000778, "Member 'ABP_RookChar_C::GoToGrapplePoint' has a wrong offset!");
static_assert(offsetof(ABP_RookChar_C, ScopedSensitivity) == 0x000780, "Member 'ABP_RookChar_C::ScopedSensitivity' has a wrong offset!");
static_assert(offsetof(ABP_RookChar_C, UnscopedAccuracy) == 0x000784, "Member 'ABP_RookChar_C::UnscopedAccuracy' has a wrong offset!");
static_assert(offsetof(ABP_RookChar_C, PlacingWall) == 0x000788, "Member 'ABP_RookChar_C::PlacingWall' has a wrong offset!");
static_assert(offsetof(ABP_RookChar_C, WallDistance) == 0x00078C, "Member 'ABP_RookChar_C::WallDistance' has a wrong offset!");
static_assert(offsetof(ABP_RookChar_C, WallZDistance) == 0x000790, "Member 'ABP_RookChar_C::WallZDistance' has a wrong offset!");
static_assert(offsetof(ABP_RookChar_C, Placable) == 0x000794, "Member 'ABP_RookChar_C::Placable' has a wrong offset!");
static_assert(offsetof(ABP_RookChar_C, wall) == 0x000798, "Member 'ABP_RookChar_C::wall' has a wrong offset!");
static_assert(offsetof(ABP_RookChar_C, GrapplingHook) == 0x0007A0, "Member 'ABP_RookChar_C::GrapplingHook' has a wrong offset!");
static_assert(offsetof(ABP_RookChar_C, GrappleLaunchSpeed) == 0x0007A8, "Member 'ABP_RookChar_C::GrappleLaunchSpeed' has a wrong offset!");
static_assert(offsetof(ABP_RookChar_C, GrappleForce) == 0x0007AC, "Member 'ABP_RookChar_C::GrappleForce' has a wrong offset!");
static_assert(offsetof(ABP_RookChar_C, GrappleTimeout) == 0x0007B0, "Member 'ABP_RookChar_C::GrappleTimeout' has a wrong offset!");
static_assert(offsetof(ABP_RookChar_C, Scoping) == 0x0007B4, "Member 'ABP_RookChar_C::Scoping' has a wrong offset!");
static_assert(offsetof(ABP_RookChar_C, GrappleRange) == 0x0007B8, "Member 'ABP_RookChar_C::GrappleRange' has a wrong offset!");
static_assert(offsetof(ABP_RookChar_C, maxDamage) == 0x0007BC, "Member 'ABP_RookChar_C::maxDamage' has a wrong offset!");
static_assert(offsetof(ABP_RookChar_C, Grappling) == 0x0007C0, "Member 'ABP_RookChar_C::Grappling' has a wrong offset!");
static_assert(offsetof(ABP_RookChar_C, CurrentGrappleDistance) == 0x0007C4, "Member 'ABP_RookChar_C::CurrentGrappleDistance' has a wrong offset!");
static_assert(offsetof(ABP_RookChar_C, ScopedMultiplier) == 0x0007C8, "Member 'ABP_RookChar_C::ScopedMultiplier' has a wrong offset!");
static_assert(offsetof(ABP_RookChar_C, GrapplingWall) == 0x0007CC, "Member 'ABP_RookChar_C::GrapplingWall' has a wrong offset!");

}

