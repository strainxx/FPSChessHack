#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_RookChar

#include "Basic.hpp"

#include "BP_RookChar_classes.hpp"
#include "BP_RookChar_parameters.hpp"


namespace SDK
{

// Function BP_RookChar.BP_RookChar_C.ExecuteUbergraph_BP_RookChar
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_RookChar_C::ExecuteUbergraph_BP_RookChar(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RookChar_C", "ExecuteUbergraph_BP_RookChar");

	Params::BP_RookChar_C_ExecuteUbergraph_BP_RookChar Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_RookChar.BP_RookChar_C.UpdateSensitivityScoped
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Sensitivity                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_RookChar_C::UpdateSensitivityScoped(float Sensitivity)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RookChar_C", "UpdateSensitivityScoped");

	Params::BP_RookChar_C_UpdateSensitivityScoped Parms{};

	Parms.Sensitivity = Sensitivity;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_RookChar.BP_RookChar_C.SetAccuracyScoped
// (BlueprintCallable, BlueprintEvent)

void ABP_RookChar_C::SetAccuracyScoped()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RookChar_C", "SetAccuracyScoped");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_RookChar.BP_RookChar_C.InpAxisEvt_Pitch_K2Node_InputAxisEvent_3
// (BlueprintEvent)
// Parameters:
// float                                   AxisValue                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_RookChar_C::InpAxisEvt_Pitch_K2Node_InputAxisEvent_3(float AxisValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RookChar_C", "InpAxisEvt_Pitch_K2Node_InputAxisEvent_3");

	Params::BP_RookChar_C_InpAxisEvt_Pitch_K2Node_InputAxisEvent_3 Parms{};

	Parms.AxisValue = AxisValue;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_RookChar.BP_RookChar_C.InpAxisEvt_Yaw_K2Node_InputAxisEvent_1
// (BlueprintEvent)
// Parameters:
// float                                   AxisValue                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_RookChar_C::InpAxisEvt_Yaw_K2Node_InputAxisEvent_1(float AxisValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RookChar_C", "InpAxisEvt_Yaw_K2Node_InputAxisEvent_1");

	Params::BP_RookChar_C_InpAxisEvt_Yaw_K2Node_InputAxisEvent_1 Parms{};

	Parms.AxisValue = AxisValue;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_RookChar.BP_RookChar_C.BreakGrapple
// (BlueprintCallable, BlueprintEvent)

void ABP_RookChar_C::BreakGrapple()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RookChar_C", "BreakGrapple");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_RookChar.BP_RookChar_C.ForceStopScope
// (BlueprintCallable, BlueprintEvent)

void ABP_RookChar_C::ForceStopScope()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RookChar_C", "ForceStopScope");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_RookChar.BP_RookChar_C.UnscopeAll
// (BlueprintCallable, BlueprintEvent)

void ABP_RookChar_C::UnscopeAll()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RookChar_C", "UnscopeAll");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_RookChar.BP_RookChar_C.UnscopeServer
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)

void ABP_RookChar_C::UnscopeServer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RookChar_C", "UnscopeServer");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_RookChar.BP_RookChar_C.UnscopeMulti
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)

void ABP_RookChar_C::UnscopeMulti()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RookChar_C", "UnscopeMulti");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_RookChar.BP_RookChar_C.ScopeAll
// (BlueprintCallable, BlueprintEvent)

void ABP_RookChar_C::ScopeAll()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RookChar_C", "ScopeAll");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_RookChar.BP_RookChar_C.ScopeServer
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)

void ABP_RookChar_C::ScopeServer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RookChar_C", "ScopeServer");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_RookChar.BP_RookChar_C.ScopeMulti
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)

void ABP_RookChar_C::ScopeMulti()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RookChar_C", "ScopeMulti");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_RookChar.BP_RookChar_C.EnablePlacerClient
// (Net, NetClient, BlueprintCallable, BlueprintEvent)

void ABP_RookChar_C::EnablePlacerClient()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RookChar_C", "EnablePlacerClient");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_RookChar.BP_RookChar_C.FinishGrapple
// (HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UPrimitiveComponent*              OverlappedComponent                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           OtherActor                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UPrimitiveComponent*              OtherComp                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   OtherBodyIndex                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bFromSweep                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FHitResult                       SweepResult                                            (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)

void ABP_RookChar_C::FinishGrapple(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RookChar_C", "FinishGrapple");

	Params::BP_RookChar_C_FinishGrapple Parms{};

	Parms.OverlappedComponent = OverlappedComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.OtherBodyIndex = OtherBodyIndex;
	Parms.bFromSweep = bFromSweep;
	Parms.SweepResult = std::move(SweepResult);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_RookChar.BP_RookChar_C.Grapple
// (BlueprintCallable, BlueprintEvent)

void ABP_RookChar_C::Grapple()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RookChar_C", "Grapple");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_RookChar.BP_RookChar_C.LaunchGrapplingHook
// (BlueprintCallable, BlueprintEvent)

void ABP_RookChar_C::LaunchGrapplingHook()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RookChar_C", "LaunchGrapplingHook");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_RookChar.BP_RookChar_C.SetScopeBlack
// (Net, NetClient, BlueprintCallable, BlueprintEvent)

void ABP_RookChar_C::SetScopeBlack()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RookChar_C", "SetScopeBlack");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_RookChar.BP_RookChar_C.SetPlacerLocationServer
// (Net, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          Location                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_RookChar_C::SetPlacerLocationServer(const struct FVector& Location)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RookChar_C", "SetPlacerLocationServer");

	Params::BP_RookChar_C_SetPlacerLocationServer Parms{};

	Parms.Location = std::move(Location);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_RookChar.BP_RookChar_C.ProjectWall
// (Net, NetClient, BlueprintCallable, BlueprintEvent)

void ABP_RookChar_C::ProjectWall()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RookChar_C", "ProjectWall");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_RookChar.BP_RookChar_C.SetPlacerLocation
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          Location                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_RookChar_C::SetPlacerLocation(const struct FVector& Location)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RookChar_C", "SetPlacerLocation");

	Params::BP_RookChar_C_SetPlacerLocation Parms{};

	Parms.Location = std::move(Location);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_RookChar.BP_RookChar_C.BlackifyWall
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_Wall_C*                       Target                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_RookChar_C::BlackifyWall(class ABP_Wall_C* Target)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RookChar_C", "BlackifyWall");

	Params::BP_RookChar_C_BlackifyWall Parms{};

	Parms.Target = Target;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_RookChar.BP_RookChar_C.EndScoping
// (BlueprintCallable, BlueprintEvent)

void ABP_RookChar_C::EndScoping()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RookChar_C", "EndScoping");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_RookChar.BP_RookChar_C.StartScoping
// (BlueprintCallable, BlueprintEvent)

void ABP_RookChar_C::StartScoping()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RookChar_C", "StartScoping");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_RookChar.BP_RookChar_C.PlaceWallMulti
// (Net, NetMulticast, BlueprintCallable, BlueprintEvent)

void ABP_RookChar_C::PlaceWallMulti()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RookChar_C", "PlaceWallMulti");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_RookChar.BP_RookChar_C.PlaceWallServer
// (Net, NetServer, BlueprintCallable, BlueprintEvent)

void ABP_RookChar_C::PlaceWallServer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RookChar_C", "PlaceWallServer");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_RookChar.BP_RookChar_C.InpAxisEvt_MoveScope_K2Node_InputAxisEvent_2
// (BlueprintEvent)
// Parameters:
// float                                   AxisValue                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_RookChar_C::InpAxisEvt_MoveScope_K2Node_InputAxisEvent_2(float AxisValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RookChar_C", "InpAxisEvt_MoveScope_K2Node_InputAxisEvent_2");

	Params::BP_RookChar_C_InpAxisEvt_MoveScope_K2Node_InputAxisEvent_2 Parms{};

	Parms.AxisValue = AxisValue;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_RookChar.BP_RookChar_C.Scope
// (BlueprintCallable, BlueprintEvent)

void ABP_RookChar_C::Scope()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RookChar_C", "Scope");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_RookChar.BP_RookChar_C.Unscope
// (BlueprintCallable, BlueprintEvent)

void ABP_RookChar_C::Unscope()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RookChar_C", "Unscope");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_RookChar.BP_RookChar_C.InpActEvt_Fire_K2Node_InputActionEvent_0
// (BlueprintEvent)
// Parameters:
// struct FKey                             Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ABP_RookChar_C::InpActEvt_Fire_K2Node_InputActionEvent_0(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RookChar_C", "InpActEvt_Fire_K2Node_InputActionEvent_0");

	Params::BP_RookChar_C_InpActEvt_Fire_K2Node_InputActionEvent_0 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_RookChar.BP_RookChar_C.InpActEvt_Fire_K2Node_InputActionEvent_1
// (BlueprintEvent)
// Parameters:
// struct FKey                             Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ABP_RookChar_C::InpActEvt_Fire_K2Node_InputActionEvent_1(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RookChar_C", "InpActEvt_Fire_K2Node_InputActionEvent_1");

	Params::BP_RookChar_C_InpActEvt_Fire_K2Node_InputActionEvent_1 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_RookChar.BP_RookChar_C.Scoped__UpdateFunc
// (BlueprintEvent)

void ABP_RookChar_C::Scoped__UpdateFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RookChar_C", "Scoped__UpdateFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_RookChar.BP_RookChar_C.Scoped__FinishedFunc
// (BlueprintEvent)

void ABP_RookChar_C::Scoped__FinishedFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RookChar_C", "Scoped__FinishedFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_RookChar.BP_RookChar_C.GoToGrapplePoint__UpdateFunc
// (BlueprintEvent)

void ABP_RookChar_C::GoToGrapplePoint__UpdateFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RookChar_C", "GoToGrapplePoint__UpdateFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_RookChar.BP_RookChar_C.ReceiveBeginPlay
// (Event, Protected, BlueprintEvent)

void ABP_RookChar_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RookChar_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_RookChar.BP_RookChar_C.ReceiveTick
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_RookChar_C::ReceiveTick(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RookChar_C", "ReceiveTick");

	Params::BP_RookChar_C_ReceiveTick Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_RookChar.BP_RookChar_C.StopAllPlaying
// (BlueprintCallable, BlueprintEvent)

void ABP_RookChar_C::StopAllPlaying()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RookChar_C", "StopAllPlaying");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_RookChar.BP_RookChar_C.ShootDirection
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          Direction                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_RookChar_C::ShootDirection(const struct FVector& Direction)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RookChar_C", "ShootDirection");

	Params::BP_RookChar_C_ShootDirection Parms{};

	Parms.Direction = std::move(Direction);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_RookChar.BP_RookChar_C.InpActEvt_Block_K2Node_InputActionEvent_2
// (BlueprintEvent)
// Parameters:
// struct FKey                             Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ABP_RookChar_C::InpActEvt_Block_K2Node_InputActionEvent_2(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RookChar_C", "InpActEvt_Block_K2Node_InputActionEvent_2");

	Params::BP_RookChar_C_InpActEvt_Block_K2Node_InputActionEvent_2 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_RookChar.BP_RookChar_C.InpActEvt_Block_K2Node_InputActionEvent_3
// (BlueprintEvent)
// Parameters:
// struct FKey                             Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ABP_RookChar_C::InpActEvt_Block_K2Node_InputActionEvent_3(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RookChar_C", "InpActEvt_Block_K2Node_InputActionEvent_3");

	Params::BP_RookChar_C_InpActEvt_Block_K2Node_InputActionEvent_3 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_RookChar.BP_RookChar_C.GoToGrapplePoint__FinishedFunc
// (BlueprintEvent)

void ABP_RookChar_C::GoToGrapplePoint__FinishedFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RookChar_C", "GoToGrapplePoint__FinishedFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_RookChar.BP_RookChar_C.InitializeScopeHUD
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_RookChar_C::InitializeScopeHUD()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RookChar_C", "InitializeScopeHUD");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_RookChar.BP_RookChar_C.MainAbility
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_RookChar_C::MainAbility()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RookChar_C", "MainAbility");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_RookChar.BP_RookChar_C.DeathCleanup
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_RookChar_C::DeathCleanup()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RookChar_C", "DeathCleanup");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_RookChar.BP_RookChar_C.MovementAbility
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_RookChar_C::MovementAbility()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RookChar_C", "MovementAbility");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_RookChar.BP_RookChar_C.CantPlayAnimations
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    CantPlay                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_RookChar_C::CantPlayAnimations(bool* CantPlay)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RookChar_C", "CantPlayAnimations");

	Params::BP_RookChar_C_CantPlayAnimations Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (CantPlay != nullptr)
		*CantPlay = Parms.CantPlay;
}

}

