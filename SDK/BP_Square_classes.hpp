#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Square

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_Square.BP_Square_C
// 0x0058 (0x0278 - 0x0220)
class ABP_Square_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0220(0x0008)(ZeroConstructor, Transient, DuplicateTransient, UObjectWrapper)
	class UStaticMeshComponent*                   SquareSelect;                                      // 0x0228(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        MovePoint;                                         // 0x0230(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Circle;                                            // 0x0238(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   StaticMesh;                                        // 0x0240(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPointLightComponent*                   PointLight;                                        // 0x0248(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x0250(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class ABP_Piece_C*                            OccupiedPiece;                                     // 0x0258(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              Position;                                          // 0x0260(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_Piece_C*                            CastlingRook;                                      // 0x0268(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          WillMakeEnPassantTarget;                           // 0x0270(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsEnPassantTarget;                                 // 0x0271(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          BlackSelected;                                     // 0x0272(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          Selected;                                          // 0x0273(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void ExecuteUbergraph_BP_Square(int32 EntryPoint);
	void Unselect();
	void SelectColor(bool White);
	void ReceiveTick(float DeltaSeconds);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_Square_C">();
	}
	static class ABP_Square_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_Square_C>();
	}
};
static_assert(alignof(ABP_Square_C) == 0x000008, "Wrong alignment on ABP_Square_C");
static_assert(sizeof(ABP_Square_C) == 0x000278, "Wrong size on ABP_Square_C");
static_assert(offsetof(ABP_Square_C, UberGraphFrame) == 0x000220, "Member 'ABP_Square_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_Square_C, SquareSelect) == 0x000228, "Member 'ABP_Square_C::SquareSelect' has a wrong offset!");
static_assert(offsetof(ABP_Square_C, MovePoint) == 0x000230, "Member 'ABP_Square_C::MovePoint' has a wrong offset!");
static_assert(offsetof(ABP_Square_C, Circle) == 0x000238, "Member 'ABP_Square_C::Circle' has a wrong offset!");
static_assert(offsetof(ABP_Square_C, StaticMesh) == 0x000240, "Member 'ABP_Square_C::StaticMesh' has a wrong offset!");
static_assert(offsetof(ABP_Square_C, PointLight) == 0x000248, "Member 'ABP_Square_C::PointLight' has a wrong offset!");
static_assert(offsetof(ABP_Square_C, DefaultSceneRoot) == 0x000250, "Member 'ABP_Square_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_Square_C, OccupiedPiece) == 0x000258, "Member 'ABP_Square_C::OccupiedPiece' has a wrong offset!");
static_assert(offsetof(ABP_Square_C, Position) == 0x000260, "Member 'ABP_Square_C::Position' has a wrong offset!");
static_assert(offsetof(ABP_Square_C, CastlingRook) == 0x000268, "Member 'ABP_Square_C::CastlingRook' has a wrong offset!");
static_assert(offsetof(ABP_Square_C, WillMakeEnPassantTarget) == 0x000270, "Member 'ABP_Square_C::WillMakeEnPassantTarget' has a wrong offset!");
static_assert(offsetof(ABP_Square_C, IsEnPassantTarget) == 0x000271, "Member 'ABP_Square_C::IsEnPassantTarget' has a wrong offset!");
static_assert(offsetof(ABP_Square_C, BlackSelected) == 0x000272, "Member 'ABP_Square_C::BlackSelected' has a wrong offset!");
static_assert(offsetof(ABP_Square_C, Selected) == 0x000273, "Member 'ABP_Square_C::Selected' has a wrong offset!");

}

