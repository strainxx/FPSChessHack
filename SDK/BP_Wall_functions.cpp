#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Wall

#include "Basic.hpp"

#include "BP_Wall_classes.hpp"
#include "BP_Wall_parameters.hpp"


namespace SDK
{

// Function BP_Wall.BP_Wall_C.ExecuteUbergraph_BP_Wall
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Wall_C::ExecuteUbergraph_BP_Wall(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Wall_C", "ExecuteUbergraph_BP_Wall");

	Params::BP_Wall_C_ExecuteUbergraph_BP_Wall Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Wall.BP_Wall_C.ReceiveTick
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Wall_C::ReceiveTick(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Wall_C", "ReceiveTick");

	Params::BP_Wall_C_ReceiveTick Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Wall.BP_Wall_C.AnimateLocal
// (BlueprintCallable, BlueprintEvent)

void ABP_Wall_C::AnimateLocal()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Wall_C", "AnimateLocal");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Wall.BP_Wall_C.SpawnAnimate
// (Net, NetMulticast, BlueprintCallable, BlueprintEvent)

void ABP_Wall_C::SpawnAnimate()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Wall_C", "SpawnAnimate");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Wall.BP_Wall_C.Timeline_0__UpdateFunc
// (BlueprintEvent)

void ABP_Wall_C::Timeline_0__UpdateFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Wall_C", "Timeline_0__UpdateFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Wall.BP_Wall_C.Timeline_0__FinishedFunc
// (BlueprintEvent)

void ABP_Wall_C::Timeline_0__FinishedFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Wall_C", "Timeline_0__FinishedFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Wall.BP_Wall_C.InitAsReplayActor
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_Wall_C::InitAsReplayActor()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Wall_C", "InitAsReplayActor");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Wall.BP_Wall_C.TakeDamage
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Amount                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   ImpulseStrength                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Wall_C::TakeDamage(float Amount, float ImpulseStrength)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Wall_C", "TakeDamage");

	Params::BP_Wall_C_TakeDamage Parms{};

	Parms.Amount = Amount;
	Parms.ImpulseStrength = ImpulseStrength;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Wall.BP_Wall_C.ReceiveBeginPlay
// (Event, Protected, BlueprintEvent)

void ABP_Wall_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Wall_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}

}

