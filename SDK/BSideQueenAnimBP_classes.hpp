#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BSideQueenAnimBP

#include "Basic.hpp"

#include "AnimGraphRuntime_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// AnimBlueprintGeneratedClass BSideQueenAnimBP.BSideQueenAnimBP_C
// 0x09F0 (0x0CB0 - 0x02C0)
class UBSideQueenAnimBP_C final : public UAnimInstance
{
public:
	uint8                                         Pad_2B8[0x8];                                      // 0x02B8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x02C0(0x0008)(ZeroConstructor, Transient, DuplicateTransient, UObjectWrapper)
	struct FAnimNode_Root                         AnimGraphNode_Root;                                // 0x02C8(0x0030)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_7;                  // 0x02F8(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_6;                  // 0x0320(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_5;                  // 0x0348(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_4;                  // 0x0370(0x0028)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_4;                    // 0x0398(0x0080)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_6;                       // 0x0418(0x0030)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_3;                    // 0x0448(0x0080)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_5;                       // 0x04C8(0x0030)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_2;                    // 0x04F8(0x0080)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_4;                       // 0x0578(0x0030)()
	struct FAnimNode_BlendSpacePlayer             AnimGraphNode_BlendSpacePlayer;                    // 0x05A8(0x00E8)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_3;                       // 0x0690(0x0030)()
	struct FAnimNode_StateMachine                 AnimGraphNode_StateMachine_1;                      // 0x06C0(0x00B0)()
	struct FAnimNode_SaveCachedPose               AnimGraphNode_SaveCachedPose;                      // 0x0770(0x0158)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_3;                  // 0x08C8(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_2;                  // 0x08F0(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_1;                  // 0x0918(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult;                    // 0x0940(0x0028)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_1;                    // 0x0968(0x0080)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_2;                       // 0x09E8(0x0030)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_1;                       // 0x0A18(0x0030)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer;                      // 0x0A48(0x0080)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult;                         // 0x0AC8(0x0030)()
	struct FAnimNode_StateMachine                 AnimGraphNode_StateMachine;                        // 0x0AF8(0x00B0)()
	struct FAnimNode_UseCachedPose                AnimGraphNode_UseCachedPose;                       // 0x0BA8(0x0028)()
	struct FAnimNode_ApplyAdditive                AnimGraphNode_ApplyAdditive;                       // 0x0BD0(0x00C8)()
	class ABP_BSideQueenChar_C*                   Player;                                            // 0x0C98(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	float                                         Speed;                                             // 0x0CA0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FirePlayrate;                                      // 0x0CA4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Fire;                                              // 0x0CA8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          Jumping;                                           // 0x0CA9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          Blocking;                                          // 0x0CAA(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          Beam;                                              // 0x0CAB(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          Slamming;                                          // 0x0CAC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void ExecuteUbergraph_BSideQueenAnimBP(int32 EntryPoint);
	void AnimNotify_FireWhip();
	void AnimNotify_SwordWoosh();
	void AnimNotify_PlayedShoot();
	void PlayShoot();
	void BlueprintBeginPlay();
	void BlueprintUpdateAnimation(float DeltaTimeX);
	void EvaluateGraphExposedInputs_ExecuteUbergraph_BSideQueenAnimBP_AnimGraphNode_TransitionResult_6B594A77497321E898936C87B5038989();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_BSideQueenAnimBP_AnimGraphNode_TransitionResult_5DCC37D34042569509DBF2A5AA286C21();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_BSideQueenAnimBP_AnimGraphNode_TransitionResult_A6825B42484C569EAC5073AD8A70B06B();
	void AnimGraph(struct FPoseLink* AnimGraph_0);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BSideQueenAnimBP_C">();
	}
	static class UBSideQueenAnimBP_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBSideQueenAnimBP_C>();
	}
};
static_assert(alignof(UBSideQueenAnimBP_C) == 0x000010, "Wrong alignment on UBSideQueenAnimBP_C");
static_assert(sizeof(UBSideQueenAnimBP_C) == 0x000CB0, "Wrong size on UBSideQueenAnimBP_C");
static_assert(offsetof(UBSideQueenAnimBP_C, UberGraphFrame) == 0x0002C0, "Member 'UBSideQueenAnimBP_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UBSideQueenAnimBP_C, AnimGraphNode_Root) == 0x0002C8, "Member 'UBSideQueenAnimBP_C::AnimGraphNode_Root' has a wrong offset!");
static_assert(offsetof(UBSideQueenAnimBP_C, AnimGraphNode_TransitionResult_7) == 0x0002F8, "Member 'UBSideQueenAnimBP_C::AnimGraphNode_TransitionResult_7' has a wrong offset!");
static_assert(offsetof(UBSideQueenAnimBP_C, AnimGraphNode_TransitionResult_6) == 0x000320, "Member 'UBSideQueenAnimBP_C::AnimGraphNode_TransitionResult_6' has a wrong offset!");
static_assert(offsetof(UBSideQueenAnimBP_C, AnimGraphNode_TransitionResult_5) == 0x000348, "Member 'UBSideQueenAnimBP_C::AnimGraphNode_TransitionResult_5' has a wrong offset!");
static_assert(offsetof(UBSideQueenAnimBP_C, AnimGraphNode_TransitionResult_4) == 0x000370, "Member 'UBSideQueenAnimBP_C::AnimGraphNode_TransitionResult_4' has a wrong offset!");
static_assert(offsetof(UBSideQueenAnimBP_C, AnimGraphNode_SequencePlayer_4) == 0x000398, "Member 'UBSideQueenAnimBP_C::AnimGraphNode_SequencePlayer_4' has a wrong offset!");
static_assert(offsetof(UBSideQueenAnimBP_C, AnimGraphNode_StateResult_6) == 0x000418, "Member 'UBSideQueenAnimBP_C::AnimGraphNode_StateResult_6' has a wrong offset!");
static_assert(offsetof(UBSideQueenAnimBP_C, AnimGraphNode_SequencePlayer_3) == 0x000448, "Member 'UBSideQueenAnimBP_C::AnimGraphNode_SequencePlayer_3' has a wrong offset!");
static_assert(offsetof(UBSideQueenAnimBP_C, AnimGraphNode_StateResult_5) == 0x0004C8, "Member 'UBSideQueenAnimBP_C::AnimGraphNode_StateResult_5' has a wrong offset!");
static_assert(offsetof(UBSideQueenAnimBP_C, AnimGraphNode_SequencePlayer_2) == 0x0004F8, "Member 'UBSideQueenAnimBP_C::AnimGraphNode_SequencePlayer_2' has a wrong offset!");
static_assert(offsetof(UBSideQueenAnimBP_C, AnimGraphNode_StateResult_4) == 0x000578, "Member 'UBSideQueenAnimBP_C::AnimGraphNode_StateResult_4' has a wrong offset!");
static_assert(offsetof(UBSideQueenAnimBP_C, AnimGraphNode_BlendSpacePlayer) == 0x0005A8, "Member 'UBSideQueenAnimBP_C::AnimGraphNode_BlendSpacePlayer' has a wrong offset!");
static_assert(offsetof(UBSideQueenAnimBP_C, AnimGraphNode_StateResult_3) == 0x000690, "Member 'UBSideQueenAnimBP_C::AnimGraphNode_StateResult_3' has a wrong offset!");
static_assert(offsetof(UBSideQueenAnimBP_C, AnimGraphNode_StateMachine_1) == 0x0006C0, "Member 'UBSideQueenAnimBP_C::AnimGraphNode_StateMachine_1' has a wrong offset!");
static_assert(offsetof(UBSideQueenAnimBP_C, AnimGraphNode_SaveCachedPose) == 0x000770, "Member 'UBSideQueenAnimBP_C::AnimGraphNode_SaveCachedPose' has a wrong offset!");
static_assert(offsetof(UBSideQueenAnimBP_C, AnimGraphNode_TransitionResult_3) == 0x0008C8, "Member 'UBSideQueenAnimBP_C::AnimGraphNode_TransitionResult_3' has a wrong offset!");
static_assert(offsetof(UBSideQueenAnimBP_C, AnimGraphNode_TransitionResult_2) == 0x0008F0, "Member 'UBSideQueenAnimBP_C::AnimGraphNode_TransitionResult_2' has a wrong offset!");
static_assert(offsetof(UBSideQueenAnimBP_C, AnimGraphNode_TransitionResult_1) == 0x000918, "Member 'UBSideQueenAnimBP_C::AnimGraphNode_TransitionResult_1' has a wrong offset!");
static_assert(offsetof(UBSideQueenAnimBP_C, AnimGraphNode_TransitionResult) == 0x000940, "Member 'UBSideQueenAnimBP_C::AnimGraphNode_TransitionResult' has a wrong offset!");
static_assert(offsetof(UBSideQueenAnimBP_C, AnimGraphNode_SequencePlayer_1) == 0x000968, "Member 'UBSideQueenAnimBP_C::AnimGraphNode_SequencePlayer_1' has a wrong offset!");
static_assert(offsetof(UBSideQueenAnimBP_C, AnimGraphNode_StateResult_2) == 0x0009E8, "Member 'UBSideQueenAnimBP_C::AnimGraphNode_StateResult_2' has a wrong offset!");
static_assert(offsetof(UBSideQueenAnimBP_C, AnimGraphNode_StateResult_1) == 0x000A18, "Member 'UBSideQueenAnimBP_C::AnimGraphNode_StateResult_1' has a wrong offset!");
static_assert(offsetof(UBSideQueenAnimBP_C, AnimGraphNode_SequencePlayer) == 0x000A48, "Member 'UBSideQueenAnimBP_C::AnimGraphNode_SequencePlayer' has a wrong offset!");
static_assert(offsetof(UBSideQueenAnimBP_C, AnimGraphNode_StateResult) == 0x000AC8, "Member 'UBSideQueenAnimBP_C::AnimGraphNode_StateResult' has a wrong offset!");
static_assert(offsetof(UBSideQueenAnimBP_C, AnimGraphNode_StateMachine) == 0x000AF8, "Member 'UBSideQueenAnimBP_C::AnimGraphNode_StateMachine' has a wrong offset!");
static_assert(offsetof(UBSideQueenAnimBP_C, AnimGraphNode_UseCachedPose) == 0x000BA8, "Member 'UBSideQueenAnimBP_C::AnimGraphNode_UseCachedPose' has a wrong offset!");
static_assert(offsetof(UBSideQueenAnimBP_C, AnimGraphNode_ApplyAdditive) == 0x000BD0, "Member 'UBSideQueenAnimBP_C::AnimGraphNode_ApplyAdditive' has a wrong offset!");
static_assert(offsetof(UBSideQueenAnimBP_C, Player) == 0x000C98, "Member 'UBSideQueenAnimBP_C::Player' has a wrong offset!");
static_assert(offsetof(UBSideQueenAnimBP_C, Speed) == 0x000CA0, "Member 'UBSideQueenAnimBP_C::Speed' has a wrong offset!");
static_assert(offsetof(UBSideQueenAnimBP_C, FirePlayrate) == 0x000CA4, "Member 'UBSideQueenAnimBP_C::FirePlayrate' has a wrong offset!");
static_assert(offsetof(UBSideQueenAnimBP_C, Fire) == 0x000CA8, "Member 'UBSideQueenAnimBP_C::Fire' has a wrong offset!");
static_assert(offsetof(UBSideQueenAnimBP_C, Jumping) == 0x000CA9, "Member 'UBSideQueenAnimBP_C::Jumping' has a wrong offset!");
static_assert(offsetof(UBSideQueenAnimBP_C, Blocking) == 0x000CAA, "Member 'UBSideQueenAnimBP_C::Blocking' has a wrong offset!");
static_assert(offsetof(UBSideQueenAnimBP_C, Beam) == 0x000CAB, "Member 'UBSideQueenAnimBP_C::Beam' has a wrong offset!");
static_assert(offsetof(UBSideQueenAnimBP_C, Slamming) == 0x000CAC, "Member 'UBSideQueenAnimBP_C::Slamming' has a wrong offset!");

}

