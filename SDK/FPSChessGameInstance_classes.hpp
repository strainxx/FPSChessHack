#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: FPSChessGameInstance

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "BoardInfo_structs.hpp"
#include "ErrorType_structs.hpp"
#include "AdvancedSessions_structs.hpp"
#include "AdvancedSessions_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass FPSChessGameInstance.FPSChessGameInstance_C
// 0x00F0 (0x0318 - 0x0228)
class UFPSChessGameInstance_C final : public UAdvancedFriendsGameInstance
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0228(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	bool                                          isDefaultBoard;                                    // 0x0230(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          isLAN;                                             // 0x0231(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_232[0x6];                                      // 0x0232(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 RoomName;                                          // 0x0238(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	struct FBoardInfo                             BoardInfo;                                         // 0x0248(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	float                                         MouseSensitivity;                                  // 0x0268(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         StickSensitivity;                                  // 0x026C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 Description;                                       // 0x0270(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	bool                                          anyFound;                                          // 0x0280(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          joiningGame;                                       // 0x0281(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_282[0x6];                                      // 0x0282(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(float Sensitivity, bool Player2)> ChangeSensitivity;                                 // 0x0288(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	ErrorType                                     HostLeft;                                          // 0x0298(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_299[0x7];                                      // 0x0299(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(bool NewParam)> ChangeInvertY;                                     // 0x02A0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TMulticastInlineDelegate<void(float Sensitivity)> ChangeSensitivityScoped;                           // 0x02B0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TMulticastInlineDelegate<void(bool ChatEnabled)> ChangeChatEnabled;                                 // 0x02C0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	ENetworkFailure                               NetworkFailure;                                    // 0x02D0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          isBSide;                                           // 0x02D1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2D2[0x2];                                      // 0x02D2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ProjectVersion;                                    // 0x02D4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FBoardInfo                             DefaultBoardInfo;                                  // 0x02D8(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	bool                                          PasswordProtected;                                 // 0x02F8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2F9[0x7];                                      // 0x02F9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 PasswordString;                                    // 0x0300(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	bool                                          isLocal;                                           // 0x0310(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void ExecuteUbergraph_FPSChessGameInstance(int32 EntryPoint);
	void ReceiveInit();
	void ChangeChatEnabledEvent(bool ChatEnabled);
	void ChangeSensitivityScopedEvent(float Sensitivity);
	void ChangeInvertYEvent(bool InvertY);
	void RematchGame();
	void ReceiveShutdown();
	void HandleNetworkError(ENetworkFailure FailureType, bool bIsServer);
	void ChangeSensitivityEvent(float Sensitivity, bool Player2);
	void OnSessionInviteAccepted(int32 LocalPlayerNum, const struct FBPUniqueNetId& PersonInvited, const struct FBlueprintSessionResult& SessionToJoin);
	void OnSessionInviteReceived(int32 LocalPlayerNum, const struct FBPUniqueNetId& PersonInviting, const class FString& AppId, const struct FBlueprintSessionResult& SessionToJoin);
	void JoinGame(const struct FBlueprintSessionResult& Session, class UUMG_Session_C* UMGSession, bool CheckFull, bool LAN);
	void HostGame(bool isLAN_0, const class FString& RoomName_0, const class FString& Desciption, bool PasswordProtected_0, const class FString& Password);
	void OnSuccess_5083F3354C593952FDE933BE08129C41(const TArray<struct FBlueprintSessionResult>& Results);
	void OnFailure_5083F3354C593952FDE933BE08129C41(const TArray<struct FBlueprintSessionResult>& Results);
	void OnSuccess_0E679B8D440EAE38D8F3D8934BC522C1(const TArray<struct FBlueprintSessionResult>& Results);
	void OnFailure_0E679B8D440EAE38D8F3D8934BC522C1(const TArray<struct FBlueprintSessionResult>& Results);
	void OnSuccess_66C4EA7F4AAAF12C9093359DE0169AE3();
	void OnFailure_66C4EA7F4AAAF12C9093359DE0169AE3();
	void OnSuccess_2B0637A340EFC1DAA86D669057CD3134();
	void OnFailure_2B0637A340EFC1DAA86D669057CD3134();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"FPSChessGameInstance_C">();
	}
	static class UFPSChessGameInstance_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFPSChessGameInstance_C>();
	}
};
static_assert(alignof(UFPSChessGameInstance_C) == 0x000008, "Wrong alignment on UFPSChessGameInstance_C");
static_assert(sizeof(UFPSChessGameInstance_C) == 0x000318, "Wrong size on UFPSChessGameInstance_C");
static_assert(offsetof(UFPSChessGameInstance_C, UberGraphFrame) == 0x000228, "Member 'UFPSChessGameInstance_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UFPSChessGameInstance_C, isDefaultBoard) == 0x000230, "Member 'UFPSChessGameInstance_C::isDefaultBoard' has a wrong offset!");
static_assert(offsetof(UFPSChessGameInstance_C, isLAN) == 0x000231, "Member 'UFPSChessGameInstance_C::isLAN' has a wrong offset!");
static_assert(offsetof(UFPSChessGameInstance_C, RoomName) == 0x000238, "Member 'UFPSChessGameInstance_C::RoomName' has a wrong offset!");
static_assert(offsetof(UFPSChessGameInstance_C, BoardInfo) == 0x000248, "Member 'UFPSChessGameInstance_C::BoardInfo' has a wrong offset!");
static_assert(offsetof(UFPSChessGameInstance_C, MouseSensitivity) == 0x000268, "Member 'UFPSChessGameInstance_C::MouseSensitivity' has a wrong offset!");
static_assert(offsetof(UFPSChessGameInstance_C, StickSensitivity) == 0x00026C, "Member 'UFPSChessGameInstance_C::StickSensitivity' has a wrong offset!");
static_assert(offsetof(UFPSChessGameInstance_C, Description) == 0x000270, "Member 'UFPSChessGameInstance_C::Description' has a wrong offset!");
static_assert(offsetof(UFPSChessGameInstance_C, anyFound) == 0x000280, "Member 'UFPSChessGameInstance_C::anyFound' has a wrong offset!");
static_assert(offsetof(UFPSChessGameInstance_C, joiningGame) == 0x000281, "Member 'UFPSChessGameInstance_C::joiningGame' has a wrong offset!");
static_assert(offsetof(UFPSChessGameInstance_C, ChangeSensitivity) == 0x000288, "Member 'UFPSChessGameInstance_C::ChangeSensitivity' has a wrong offset!");
static_assert(offsetof(UFPSChessGameInstance_C, HostLeft) == 0x000298, "Member 'UFPSChessGameInstance_C::HostLeft' has a wrong offset!");
static_assert(offsetof(UFPSChessGameInstance_C, ChangeInvertY) == 0x0002A0, "Member 'UFPSChessGameInstance_C::ChangeInvertY' has a wrong offset!");
static_assert(offsetof(UFPSChessGameInstance_C, ChangeSensitivityScoped) == 0x0002B0, "Member 'UFPSChessGameInstance_C::ChangeSensitivityScoped' has a wrong offset!");
static_assert(offsetof(UFPSChessGameInstance_C, ChangeChatEnabled) == 0x0002C0, "Member 'UFPSChessGameInstance_C::ChangeChatEnabled' has a wrong offset!");
static_assert(offsetof(UFPSChessGameInstance_C, NetworkFailure) == 0x0002D0, "Member 'UFPSChessGameInstance_C::NetworkFailure' has a wrong offset!");
static_assert(offsetof(UFPSChessGameInstance_C, isBSide) == 0x0002D1, "Member 'UFPSChessGameInstance_C::isBSide' has a wrong offset!");
static_assert(offsetof(UFPSChessGameInstance_C, ProjectVersion) == 0x0002D4, "Member 'UFPSChessGameInstance_C::ProjectVersion' has a wrong offset!");
static_assert(offsetof(UFPSChessGameInstance_C, DefaultBoardInfo) == 0x0002D8, "Member 'UFPSChessGameInstance_C::DefaultBoardInfo' has a wrong offset!");
static_assert(offsetof(UFPSChessGameInstance_C, PasswordProtected) == 0x0002F8, "Member 'UFPSChessGameInstance_C::PasswordProtected' has a wrong offset!");
static_assert(offsetof(UFPSChessGameInstance_C, PasswordString) == 0x000300, "Member 'UFPSChessGameInstance_C::PasswordString' has a wrong offset!");
static_assert(offsetof(UFPSChessGameInstance_C, isLocal) == 0x000310, "Member 'UFPSChessGameInstance_C::isLocal' has a wrong offset!");

}

