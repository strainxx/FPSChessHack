#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: FPSChess

#include "Basic.hpp"

#include "Engine_classes.hpp"


namespace SDK
{

// Class FPSChess.AHUD
// 0x0020 (0x0330 - 0x0310)
class AAHUD final : public AHUD
{
public:
	uint8                                         Pad_310[0x20];                                     // 0x0310(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AHUD">();
	}
	static class AAHUD* GetDefaultObj()
	{
		return GetDefaultObjImpl<AAHUD>();
	}
};
static_assert(alignof(AAHUD) == 0x000008, "Wrong alignment on AAHUD");
static_assert(sizeof(AAHUD) == 0x000330, "Wrong size on AAHUD");

// Class FPSChess.FocusChecker
// 0x0000 (0x0200 - 0x0200)
class UFocusChecker : public USceneComponent
{
public:
	void WindowFocusChange(bool focused);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FocusChecker">();
	}
	static class UFocusChecker* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFocusChecker>();
	}
};
static_assert(alignof(UFocusChecker) == 0x000010, "Wrong alignment on UFocusChecker");
static_assert(sizeof(UFocusChecker) == 0x000200, "Wrong size on UFocusChecker");

// Class FPSChess.FPSChessGameModeBase
// 0x0000 (0x02C0 - 0x02C0)
class AFPSChessGameModeBase final : public AGameModeBase
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FPSChessGameModeBase">();
	}
	static class AFPSChessGameModeBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<AFPSChessGameModeBase>();
	}
};
static_assert(alignof(AFPSChessGameModeBase) == 0x000008, "Wrong alignment on AFPSChessGameModeBase");
static_assert(sizeof(AFPSChessGameModeBase) == 0x0002C0, "Wrong size on AFPSChessGameModeBase");

// Class FPSChess.ReplaySystem
// 0x0000 (0x0028 - 0x0028)
class UReplaySystem final : public UBlueprintFunctionLibrary
{
public:
	static void ReplayPlay(class UGameInstance* Instance, const class FString& Replayname);
	static void ReplayRecord(class UGameInstance* Instance, const class FString& Replayname);
	static void ReplayStop(class UGameInstance* Instance);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ReplaySystem">();
	}
	static class UReplaySystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UReplaySystem>();
	}
};
static_assert(alignof(UReplaySystem) == 0x000008, "Wrong alignment on UReplaySystem");
static_assert(sizeof(UReplaySystem) == 0x000028, "Wrong size on UReplaySystem");

// Class FPSChess.SaveGameFunctions
// 0x0000 (0x0028 - 0x0028)
class USaveGameFunctions final : public UBlueprintFunctionLibrary
{
public:
	static TArray<class FString> GetMapNames();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SaveGameFunctions">();
	}
	static class USaveGameFunctions* GetDefaultObj()
	{
		return GetDefaultObjImpl<USaveGameFunctions>();
	}
};
static_assert(alignof(USaveGameFunctions) == 0x000008, "Wrong alignment on USaveGameFunctions");
static_assert(sizeof(USaveGameFunctions) == 0x000028, "Wrong size on USaveGameFunctions");

}

