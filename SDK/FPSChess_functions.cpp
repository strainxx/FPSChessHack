#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: FPSChess

#include "Basic.hpp"

#include "FPSChess_classes.hpp"
#include "FPSChess_parameters.hpp"


namespace SDK
{

// Function FPSChess.FocusChecker.WindowFocusChange
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    focused                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFocusChecker::WindowFocusChange(bool focused)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FocusChecker", "WindowFocusChange");

	Params::FocusChecker_WindowFocusChange Parms{};

	Parms.focused = focused;

	UObject::ProcessEvent(Func, &Parms);
}


// Function FPSChess.ReplaySystem.ReplayPlay
// (Final, Native, Static, Private, BlueprintCallable)
// Parameters:
// class UGameInstance*                    Instance                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           Replayname                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UReplaySystem::ReplayPlay(class UGameInstance* Instance, const class FString& Replayname)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ReplaySystem", "ReplayPlay");

	Params::ReplaySystem_ReplayPlay Parms{};

	Parms.Instance = Instance;
	Parms.Replayname = std::move(Replayname);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function FPSChess.ReplaySystem.ReplayRecord
// (Final, Native, Static, Private, BlueprintCallable)
// Parameters:
// class UGameInstance*                    Instance                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           Replayname                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UReplaySystem::ReplayRecord(class UGameInstance* Instance, const class FString& Replayname)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ReplaySystem", "ReplayRecord");

	Params::ReplaySystem_ReplayRecord Parms{};

	Parms.Instance = Instance;
	Parms.Replayname = std::move(Replayname);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function FPSChess.ReplaySystem.ReplayStop
// (Final, Native, Static, Private, BlueprintCallable)
// Parameters:
// class UGameInstance*                    Instance                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UReplaySystem::ReplayStop(class UGameInstance* Instance)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ReplaySystem", "ReplayStop");

	Params::ReplaySystem_ReplayStop Parms{};

	Parms.Instance = Instance;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function FPSChess.SaveGameFunctions.GetMapNames
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// TArray<class FString>                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class FString> USaveGameFunctions::GetMapNames()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SaveGameFunctions", "GetMapNames");

	Params::SaveGameFunctions_GetMapNames Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}

}

