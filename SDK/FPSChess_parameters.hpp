#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: FPSChess

#include "Basic.hpp"


namespace SDK::Params
{

// Function FPSChess.FocusChecker.WindowFocusChange
// 0x0001 (0x0001 - 0x0000)
struct FocusChecker_WindowFocusChange final
{
public:
	bool                                          focused;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FocusChecker_WindowFocusChange) == 0x000001, "Wrong alignment on FocusChecker_WindowFocusChange");
static_assert(sizeof(FocusChecker_WindowFocusChange) == 0x000001, "Wrong size on FocusChecker_WindowFocusChange");
static_assert(offsetof(FocusChecker_WindowFocusChange, focused) == 0x000000, "Member 'FocusChecker_WindowFocusChange::focused' has a wrong offset!");

// Function FPSChess.ReplaySystem.ReplayPlay
// 0x0018 (0x0018 - 0x0000)
struct ReplaySystem_ReplayPlay final
{
public:
	class UGameInstance*                          Instance;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Replayname;                                        // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ReplaySystem_ReplayPlay) == 0x000008, "Wrong alignment on ReplaySystem_ReplayPlay");
static_assert(sizeof(ReplaySystem_ReplayPlay) == 0x000018, "Wrong size on ReplaySystem_ReplayPlay");
static_assert(offsetof(ReplaySystem_ReplayPlay, Instance) == 0x000000, "Member 'ReplaySystem_ReplayPlay::Instance' has a wrong offset!");
static_assert(offsetof(ReplaySystem_ReplayPlay, Replayname) == 0x000008, "Member 'ReplaySystem_ReplayPlay::Replayname' has a wrong offset!");

// Function FPSChess.ReplaySystem.ReplayRecord
// 0x0018 (0x0018 - 0x0000)
struct ReplaySystem_ReplayRecord final
{
public:
	class UGameInstance*                          Instance;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Replayname;                                        // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ReplaySystem_ReplayRecord) == 0x000008, "Wrong alignment on ReplaySystem_ReplayRecord");
static_assert(sizeof(ReplaySystem_ReplayRecord) == 0x000018, "Wrong size on ReplaySystem_ReplayRecord");
static_assert(offsetof(ReplaySystem_ReplayRecord, Instance) == 0x000000, "Member 'ReplaySystem_ReplayRecord::Instance' has a wrong offset!");
static_assert(offsetof(ReplaySystem_ReplayRecord, Replayname) == 0x000008, "Member 'ReplaySystem_ReplayRecord::Replayname' has a wrong offset!");

// Function FPSChess.ReplaySystem.ReplayStop
// 0x0008 (0x0008 - 0x0000)
struct ReplaySystem_ReplayStop final
{
public:
	class UGameInstance*                          Instance;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ReplaySystem_ReplayStop) == 0x000008, "Wrong alignment on ReplaySystem_ReplayStop");
static_assert(sizeof(ReplaySystem_ReplayStop) == 0x000008, "Wrong size on ReplaySystem_ReplayStop");
static_assert(offsetof(ReplaySystem_ReplayStop, Instance) == 0x000000, "Member 'ReplaySystem_ReplayStop::Instance' has a wrong offset!");

// Function FPSChess.SaveGameFunctions.GetMapNames
// 0x0010 (0x0010 - 0x0000)
struct SaveGameFunctions_GetMapNames final
{
public:
	TArray<class FString>                         ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SaveGameFunctions_GetMapNames) == 0x000008, "Wrong alignment on SaveGameFunctions_GetMapNames");
static_assert(sizeof(SaveGameFunctions_GetMapNames) == 0x000010, "Wrong size on SaveGameFunctions_GetMapNames");
static_assert(offsetof(SaveGameFunctions_GetMapNames, ReturnValue) == 0x000000, "Member 'SaveGameFunctions_GetMapNames::ReturnValue' has a wrong offset!");

}

