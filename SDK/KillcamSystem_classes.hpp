#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: KillcamSystem

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "KillcamSampleInfo_structs.hpp"
#include "KillcamEventType_structs.hpp"
#include "KillcamEvents_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass KillcamSystem.KillcamSystem_C
// 0x0200 (0x0420 - 0x0220)
class AKillcamSystem_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0220(0x0008)(ZeroConstructor, Transient, DuplicateTransient, UObjectWrapper)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x0228(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	float                                         Playkillcam_Timer_3868B48F4FE617FB4D271F9F9A23E803; // 0x0230(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	ETimelineDirection                            Playkillcam__Direction_3868B48F4FE617FB4D271F9F9A23E803; // 0x0234(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_235[0x3];                                      // 0x0235(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     Playkillcam;                                       // 0x0238(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	float                                         UpdateTimer;                                       // 0x0240(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_244[0x4];                                      // 0x0244(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void()>              SampleTransforms;                                  // 0x0248(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	int64                                         NextActorID;                                       // 0x0258(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FKillcamSampleInfo>             Samples;                                           // 0x0260(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	float                                         Time;                                              // 0x0270(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_274[0x4];                                      // 0x0274(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<int64, class AActor*>                    Actors;                                            // 0x0278(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	float                                         KillcamTime;                                       // 0x02C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         PlaybackTimer;                                     // 0x02CC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Recording;                                         // 0x02D0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2D1[0xF];                                      // 0x02D1(0x000F)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKillcamSampleInfo                     ProtagonistSpawnEvent;                             // 0x02E0(0x0060)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UKillcamHUD_C*                          KillcamHUD;                                        // 0x0340(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         MaxSamples;                                        // 0x0348(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_34C[0x4];                                      // 0x034C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void()>              PlaybackFinished;                                  // 0x0350(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	float                                         ExistanceCheckTimer;                               // 0x0360(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_364[0x4];                                      // 0x0364(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void()>              ExistenceCheck;                                    // 0x0368(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TSet<int64>                                   Blacklist;                                         // 0x0378(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          Playing;                                           // 0x03C8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3C9[0x7];                                      // 0x03C9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           SampleTimer;                                       // 0x03D0(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           CheckTimer;                                        // 0x03D8(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          Disabled;                                          // 0x03E0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3E1[0x3];                                      // 0x03E1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         nextIndex;                                         // 0x03E4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bufferfull;                                        // 0x03E8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3E9[0x3];                                      // 0x03E9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         maxindex;                                          // 0x03EC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ReplayIndex;                                       // 0x03F0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3F4[0x4];                                      // 0x03F4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(float PlaybackTime)> PlaybackStart;                                     // 0x03F8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TMulticastInlineDelegate<void(float Position)> TrainSetPos;                                       // 0x0408(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	class ABP_PieceChar_C*                        Protagonist;                                       // 0x0418(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_KillcamSystem(int32 EntryPoint);
	void Enable();
	void Disable();
	void StopPlayback();
	void AddToBlacklist(const int64& Black_Actor);
	void CheckExistence();
	void StopRecording();
	void RemoveElementsAfterN(int32 Elements);
	void StripBeginning();
	void StartRecording();
	void SetProtagonistSpawnEvent(int64 ActorId, const struct FTransform& Transform, class UClass* Actor_Type);
	void SpawnAndAttachToProtagonist(class APlayerController* Target);
	void ResetSystem();
	void Playback();
	void PushSample(EKillcamEventType Event_Type, int64 ActorId, const struct FTransform& Transform, class UClass* Actor_Type, const struct FVector& EventInput, EKillcamEvents EventType);
	void SampleObjects();
	void ReceiveTick(float DeltaSeconds);
	void ReceiveBeginPlay();
	void Playkillcam__UpdateFunc();
	void Playkillcam__FinishedFunc();
	void SearchForMinTime(TArray<struct FKillcamSampleInfo>& Samples_0, int32 MinIndex, int32 maxindex_0, float Time_0, int32 InfiniteLoopDetector, int32 maxDepth, int32* Index_0);
	void CreateReplayActor(class UClass* Class_0, const struct FTransform& SpawnTransform, const int64& Key, class AActor** Actor);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"KillcamSystem_C">();
	}
	static class AKillcamSystem_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<AKillcamSystem_C>();
	}
};
static_assert(alignof(AKillcamSystem_C) == 0x000010, "Wrong alignment on AKillcamSystem_C");
static_assert(sizeof(AKillcamSystem_C) == 0x000420, "Wrong size on AKillcamSystem_C");
static_assert(offsetof(AKillcamSystem_C, UberGraphFrame) == 0x000220, "Member 'AKillcamSystem_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(AKillcamSystem_C, DefaultSceneRoot) == 0x000228, "Member 'AKillcamSystem_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(AKillcamSystem_C, Playkillcam_Timer_3868B48F4FE617FB4D271F9F9A23E803) == 0x000230, "Member 'AKillcamSystem_C::Playkillcam_Timer_3868B48F4FE617FB4D271F9F9A23E803' has a wrong offset!");
static_assert(offsetof(AKillcamSystem_C, Playkillcam__Direction_3868B48F4FE617FB4D271F9F9A23E803) == 0x000234, "Member 'AKillcamSystem_C::Playkillcam__Direction_3868B48F4FE617FB4D271F9F9A23E803' has a wrong offset!");
static_assert(offsetof(AKillcamSystem_C, Playkillcam) == 0x000238, "Member 'AKillcamSystem_C::Playkillcam' has a wrong offset!");
static_assert(offsetof(AKillcamSystem_C, UpdateTimer) == 0x000240, "Member 'AKillcamSystem_C::UpdateTimer' has a wrong offset!");
static_assert(offsetof(AKillcamSystem_C, SampleTransforms) == 0x000248, "Member 'AKillcamSystem_C::SampleTransforms' has a wrong offset!");
static_assert(offsetof(AKillcamSystem_C, NextActorID) == 0x000258, "Member 'AKillcamSystem_C::NextActorID' has a wrong offset!");
static_assert(offsetof(AKillcamSystem_C, Samples) == 0x000260, "Member 'AKillcamSystem_C::Samples' has a wrong offset!");
static_assert(offsetof(AKillcamSystem_C, Time) == 0x000270, "Member 'AKillcamSystem_C::Time' has a wrong offset!");
static_assert(offsetof(AKillcamSystem_C, Actors) == 0x000278, "Member 'AKillcamSystem_C::Actors' has a wrong offset!");
static_assert(offsetof(AKillcamSystem_C, KillcamTime) == 0x0002C8, "Member 'AKillcamSystem_C::KillcamTime' has a wrong offset!");
static_assert(offsetof(AKillcamSystem_C, PlaybackTimer) == 0x0002CC, "Member 'AKillcamSystem_C::PlaybackTimer' has a wrong offset!");
static_assert(offsetof(AKillcamSystem_C, Recording) == 0x0002D0, "Member 'AKillcamSystem_C::Recording' has a wrong offset!");
static_assert(offsetof(AKillcamSystem_C, ProtagonistSpawnEvent) == 0x0002E0, "Member 'AKillcamSystem_C::ProtagonistSpawnEvent' has a wrong offset!");
static_assert(offsetof(AKillcamSystem_C, KillcamHUD) == 0x000340, "Member 'AKillcamSystem_C::KillcamHUD' has a wrong offset!");
static_assert(offsetof(AKillcamSystem_C, MaxSamples) == 0x000348, "Member 'AKillcamSystem_C::MaxSamples' has a wrong offset!");
static_assert(offsetof(AKillcamSystem_C, PlaybackFinished) == 0x000350, "Member 'AKillcamSystem_C::PlaybackFinished' has a wrong offset!");
static_assert(offsetof(AKillcamSystem_C, ExistanceCheckTimer) == 0x000360, "Member 'AKillcamSystem_C::ExistanceCheckTimer' has a wrong offset!");
static_assert(offsetof(AKillcamSystem_C, ExistenceCheck) == 0x000368, "Member 'AKillcamSystem_C::ExistenceCheck' has a wrong offset!");
static_assert(offsetof(AKillcamSystem_C, Blacklist) == 0x000378, "Member 'AKillcamSystem_C::Blacklist' has a wrong offset!");
static_assert(offsetof(AKillcamSystem_C, Playing) == 0x0003C8, "Member 'AKillcamSystem_C::Playing' has a wrong offset!");
static_assert(offsetof(AKillcamSystem_C, SampleTimer) == 0x0003D0, "Member 'AKillcamSystem_C::SampleTimer' has a wrong offset!");
static_assert(offsetof(AKillcamSystem_C, CheckTimer) == 0x0003D8, "Member 'AKillcamSystem_C::CheckTimer' has a wrong offset!");
static_assert(offsetof(AKillcamSystem_C, Disabled) == 0x0003E0, "Member 'AKillcamSystem_C::Disabled' has a wrong offset!");
static_assert(offsetof(AKillcamSystem_C, nextIndex) == 0x0003E4, "Member 'AKillcamSystem_C::nextIndex' has a wrong offset!");
static_assert(offsetof(AKillcamSystem_C, bufferfull) == 0x0003E8, "Member 'AKillcamSystem_C::bufferfull' has a wrong offset!");
static_assert(offsetof(AKillcamSystem_C, maxindex) == 0x0003EC, "Member 'AKillcamSystem_C::maxindex' has a wrong offset!");
static_assert(offsetof(AKillcamSystem_C, ReplayIndex) == 0x0003F0, "Member 'AKillcamSystem_C::ReplayIndex' has a wrong offset!");
static_assert(offsetof(AKillcamSystem_C, PlaybackStart) == 0x0003F8, "Member 'AKillcamSystem_C::PlaybackStart' has a wrong offset!");
static_assert(offsetof(AKillcamSystem_C, TrainSetPos) == 0x000408, "Member 'AKillcamSystem_C::TrainSetPos' has a wrong offset!");
static_assert(offsetof(AKillcamSystem_C, Protagonist) == 0x000418, "Member 'AKillcamSystem_C::Protagonist' has a wrong offset!");

}

