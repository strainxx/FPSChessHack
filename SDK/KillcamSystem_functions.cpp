#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: KillcamSystem

#include "Basic.hpp"

#include "KillcamSystem_classes.hpp"
#include "KillcamSystem_parameters.hpp"


namespace SDK
{

// Function KillcamSystem.KillcamSystem_C.ExecuteUbergraph_KillcamSystem
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AKillcamSystem_C::ExecuteUbergraph_KillcamSystem(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("KillcamSystem_C", "ExecuteUbergraph_KillcamSystem");

	Params::KillcamSystem_C_ExecuteUbergraph_KillcamSystem Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function KillcamSystem.KillcamSystem_C.Enable
// (BlueprintCallable, BlueprintEvent)

void AKillcamSystem_C::Enable()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("KillcamSystem_C", "Enable");

	UObject::ProcessEvent(Func, nullptr);
}


// Function KillcamSystem.KillcamSystem_C.Disable
// (BlueprintCallable, BlueprintEvent)

void AKillcamSystem_C::Disable()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("KillcamSystem_C", "Disable");

	UObject::ProcessEvent(Func, nullptr);
}


// Function KillcamSystem.KillcamSystem_C.StopPlayback
// (BlueprintCallable, BlueprintEvent)

void AKillcamSystem_C::StopPlayback()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("KillcamSystem_C", "StopPlayback");

	UObject::ProcessEvent(Func, nullptr);
}


// Function KillcamSystem.KillcamSystem_C.AddToBlacklist
// (HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int64                                   Black_Actor                                            (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AKillcamSystem_C::AddToBlacklist(const int64& Black_Actor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("KillcamSystem_C", "AddToBlacklist");

	Params::KillcamSystem_C_AddToBlacklist Parms{};

	Parms.Black_Actor = Black_Actor;

	UObject::ProcessEvent(Func, &Parms);
}


// Function KillcamSystem.KillcamSystem_C.CheckExistence
// (BlueprintCallable, BlueprintEvent)

void AKillcamSystem_C::CheckExistence()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("KillcamSystem_C", "CheckExistence");

	UObject::ProcessEvent(Func, nullptr);
}


// Function KillcamSystem.KillcamSystem_C.StopRecording
// (BlueprintCallable, BlueprintEvent)

void AKillcamSystem_C::StopRecording()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("KillcamSystem_C", "StopRecording");

	UObject::ProcessEvent(Func, nullptr);
}


// Function KillcamSystem.KillcamSystem_C.RemoveElementsAfterN
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Elements                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AKillcamSystem_C::RemoveElementsAfterN(int32 Elements)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("KillcamSystem_C", "RemoveElementsAfterN");

	Params::KillcamSystem_C_RemoveElementsAfterN Parms{};

	Parms.Elements = Elements;

	UObject::ProcessEvent(Func, &Parms);
}


// Function KillcamSystem.KillcamSystem_C.StripBeginning
// (BlueprintCallable, BlueprintEvent)

void AKillcamSystem_C::StripBeginning()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("KillcamSystem_C", "StripBeginning");

	UObject::ProcessEvent(Func, nullptr);
}


// Function KillcamSystem.KillcamSystem_C.StartRecording
// (BlueprintCallable, BlueprintEvent)

void AKillcamSystem_C::StartRecording()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("KillcamSystem_C", "StartRecording");

	UObject::ProcessEvent(Func, nullptr);
}


// Function KillcamSystem.KillcamSystem_C.SetProtagonistSpawnEvent
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// int64                                   ActorId                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FTransform                       Transform                                              (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
// class UClass*                           Actor_Type                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AKillcamSystem_C::SetProtagonistSpawnEvent(int64 ActorId, const struct FTransform& Transform, class UClass* Actor_Type)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("KillcamSystem_C", "SetProtagonistSpawnEvent");

	Params::KillcamSystem_C_SetProtagonistSpawnEvent Parms{};

	Parms.ActorId = ActorId;
	Parms.Transform = std::move(Transform);
	Parms.Actor_Type = Actor_Type;

	UObject::ProcessEvent(Func, &Parms);
}


// Function KillcamSystem.KillcamSystem_C.SpawnAndAttachToProtagonist
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class APlayerController*                Target                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AKillcamSystem_C::SpawnAndAttachToProtagonist(class APlayerController* Target)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("KillcamSystem_C", "SpawnAndAttachToProtagonist");

	Params::KillcamSystem_C_SpawnAndAttachToProtagonist Parms{};

	Parms.Target = Target;

	UObject::ProcessEvent(Func, &Parms);
}


// Function KillcamSystem.KillcamSystem_C.ResetSystem
// (BlueprintCallable, BlueprintEvent)

void AKillcamSystem_C::ResetSystem()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("KillcamSystem_C", "ResetSystem");

	UObject::ProcessEvent(Func, nullptr);
}


// Function KillcamSystem.KillcamSystem_C.Playback
// (BlueprintCallable, BlueprintEvent)

void AKillcamSystem_C::Playback()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("KillcamSystem_C", "Playback");

	UObject::ProcessEvent(Func, nullptr);
}


// Function KillcamSystem.KillcamSystem_C.PushSample
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// EKillcamEventType                       Event_Type                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int64                                   ActorId                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FTransform                       Transform                                              (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
// class UClass*                           Actor_Type                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          EventInput                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EKillcamEvents                          EventType                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AKillcamSystem_C::PushSample(EKillcamEventType Event_Type, int64 ActorId, const struct FTransform& Transform, class UClass* Actor_Type, const struct FVector& EventInput, EKillcamEvents EventType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("KillcamSystem_C", "PushSample");

	Params::KillcamSystem_C_PushSample Parms{};

	Parms.Event_Type = Event_Type;
	Parms.ActorId = ActorId;
	Parms.Transform = std::move(Transform);
	Parms.Actor_Type = Actor_Type;
	Parms.EventInput = std::move(EventInput);
	Parms.EventType = EventType;

	UObject::ProcessEvent(Func, &Parms);
}


// Function KillcamSystem.KillcamSystem_C.SampleObjects
// (BlueprintCallable, BlueprintEvent)

void AKillcamSystem_C::SampleObjects()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("KillcamSystem_C", "SampleObjects");

	UObject::ProcessEvent(Func, nullptr);
}


// Function KillcamSystem.KillcamSystem_C.ReceiveTick
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AKillcamSystem_C::ReceiveTick(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("KillcamSystem_C", "ReceiveTick");

	Params::KillcamSystem_C_ReceiveTick Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function KillcamSystem.KillcamSystem_C.ReceiveBeginPlay
// (Event, Protected, BlueprintEvent)

void AKillcamSystem_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("KillcamSystem_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function KillcamSystem.KillcamSystem_C.Playkillcam__UpdateFunc
// (BlueprintEvent)

void AKillcamSystem_C::Playkillcam__UpdateFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("KillcamSystem_C", "Playkillcam__UpdateFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function KillcamSystem.KillcamSystem_C.Playkillcam__FinishedFunc
// (BlueprintEvent)

void AKillcamSystem_C::Playkillcam__FinishedFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("KillcamSystem_C", "Playkillcam__FinishedFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function KillcamSystem.KillcamSystem_C.SearchForMinTime
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<struct FKillcamSampleInfo>       Samples_0                                              (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// int32                                   MinIndex                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
// int32                                   maxindex_0                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Time_0                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   InfiniteLoopDetector                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   maxDepth                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Index_0                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AKillcamSystem_C::SearchForMinTime(TArray<struct FKillcamSampleInfo>& Samples_0, int32 MinIndex, int32 maxindex_0, float Time_0, int32 InfiniteLoopDetector, int32 maxDepth, int32* Index_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("KillcamSystem_C", "SearchForMinTime");

	Params::KillcamSystem_C_SearchForMinTime Parms{};

	Parms.Samples_0 = std::move(Samples_0);
	Parms.MinIndex = MinIndex;
	Parms.maxindex_0 = maxindex_0;
	Parms.Time_0 = Time_0;
	Parms.InfiniteLoopDetector = InfiniteLoopDetector;
	Parms.maxDepth = maxDepth;

	UObject::ProcessEvent(Func, &Parms);

	Samples_0 = std::move(Parms.Samples_0);

	if (Index_0 != nullptr)
		*Index_0 = Parms.Index_0;
}


// Function KillcamSystem.KillcamSystem_C.CreateReplayActor
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UClass*                           Class_0                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FTransform                       SpawnTransform                                         (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, UObjectWrapper)
// int64                                   Key                                                    (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           Actor                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AKillcamSystem_C::CreateReplayActor(class UClass* Class_0, const struct FTransform& SpawnTransform, const int64& Key, class AActor** Actor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("KillcamSystem_C", "CreateReplayActor");

	Params::KillcamSystem_C_CreateReplayActor Parms{};

	Parms.Class_0 = Class_0;
	Parms.SpawnTransform = std::move(SpawnTransform);
	Parms.Key = Key;

	UObject::ProcessEvent(Func, &Parms);

	if (Actor != nullptr)
		*Actor = Parms.Actor;
}

}

