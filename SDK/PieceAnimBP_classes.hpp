#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: PieceAnimBP

#include "Basic.hpp"

#include "AnimGraphRuntime_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// AnimBlueprintGeneratedClass PieceAnimBP.PieceAnimBP_C
// 0x0AF0 (0x0DB0 - 0x02C0)
class UPieceAnimBP_C : public UAnimInstance
{
public:
	uint8                                         Pad_2B8[0x8];                                      // 0x02B8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x02C0(0x0008)(ZeroConstructor, Transient, DuplicateTransient, UObjectWrapper)
	struct FAnimNode_Root                         AnimGraphNode_Root;                                // 0x02C8(0x0030)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_9;                  // 0x02F8(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_8;                  // 0x0320(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_7;                  // 0x0348(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_6;                  // 0x0370(0x0028)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_5;                    // 0x0398(0x0080)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_7;                       // 0x0418(0x0030)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_4;                    // 0x0448(0x0080)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_6;                       // 0x04C8(0x0030)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_3;                    // 0x04F8(0x0080)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_5;                       // 0x0578(0x0030)()
	struct FAnimNode_BlendSpacePlayer             AnimGraphNode_BlendSpacePlayer;                    // 0x05A8(0x00E8)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_4;                       // 0x0690(0x0030)()
	struct FAnimNode_StateMachine                 AnimGraphNode_StateMachine_1;                      // 0x06C0(0x00B0)()
	struct FAnimNode_SaveCachedPose               AnimGraphNode_SaveCachedPose;                      // 0x0770(0x0158)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_5;                  // 0x08C8(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_4;                  // 0x08F0(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_3;                  // 0x0918(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_2;                  // 0x0940(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_1;                  // 0x0968(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult;                    // 0x0990(0x0028)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_2;                    // 0x09B8(0x0080)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_3;                       // 0x0A38(0x0030)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_1;                    // 0x0A68(0x0080)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_2;                       // 0x0AE8(0x0030)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_1;                       // 0x0B18(0x0030)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer;                      // 0x0B48(0x0080)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult;                         // 0x0BC8(0x0030)()
	struct FAnimNode_StateMachine                 AnimGraphNode_StateMachine;                        // 0x0BF8(0x00B0)()
	struct FAnimNode_UseCachedPose                AnimGraphNode_UseCachedPose;                       // 0x0CA8(0x0028)()
	struct FAnimNode_ApplyAdditive                AnimGraphNode_ApplyAdditive;                       // 0x0CD0(0x00C8)()
	class ABP_PieceChar_C*                        Player;                                            // 0x0D98(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	float                                         Speed;                                             // 0x0DA0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FirePlayrate;                                      // 0x0DA4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Fire;                                              // 0x0DA8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          Jumping;                                           // 0x0DA9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          Blocking;                                          // 0x0DAA(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          BlockShot;                                         // 0x0DAB(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void ExecuteUbergraph_PieceAnimBP(int32 EntryPoint);
	void AnimNotify_BlockSFX();
	void AnimNotify_PlayedBlockShot();
	void BlockShotAnim();
	void AnimNotify_PlayedShoot();
	void PlayShoot();
	void BlueprintBeginPlay();
	void BlueprintUpdateAnimation(float DeltaTimeX);
	void EvaluateGraphExposedInputs_ExecuteUbergraph_PieceAnimBP_AnimGraphNode_TransitionResult_1B9C3CA047B6E7382A5156B6C34F7173();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_PieceAnimBP_AnimGraphNode_TransitionResult_B5BB9D034DE25CA30C8606A8A97641B4();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_PieceAnimBP_AnimGraphNode_TransitionResult_6DE0C0784881CBBF007BBEB47FEADB7F();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_PieceAnimBP_AnimGraphNode_TransitionResult_59E1B24140F05B728B56FB9D5673A58B();
	void AnimGraph(struct FPoseLink* AnimGraph_0);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"PieceAnimBP_C">();
	}
	static class UPieceAnimBP_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPieceAnimBP_C>();
	}
};
static_assert(alignof(UPieceAnimBP_C) == 0x000010, "Wrong alignment on UPieceAnimBP_C");
static_assert(sizeof(UPieceAnimBP_C) == 0x000DB0, "Wrong size on UPieceAnimBP_C");
static_assert(offsetof(UPieceAnimBP_C, UberGraphFrame) == 0x0002C0, "Member 'UPieceAnimBP_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UPieceAnimBP_C, AnimGraphNode_Root) == 0x0002C8, "Member 'UPieceAnimBP_C::AnimGraphNode_Root' has a wrong offset!");
static_assert(offsetof(UPieceAnimBP_C, AnimGraphNode_TransitionResult_9) == 0x0002F8, "Member 'UPieceAnimBP_C::AnimGraphNode_TransitionResult_9' has a wrong offset!");
static_assert(offsetof(UPieceAnimBP_C, AnimGraphNode_TransitionResult_8) == 0x000320, "Member 'UPieceAnimBP_C::AnimGraphNode_TransitionResult_8' has a wrong offset!");
static_assert(offsetof(UPieceAnimBP_C, AnimGraphNode_TransitionResult_7) == 0x000348, "Member 'UPieceAnimBP_C::AnimGraphNode_TransitionResult_7' has a wrong offset!");
static_assert(offsetof(UPieceAnimBP_C, AnimGraphNode_TransitionResult_6) == 0x000370, "Member 'UPieceAnimBP_C::AnimGraphNode_TransitionResult_6' has a wrong offset!");
static_assert(offsetof(UPieceAnimBP_C, AnimGraphNode_SequencePlayer_5) == 0x000398, "Member 'UPieceAnimBP_C::AnimGraphNode_SequencePlayer_5' has a wrong offset!");
static_assert(offsetof(UPieceAnimBP_C, AnimGraphNode_StateResult_7) == 0x000418, "Member 'UPieceAnimBP_C::AnimGraphNode_StateResult_7' has a wrong offset!");
static_assert(offsetof(UPieceAnimBP_C, AnimGraphNode_SequencePlayer_4) == 0x000448, "Member 'UPieceAnimBP_C::AnimGraphNode_SequencePlayer_4' has a wrong offset!");
static_assert(offsetof(UPieceAnimBP_C, AnimGraphNode_StateResult_6) == 0x0004C8, "Member 'UPieceAnimBP_C::AnimGraphNode_StateResult_6' has a wrong offset!");
static_assert(offsetof(UPieceAnimBP_C, AnimGraphNode_SequencePlayer_3) == 0x0004F8, "Member 'UPieceAnimBP_C::AnimGraphNode_SequencePlayer_3' has a wrong offset!");
static_assert(offsetof(UPieceAnimBP_C, AnimGraphNode_StateResult_5) == 0x000578, "Member 'UPieceAnimBP_C::AnimGraphNode_StateResult_5' has a wrong offset!");
static_assert(offsetof(UPieceAnimBP_C, AnimGraphNode_BlendSpacePlayer) == 0x0005A8, "Member 'UPieceAnimBP_C::AnimGraphNode_BlendSpacePlayer' has a wrong offset!");
static_assert(offsetof(UPieceAnimBP_C, AnimGraphNode_StateResult_4) == 0x000690, "Member 'UPieceAnimBP_C::AnimGraphNode_StateResult_4' has a wrong offset!");
static_assert(offsetof(UPieceAnimBP_C, AnimGraphNode_StateMachine_1) == 0x0006C0, "Member 'UPieceAnimBP_C::AnimGraphNode_StateMachine_1' has a wrong offset!");
static_assert(offsetof(UPieceAnimBP_C, AnimGraphNode_SaveCachedPose) == 0x000770, "Member 'UPieceAnimBP_C::AnimGraphNode_SaveCachedPose' has a wrong offset!");
static_assert(offsetof(UPieceAnimBP_C, AnimGraphNode_TransitionResult_5) == 0x0008C8, "Member 'UPieceAnimBP_C::AnimGraphNode_TransitionResult_5' has a wrong offset!");
static_assert(offsetof(UPieceAnimBP_C, AnimGraphNode_TransitionResult_4) == 0x0008F0, "Member 'UPieceAnimBP_C::AnimGraphNode_TransitionResult_4' has a wrong offset!");
static_assert(offsetof(UPieceAnimBP_C, AnimGraphNode_TransitionResult_3) == 0x000918, "Member 'UPieceAnimBP_C::AnimGraphNode_TransitionResult_3' has a wrong offset!");
static_assert(offsetof(UPieceAnimBP_C, AnimGraphNode_TransitionResult_2) == 0x000940, "Member 'UPieceAnimBP_C::AnimGraphNode_TransitionResult_2' has a wrong offset!");
static_assert(offsetof(UPieceAnimBP_C, AnimGraphNode_TransitionResult_1) == 0x000968, "Member 'UPieceAnimBP_C::AnimGraphNode_TransitionResult_1' has a wrong offset!");
static_assert(offsetof(UPieceAnimBP_C, AnimGraphNode_TransitionResult) == 0x000990, "Member 'UPieceAnimBP_C::AnimGraphNode_TransitionResult' has a wrong offset!");
static_assert(offsetof(UPieceAnimBP_C, AnimGraphNode_SequencePlayer_2) == 0x0009B8, "Member 'UPieceAnimBP_C::AnimGraphNode_SequencePlayer_2' has a wrong offset!");
static_assert(offsetof(UPieceAnimBP_C, AnimGraphNode_StateResult_3) == 0x000A38, "Member 'UPieceAnimBP_C::AnimGraphNode_StateResult_3' has a wrong offset!");
static_assert(offsetof(UPieceAnimBP_C, AnimGraphNode_SequencePlayer_1) == 0x000A68, "Member 'UPieceAnimBP_C::AnimGraphNode_SequencePlayer_1' has a wrong offset!");
static_assert(offsetof(UPieceAnimBP_C, AnimGraphNode_StateResult_2) == 0x000AE8, "Member 'UPieceAnimBP_C::AnimGraphNode_StateResult_2' has a wrong offset!");
static_assert(offsetof(UPieceAnimBP_C, AnimGraphNode_StateResult_1) == 0x000B18, "Member 'UPieceAnimBP_C::AnimGraphNode_StateResult_1' has a wrong offset!");
static_assert(offsetof(UPieceAnimBP_C, AnimGraphNode_SequencePlayer) == 0x000B48, "Member 'UPieceAnimBP_C::AnimGraphNode_SequencePlayer' has a wrong offset!");
static_assert(offsetof(UPieceAnimBP_C, AnimGraphNode_StateResult) == 0x000BC8, "Member 'UPieceAnimBP_C::AnimGraphNode_StateResult' has a wrong offset!");
static_assert(offsetof(UPieceAnimBP_C, AnimGraphNode_StateMachine) == 0x000BF8, "Member 'UPieceAnimBP_C::AnimGraphNode_StateMachine' has a wrong offset!");
static_assert(offsetof(UPieceAnimBP_C, AnimGraphNode_UseCachedPose) == 0x000CA8, "Member 'UPieceAnimBP_C::AnimGraphNode_UseCachedPose' has a wrong offset!");
static_assert(offsetof(UPieceAnimBP_C, AnimGraphNode_ApplyAdditive) == 0x000CD0, "Member 'UPieceAnimBP_C::AnimGraphNode_ApplyAdditive' has a wrong offset!");
static_assert(offsetof(UPieceAnimBP_C, Player) == 0x000D98, "Member 'UPieceAnimBP_C::Player' has a wrong offset!");
static_assert(offsetof(UPieceAnimBP_C, Speed) == 0x000DA0, "Member 'UPieceAnimBP_C::Speed' has a wrong offset!");
static_assert(offsetof(UPieceAnimBP_C, FirePlayrate) == 0x000DA4, "Member 'UPieceAnimBP_C::FirePlayrate' has a wrong offset!");
static_assert(offsetof(UPieceAnimBP_C, Fire) == 0x000DA8, "Member 'UPieceAnimBP_C::Fire' has a wrong offset!");
static_assert(offsetof(UPieceAnimBP_C, Jumping) == 0x000DA9, "Member 'UPieceAnimBP_C::Jumping' has a wrong offset!");
static_assert(offsetof(UPieceAnimBP_C, Blocking) == 0x000DAA, "Member 'UPieceAnimBP_C::Blocking' has a wrong offset!");
static_assert(offsetof(UPieceAnimBP_C, BlockShot) == 0x000DAB, "Member 'UPieceAnimBP_C::BlockShot' has a wrong offset!");

}

