#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: PieceHUD

#include "Basic.hpp"

#include "PieceHUD_classes.hpp"
#include "PieceHUD_parameters.hpp"


namespace SDK
{

// Function PieceHUD.PieceHUD_C.ExecuteUbergraph_PieceHUD
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UPieceHUD_C::ExecuteUbergraph_PieceHUD(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PieceHUD_C", "ExecuteUbergraph_PieceHUD");

	Params::PieceHUD_C_ExecuteUbergraph_PieceHUD Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function PieceHUD.PieceHUD_C.AutoResize
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class FText                             Name_0                                                 (BlueprintVisible, BlueprintReadOnly, Parm)
// class UTextBlock*                       Text                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UPieceHUD_C::AutoResize(const class FText& Name_0, class UTextBlock* Text)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PieceHUD_C", "AutoResize");

	Params::PieceHUD_C_AutoResize Parms{};

	Parms.Name_0 = std::move(Name_0);
	Parms.Text = Text;

	UObject::ProcessEvent(Func, &Parms);
}


// Function PieceHUD.PieceHUD_C.SetCrackage
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Value                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UPieceHUD_C::SetCrackage(float Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PieceHUD_C", "SetCrackage");

	Params::PieceHUD_C_SetCrackage Parms{};

	Parms.Value = Value;

	UObject::ProcessEvent(Func, &Parms);
}


// Function PieceHUD.PieceHUD_C.DisableAura
// (BlueprintCallable, BlueprintEvent)

void UPieceHUD_C::DisableAura()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PieceHUD_C", "DisableAura");

	UObject::ProcessEvent(Func, nullptr);
}


// Function PieceHUD.PieceHUD_C.EnableAura
// (BlueprintCallable, BlueprintEvent)

void UPieceHUD_C::EnableAura()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PieceHUD_C", "EnableAura");

	UObject::ProcessEvent(Func, nullptr);
}


// Function PieceHUD.PieceHUD_C.SetCrosshair
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Distance                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector2D                        Size                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UPieceHUD_C::SetCrosshair(float Distance, const struct FVector2D& Size)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PieceHUD_C", "SetCrosshair");

	Params::PieceHUD_C_SetCrosshair Parms{};

	Parms.Distance = Distance;
	Parms.Size = std::move(Size);

	UObject::ProcessEvent(Func, &Parms);
}


// Function PieceHUD.PieceHUD_C.BowCrosshairPulling
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Pulling                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UPieceHUD_C::BowCrosshairPulling(bool Pulling)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PieceHUD_C", "BowCrosshairPulling");

	Params::PieceHUD_C_BowCrosshairPulling Parms{};

	Parms.Pulling = Pulling;

	UObject::ProcessEvent(Func, &Parms);
}


// Function PieceHUD.PieceHUD_C.BowCrosshairPower
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Charge                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UPieceHUD_C::BowCrosshairPower(float Charge)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PieceHUD_C", "BowCrosshairPower");

	Params::PieceHUD_C_BowCrosshairPower Parms{};

	Parms.Charge = Charge;

	UObject::ProcessEvent(Func, &Parms);
}


// Function PieceHUD.PieceHUD_C.SetCrosshairDefault
// (BlueprintCallable, BlueprintEvent)

void UPieceHUD_C::SetCrosshairDefault()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PieceHUD_C", "SetCrosshairDefault");

	UObject::ProcessEvent(Func, nullptr);
}


// Function PieceHUD.PieceHUD_C.SetCrosshairBow
// (BlueprintCallable, BlueprintEvent)

void UPieceHUD_C::SetCrosshairBow()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PieceHUD_C", "SetCrosshairBow");

	UObject::ProcessEvent(Func, nullptr);
}


// Function PieceHUD.PieceHUD_C.EndHighlightMovement
// (BlueprintCallable, BlueprintEvent)

void UPieceHUD_C::EndHighlightMovement()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PieceHUD_C", "EndHighlightMovement");

	UObject::ProcessEvent(Func, nullptr);
}


// Function PieceHUD.PieceHUD_C.StartHighlightMovement
// (BlueprintCallable, BlueprintEvent)

void UPieceHUD_C::StartHighlightMovement()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PieceHUD_C", "StartHighlightMovement");

	UObject::ProcessEvent(Func, nullptr);
}


// Function PieceHUD.PieceHUD_C.UpdateMovementAbilityKeyText
// (BlueprintCallable, BlueprintEvent)

void UPieceHUD_C::UpdateMovementAbilityKeyText()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PieceHUD_C", "UpdateMovementAbilityKeyText");

	UObject::ProcessEvent(Func, nullptr);
}


// Function PieceHUD.PieceHUD_C.UpdateAbilityKeyText
// (BlueprintCallable, BlueprintEvent)

void UPieceHUD_C::UpdateAbilityKeyText()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PieceHUD_C", "UpdateAbilityKeyText");

	UObject::ProcessEvent(Func, nullptr);
}


// Function PieceHUD.PieceHUD_C.EndHighlightAbility
// (BlueprintCallable, BlueprintEvent)

void UPieceHUD_C::EndHighlightAbility()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PieceHUD_C", "EndHighlightAbility");

	UObject::ProcessEvent(Func, nullptr);
}


// Function PieceHUD.PieceHUD_C.StartHighlightAbility
// (BlueprintCallable, BlueprintEvent)

void UPieceHUD_C::StartHighlightAbility()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PieceHUD_C", "StartHighlightAbility");

	UObject::ProcessEvent(Func, nullptr);
}


// Function PieceHUD.PieceHUD_C.Tick
// (BlueprintCosmetic, Event, Public, BlueprintEvent)
// Parameters:
// struct FGeometry                        MyGeometry                                             (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
// float                                   InDeltaTime                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UPieceHUD_C::Tick(const struct FGeometry& MyGeometry, float InDeltaTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PieceHUD_C", "Tick");

	Params::PieceHUD_C_Tick Parms{};

	Parms.MyGeometry = std::move(MyGeometry);
	Parms.InDeltaTime = InDeltaTime;

	UObject::ProcessEvent(Func, &Parms);
}


// Function PieceHUD.PieceHUD_C.Construct
// (BlueprintCosmetic, Event, Public, BlueprintEvent)

void UPieceHUD_C::Construct()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PieceHUD_C", "Construct");

	UObject::ProcessEvent(Func, nullptr);
}


// Function PieceHUD.PieceHUD_C.HitmarkerOn
// (Public, BlueprintCallable, BlueprintEvent)

void UPieceHUD_C::HitmarkerOn()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PieceHUD_C", "HitmarkerOn");

	UObject::ProcessEvent(Func, nullptr);
}


// Function PieceHUD.PieceHUD_C.HitmarkerPieceColor
// (Public, BlueprintCallable, BlueprintEvent)

void UPieceHUD_C::HitmarkerPieceColor()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PieceHUD_C", "HitmarkerPieceColor");

	UObject::ProcessEvent(Func, nullptr);
}


// Function PieceHUD.PieceHUD_C.HitmarkerPieceCharColor
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Headshot                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UPieceHUD_C::HitmarkerPieceCharColor(bool Headshot)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PieceHUD_C", "HitmarkerPieceCharColor");

	Params::PieceHUD_C_HitmarkerPieceCharColor Parms{};

	Parms.Headshot = Headshot;

	UObject::ProcessEvent(Func, &Parms);
}


// Function PieceHUD.PieceHUD_C.Set Ability Cooldown
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Cooldown                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Movement                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UPieceHUD_C::Set_Ability_Cooldown(float Cooldown, bool Movement)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PieceHUD_C", "Set Ability Cooldown");

	Params::PieceHUD_C_Set_Ability_Cooldown Parms{};

	Parms.Cooldown = Cooldown;
	Parms.Movement = Movement;

	UObject::ProcessEvent(Func, &Parms);
}


// Function PieceHUD.PieceHUD_C.ActivateScope
// (Public, BlueprintCallable, BlueprintEvent)

void UPieceHUD_C::ActivateScope()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PieceHUD_C", "ActivateScope");

	UObject::ProcessEvent(Func, nullptr);
}


// Function PieceHUD.PieceHUD_C.DeactivateScope
// (Public, BlueprintCallable, BlueprintEvent)

void UPieceHUD_C::DeactivateScope()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PieceHUD_C", "DeactivateScope");

	UObject::ProcessEvent(Func, nullptr);
}


// Function PieceHUD.PieceHUD_C.SetCountdown
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Number                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UPieceHUD_C::SetCountdown(int32 Number)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PieceHUD_C", "SetCountdown");

	Params::PieceHUD_C_SetCountdown Parms{};

	Parms.Number = Number;

	UObject::ProcessEvent(Func, &Parms);
}


// Function PieceHUD.PieceHUD_C.SetResultText
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Tie                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// EPieceTypes                             Type                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Black                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UPieceHUD_C::SetResultText(bool Tie, EPieceTypes Type, bool Black)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PieceHUD_C", "SetResultText");

	Params::PieceHUD_C_SetResultText Parms{};

	Parms.Tie = Tie;
	Parms.Type = Type;
	Parms.Black = Black;

	UObject::ProcessEvent(Func, &Parms);
}


// Function PieceHUD.PieceHUD_C.Set Scope Black
// (Public, BlueprintCallable, BlueprintEvent)

void UPieceHUD_C::Set_Scope_Black()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PieceHUD_C", "Set Scope Black");

	UObject::ProcessEvent(Func, nullptr);
}

}

