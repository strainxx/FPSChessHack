#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Slam

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass Slam.Slam_C
// 0x0070 (0x0290 - 0x0220)
class ASlam_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0220(0x0008)(ZeroConstructor, Transient, DuplicateTransient, UObjectWrapper)
	class UStaticMeshComponent*                   SlamCollider;                                      // 0x0228(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UNiagaraComponent*                      Effect;                                            // 0x0230(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x0238(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         ScaleTimeline_Scale_93C7A80D431F1E652BA633A729DBEE9B; // 0x0240(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	ETimelineDirection                            ScaleTimeline__Direction_93C7A80D431F1E652BA633A729DBEE9B; // 0x0244(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_245[0x3];                                      // 0x0245(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     ScaleTimeline;                                     // 0x0248(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	struct FVector                                Size;                                              // 0x0250(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SlamForce;                                         // 0x025C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Damage;                                            // 0x0260(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_264[0x4];                                      // 0x0264(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_PieceChar_C*                        ParentChar;                                        // 0x0268(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	float                                         Scale;                                             // 0x0270(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_274[0x4];                                      // 0x0274(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ABP_PieceChar_C*>                DealtDamage;                                       // 0x0278(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	class UMaterialInterface*                     Material;                                          // 0x0288(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_Slam(int32 EntryPoint);
	void DestroySelf();
	void BndEvt__Slam_Effect_K2Node_ComponentBoundEvent_0_OnNiagaraSystemFinished__DelegateSignature(class UNiagaraComponent* PSystem);
	void BndEvt__Slam_Effect_K2Node_ComponentBoundEvent_1_ActorComponentActivatedSignature__DelegateSignature(class UActorComponent* Component, bool bReset);
	void ReceiveTick(float DeltaSeconds);
	void ReceiveActorBeginOverlap(class AActor* OtherActor);
	void ReceiveBeginPlay();
	void ScaleTimeline__UpdateFunc();
	void ScaleTimeline__FinishedFunc();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"Slam_C">();
	}
	static class ASlam_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ASlam_C>();
	}
};
static_assert(alignof(ASlam_C) == 0x000008, "Wrong alignment on ASlam_C");
static_assert(sizeof(ASlam_C) == 0x000290, "Wrong size on ASlam_C");
static_assert(offsetof(ASlam_C, UberGraphFrame) == 0x000220, "Member 'ASlam_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ASlam_C, SlamCollider) == 0x000228, "Member 'ASlam_C::SlamCollider' has a wrong offset!");
static_assert(offsetof(ASlam_C, Effect) == 0x000230, "Member 'ASlam_C::Effect' has a wrong offset!");
static_assert(offsetof(ASlam_C, DefaultSceneRoot) == 0x000238, "Member 'ASlam_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ASlam_C, ScaleTimeline_Scale_93C7A80D431F1E652BA633A729DBEE9B) == 0x000240, "Member 'ASlam_C::ScaleTimeline_Scale_93C7A80D431F1E652BA633A729DBEE9B' has a wrong offset!");
static_assert(offsetof(ASlam_C, ScaleTimeline__Direction_93C7A80D431F1E652BA633A729DBEE9B) == 0x000244, "Member 'ASlam_C::ScaleTimeline__Direction_93C7A80D431F1E652BA633A729DBEE9B' has a wrong offset!");
static_assert(offsetof(ASlam_C, ScaleTimeline) == 0x000248, "Member 'ASlam_C::ScaleTimeline' has a wrong offset!");
static_assert(offsetof(ASlam_C, Size) == 0x000250, "Member 'ASlam_C::Size' has a wrong offset!");
static_assert(offsetof(ASlam_C, SlamForce) == 0x00025C, "Member 'ASlam_C::SlamForce' has a wrong offset!");
static_assert(offsetof(ASlam_C, Damage) == 0x000260, "Member 'ASlam_C::Damage' has a wrong offset!");
static_assert(offsetof(ASlam_C, ParentChar) == 0x000268, "Member 'ASlam_C::ParentChar' has a wrong offset!");
static_assert(offsetof(ASlam_C, Scale) == 0x000270, "Member 'ASlam_C::Scale' has a wrong offset!");
static_assert(offsetof(ASlam_C, DealtDamage) == 0x000278, "Member 'ASlam_C::DealtDamage' has a wrong offset!");
static_assert(offsetof(ASlam_C, Material) == 0x000288, "Member 'ASlam_C::Material' has a wrong offset!");

}

